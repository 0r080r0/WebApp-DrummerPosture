/*! For license information please see 60.865fd63a.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkdrums_posture_tracking=self.webpackChunkdrums_posture_tracking||[]).push([[60],{60:(e,t,n)=>{n.d(t,{load:()=>Ay});var r={};n.r(r),n.d(r,{arraysEqual:()=>re,assert:()=>Z,assertNonNegativeIntegerDimensions:()=>Re,assertNonNull:()=>$,assertShapesMatch:()=>X,bytesFromStringArray:()=>ve,bytesPerElement:()=>we,checkConversionForErrors:()=>fe,clamp:()=>K,computeStrides:()=>_e,createScalarValue:()=>Da,createShuffledIndices:()=>ie,decodeString:()=>Ba,distSquared:()=>Y,encodeString:()=>Ca,fetch:()=>Fa,fingerPrint64:()=>Ma,flatten:()=>ee,getArrayFromDType:()=>me,getTypedArrayFromDType:()=>he,hasEncodingLoss:()=>ye,hexToLong:()=>wa,indexToLoc:()=>Ce,inferDtype:()=>ke,inferFromImplicitShape:()=>ue,isBoolean:()=>Ne,isFunction:()=>Te,isInt:()=>ae,isNumber:()=>Se,isPromise:()=>Be,isScalarShape:()=>ne,isString:()=>xe,isTypedArray:()=>be,isValidDtype:()=>ge,locToIndex:()=>Fe,makeOnesTypedArray:()=>Me,makeZerosNestedTypedArray:()=>Oe,makeZerosTypedArray:()=>De,nearestDivisor:()=>Ee,nearestLargerEven:()=>H,now:()=>Ra,parseAxisParam:()=>pe,randUniform:()=>Q,repeatedTry:()=>le,rightPad:()=>ce,shuffle:()=>G,shuffleCombo:()=>q,sizeFromShape:()=>te,sizeToSquarishShape:()=>oe,squeezeShape:()=>de,sum:()=>J,swap:()=>j,tanh:()=>se,toNestedArray:()=>Ae,toTypedArray:()=>Oa});var a={};n.r(a),n.d(a,{assertTypesMatch:()=>os,getTensorsInContainer:()=>cs,isTensorInList:()=>is,makeTypesMatch:()=>ss});var s={};n.r(s),n.d(s,{isBrowser:()=>ws,isMobile:()=>bs,mockIsMobile:()=>ys});var o={};n.r(o),n.d(o,{browserFiles:()=>Po,browserHTTPRequest:()=>jo,concatenateArrayBuffers:()=>Ps,copyModel:()=>To,decodeWeights:()=>Fs,encodeWeights:()=>Rs,fromMemory:()=>Zo,fromMemorySync:()=>Xo,getLoadHandlers:()=>Ys,getModelArtifactsForJSON:()=>Us,getModelArtifactsForJSONSync:()=>Ws,getModelArtifactsInfoForJSON:()=>Gs,getSaveHandlers:()=>Qs,getWeightSpecs:()=>qs,http:()=>Ho,isHTTPScheme:()=>qo,listModels:()=>So,loadWeights:()=>Wo,moveModel:()=>Eo,registerLoadRouter:()=>Js,registerSaveRouter:()=>js,removeModel:()=>ko,weightsLoaderFactory:()=>Uo,withSaveHandler:()=>$o,withSaveHandlerSync:()=>ei});var i={};n.r(i),n.d(i,{confusionMatrix:()=>Ii});var c={};n.r(c),n.d(c,{assertAndGetBroadcastShape:()=>Di,getBroadcastDims:()=>Ai,getReductionAxes:()=>Mi});var l={};n.r(l),n.d(l,{fromPixels:()=>Pi,fromPixelsAsync:()=>Bi,toPixels:()=>Li});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>zi});var p={};n.r(p),n.d(p,{calculateShapes:()=>Ui,validateInput:()=>Wi,validateUpdateShape:()=>Vi});var d={};n.r(d),n.d(d,{assertParamsValid:()=>Ki,computeFlatOffset:()=>ac,computeOutShape:()=>ji,getNormalizedAxes:()=>Zi,isSliceContinous:()=>rc,maskToAxes:()=>Hi,parseSliceParams:()=>sc,sliceInfo:()=>oc,startForAxis:()=>tc,startIndicesWithElidedDims:()=>Xi,stopForAxis:()=>nc,stopIndicesWithElidedDims:()=>$i,stridesForAxis:()=>ec,stridesWithElidedDims:()=>Ji});var h={};n.r(h),n.d(h,{Serializable:()=>cc,SerializationMap:()=>lc,registerClass:()=>uc});var m={};n.r(m),n.d(m,{TEST_EPSILON_FLOAT16:()=>dc,createVideoElement:()=>Sc,encodeStrings:()=>Nc,expectArrayBuffersEqual:()=>xc,expectArraysClose:()=>hc,expectArraysEqual:()=>yc,expectNumbersClose:()=>bc,expectPromiseToFail:()=>gc,expectValuesInRange:()=>vc,play:()=>kc,testEpsilon:()=>mc});var f={};n.r(f),n.d(f,{conv2d:()=>Zd,depthwiseConv2d:()=>eh,matMul:()=>th});var g={};n.r(g),n.d(g,{collectGatherOpShapeInfo:()=>uf,computeOutShape:()=>lf,segOpComputeOptimalWindowSize:()=>cf});var y={};n.r(y),n.d(y,{ERF_A1:()=>Tm,ERF_A2:()=>Em,ERF_A3:()=>_m,ERF_A4:()=>Im,ERF_A5:()=>Am,ERF_P:()=>km,PARALLELIZE_THRESHOLD:()=>mm,RowPartitionType:()=>lm,SELU_SCALE:()=>Sm,SELU_SCALEALPHA:()=>Nm,applyActivation:()=>Qd,assertAndGetBroadcastShape:()=>Di,assertAxesAreInnerMostDims:()=>Nu,assertParamsConsistent:()=>im,assignToTypedArray:()=>Cm,axesAreInnerMostDims:()=>bu,calculateShapes:()=>Ui,checkEinsumDimSizes:()=>qm,checkPadOnDimRoundingMode:()=>El,combineLocations:()=>wu,combineRaggedTensorToTensorShapes:()=>um,complexWithEvenIndex:()=>Om,complexWithOddIndex:()=>Rm,computeConv2DInfo:()=>gl,computeConv3DInfo:()=>yl,computeDefaultPad:()=>bl,computeDilation2DInfo:()=>hl,computeOptimalWindowSize:()=>fm,computeOutAndReduceShapes:()=>vu,computeOutShape:()=>cm,computePool2DInfo:()=>ml,computePool3DInfo:()=>fl,convertConv2DDataFormat:()=>Tl,decodeEinsumEquation:()=>Um,eitherStridesOrDilationsAreOne:()=>kl,expandShapeToKeepDim:()=>xu,exponent:()=>Lm,exponents:()=>Bm,fromStringArrayToUint8:()=>df,fromUint8ToStringArray:()=>pf,getAxesPermutation:()=>Su,getBroadcastDims:()=>Ai,getComplexWithIndex:()=>Fm,getEinsumComputePath:()=>Km,getEinsumPermutation:()=>Gm,getFusedBiasGradient:()=>Jd,getFusedDyActivation:()=>jd,getImageCenter:()=>gm,getInnerMostAxes:()=>Tu,getPermuted:()=>bm,getRaggedRank:()=>dm,getReductionAxes:()=>Mi,getReshaped:()=>ym,getReshapedPermuted:()=>wm,getRowPartitionTypesHelper:()=>pm,getSliceBeginCoords:()=>vm,getSliceSize:()=>xm,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Qm,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Ym,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Zm,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>ef,getSparseReshapeInputOutputMismatchErrorMessage:()=>nf,getSparseReshapeInputOutputMultipleErrorMessage:()=>tf,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Xm,getSparseReshapeNegativeOutputDimErrorMessage:()=>$m,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>of,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>rf,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>af,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>sf,getUndoAxesPermutation:()=>ku,isIdentityPermutation:()=>Hm,log:()=>sa,mergeRealAndImagArrays:()=>Mm,prepareAndValidate:()=>zi,prepareSplitSize:()=>Jm,segment_util:()=>g,shouldFuse:()=>Yd,slice_util:()=>d,splitRealAndImagArrays:()=>Dm,tupleValuesAreOne:()=>Sl,upcastType:()=>rs,validateDefaultValueShape:()=>hm,validateInput:()=>Wi,validateUpdateShape:()=>Vi,warn:()=>aa});var b={};n.r(b),n.d(b,{nonMaxSuppressionV3Impl:()=>mh,nonMaxSuppressionV4Impl:()=>fh,nonMaxSuppressionV5Impl:()=>gh,whereImpl:()=>Cd});var w={};n.r(w),n.d(w,{Abs:()=>Ke,Acos:()=>He,Acosh:()=>je,AdadeltaOptimizer:()=>Uc,AdagradOptimizer:()=>qc,AdamOptimizer:()=>jc,AdamaxOptimizer:()=>Yc,Add:()=>Je,AddN:()=>Qe,All:()=>Ye,Any:()=>Ze,ArgMax:()=>Xe,ArgMin:()=>$e,Asin:()=>et,Asinh:()=>tt,Atan:()=>nt,Atan2:()=>at,Atanh:()=>rt,AvgPool:()=>st,AvgPool3D:()=>it,AvgPool3DGrad:()=>ct,AvgPoolGrad:()=>ot,BatchMatMul:()=>lt,BatchToSpaceND:()=>ut,Bincount:()=>pt,BroadcastArgs:()=>ht,BroadcastTo:()=>dt,Cast:()=>mt,Ceil:()=>ft,ClipByValue:()=>gt,Complex:()=>yt,ComplexAbs:()=>bt,Concat:()=>wt,Conv2D:()=>vt,Conv2DBackpropFilter:()=>xt,Conv2DBackpropInput:()=>Nt,Conv3D:()=>St,Conv3DBackpropFilterV2:()=>kt,Conv3DBackpropInputV2:()=>Tt,Cos:()=>Et,Cosh:()=>_t,CropAndResize:()=>Mt,Cumprod:()=>It,Cumsum:()=>At,DataStorage:()=>V,DenseBincount:()=>Dt,DepthToSpace:()=>Ot,DepthwiseConv2dNative:()=>Rt,DepthwiseConv2dNativeBackpropFilter:()=>Ft,DepthwiseConv2dNativeBackpropInput:()=>Ct,Diag:()=>Bt,Dilation2D:()=>Lt,Dilation2DBackpropFilter:()=>zt,Dilation2DBackpropInput:()=>Pt,ENV:()=>Ue,Einsum:()=>Wt,Elu:()=>Ut,EluGrad:()=>Gt,Environment:()=>Pe,Equal:()=>Kt,Erf:()=>qt,Exp:()=>Ht,ExpandDims:()=>jt,Expm1:()=>Jt,FFT:()=>Qt,Fill:()=>Yt,FlipLeftRight:()=>Zt,Floor:()=>Xt,FloorDiv:()=>$t,FromPixels:()=>$r,FusedBatchNorm:()=>en,FusedConv2D:()=>na,FusedDepthwiseConv2D:()=>ra,GatherNd:()=>nn,GatherV2:()=>tn,Greater:()=>rn,GreaterEqual:()=>an,IFFT:()=>on,Identity:()=>sn,Imag:()=>cn,IsFinite:()=>ln,IsInf:()=>un,IsNan:()=>pn,KernelBackend:()=>W,LRN:()=>kn,LRNGrad:()=>Tn,LeakyRelu:()=>dn,Less:()=>hn,LessEqual:()=>mn,LinSpace:()=>fn,Log:()=>gn,Log1p:()=>yn,LogSoftmax:()=>Nn,LogicalAnd:()=>bn,LogicalNot:()=>wn,LogicalOr:()=>vn,LogicalXor:()=>xn,LowerBound:()=>Sn,Max:()=>En,MaxPool:()=>In,MaxPool3D:()=>Mn,MaxPool3DGrad:()=>Dn,MaxPoolGrad:()=>An,MaxPoolWithArgmax:()=>On,Maximum:()=>_n,Mean:()=>Rn,Min:()=>Fn,Minimum:()=>Cn,MirrorPad:()=>Bn,Mod:()=>Ln,MomentumOptimizer:()=>Xc,Multinomial:()=>Pn,Multiply:()=>zn,Neg:()=>Vn,NonMaxSuppressionV3:()=>Un,NonMaxSuppressionV4:()=>Gn,NonMaxSuppressionV5:()=>qn,NotEqual:()=>Wn,OP_SCOPE_SUFFIX:()=>Es,OneHot:()=>Hn,OnesLike:()=>Kn,Optimizer:()=>Wc,OptimizerConstructors:()=>el,Pack:()=>jn,PadV2:()=>Jn,Pool:()=>Qn,Pow:()=>Yn,Prelu:()=>Zn,Prod:()=>Xn,RMSPropOptimizer:()=>$c,RaggedGather:()=>$n,RaggedTensorToTensor:()=>er,Range:()=>tr,Rank:()=>Za,Real:()=>nr,RealDiv:()=>Vt,Reciprocal:()=>rr,Reduction:()=>Fh,Relu:()=>ar,Relu6:()=>ur,Reshape:()=>sr,ResizeBilinear:()=>cr,ResizeBilinearGrad:()=>lr,ResizeNearestNeighbor:()=>or,ResizeNearestNeighborGrad:()=>ir,Reverse:()=>pr,RotateWithOffset:()=>ea,Round:()=>dr,Rsqrt:()=>hr,SGDOptimizer:()=>Zc,ScatterNd:()=>mr,SearchSorted:()=>fr,Select:()=>gr,Selu:()=>yr,Sigmoid:()=>Nr,Sign:()=>xr,Sin:()=>wr,Sinh:()=>vr,Slice:()=>br,Softmax:()=>Ir,Softplus:()=>Sr,SpaceToBatchND:()=>Er,SparseFillEmptyRows:()=>Ar,SparseReshape:()=>Mr,SparseSegmentMean:()=>Dr,SparseSegmentSum:()=>Or,SparseToDense:()=>Rr,SplitV:()=>_r,Sqrt:()=>kr,Square:()=>Cr,SquaredDifference:()=>Fr,Step:()=>Xr,StridedSlice:()=>Br,StringNGrams:()=>Lr,StringSplit:()=>Pr,StringToHashBucketFast:()=>zr,Sub:()=>Vr,Sum:()=>Tr,Tan:()=>Wr,Tanh:()=>Ur,Tensor:()=>Qa,TensorBuffer:()=>Ka,Tile:()=>Gr,TopK:()=>qr,Transform:()=>Kr,Transpose:()=>Hr,Unique:()=>jr,Unpack:()=>Jr,UnsortedSegmentSum:()=>Qr,UpperBound:()=>Yr,Variable:()=>Ya,ZerosLike:()=>Zr,_FusedMatMul:()=>ta,abs:()=>Jc,acos:()=>tl,acosh:()=>nl,add:()=>Ec,addN:()=>rl,all:()=>al,any:()=>sl,argMax:()=>ol,argMin:()=>il,asin:()=>cl,asinh:()=>ll,atan:()=>ul,atan2:()=>pl,atanh:()=>dl,avgPool:()=>Il,avgPool3d:()=>Al,backend:()=>Ni,backend_util:()=>y,basicLSTMCell:()=>Fl,batchNorm:()=>Bl,batchNorm2d:()=>Ll,batchNorm3d:()=>Pl,batchNorm4d:()=>zl,batchToSpaceND:()=>Cl,bincount:()=>Vl,booleanMaskAsync:()=>Ld,broadcastArgs:()=>Wl,broadcastTo:()=>Ul,broadcast_util:()=>c,browser:()=>l,buffer:()=>Do,cast:()=>Oo,ceil:()=>Gl,clipByValue:()=>ql,clone:()=>Ro,complex:()=>Is,concat:()=>Ml,concat1d:()=>Kl,concat2d:()=>Hl,concat3d:()=>jl,concat4d:()=>Jl,conv1d:()=>Yl,conv2d:()=>Ql,conv2dTranspose:()=>Xl,conv3d:()=>$l,conv3dTranspose:()=>tu,copyRegisteredKernels:()=>fa,cos:()=>nu,cosh:()=>ru,cosineWindow:()=>qd,cumprod:()=>au,cumsum:()=>su,customGrad:()=>Pc,denseBincount:()=>ou,deprecationWarn:()=>oi,depthToSpace:()=>iu,depthwiseConv2d:()=>cu,device_util:()=>s,diag:()=>lu,dilation2d:()=>uu,disableDeprecationWarnings:()=>si,dispose:()=>di,disposeVariables:()=>ii,div:()=>Ic,divNoNan:()=>hu,dot:()=>mu,dropout:()=>Ud,einsum:()=>fu,elu:()=>gu,enableDebugMode:()=>ai,enableProdMode:()=>ri,enclosingPowerOfTwo:()=>Gd,engine:()=>ci,env:()=>Ve,equal:()=>pu,erf:()=>yu,euclideanNorm:()=>Du,exp:()=>Ou,expandDims:()=>Ru,expm1:()=>Fu,eye:()=>Bu,fft:()=>dd,fill:()=>Gc,findBackend:()=>wi,findBackendFactory:()=>vi,floor:()=>Lu,floorDiv:()=>_c,fused:()=>f,gather:()=>Pu,gatherND:()=>Wd,gather_util:()=>u,getBackend:()=>yi,getGradient:()=>la,getKernel:()=>ca,getKernelsForBackend:()=>ua,grad:()=>Rc,grads:()=>Fc,greater:()=>zu,greaterEqual:()=>Vu,ifft:()=>hd,imag:()=>ki,image:()=>$h,inTopKAsync:()=>Kd,io:()=>o,irfft:()=>md,isFinite:()=>Wu,isInf:()=>Uu,isNaN:()=>Gu,keep:()=>hi,kernel_impls:()=>b,leakyRelu:()=>qu,less:()=>Ku,lessEqual:()=>Hu,linalg:()=>em,linspace:()=>ju,localResponseNormalization:()=>Ju,log:()=>Qu,log1p:()=>Yu,logSigmoid:()=>Xu,logSoftmax:()=>$u,logSumExp:()=>ep,logicalAnd:()=>tp,logicalNot:()=>np,logicalOr:()=>rp,logicalXor:()=>ap,losses:()=>tm,lowerBound:()=>ip,matMul:()=>ti,math:()=>i,max:()=>Eu,maxPool:()=>cp,maxPool3d:()=>lp,maxPoolWithArgmax:()=>up,maximum:()=>Qc,mean:()=>pp,memory:()=>li,meshgrid:()=>mp,min:()=>_u,minimum:()=>fp,mirrorPad:()=>gp,mod:()=>yp,moments:()=>bp,movingAverage:()=>Pd,mul:()=>Ac,multiRNNCell:()=>wp,multinomial:()=>vp,neg:()=>Ti,nextFrame:()=>om,norm:()=>Mu,notEqual:()=>xp,oneHot:()=>ni,ones:()=>hp,onesLike:()=>Np,op:()=>_s,outerProduct:()=>Sp,pad:()=>kp,pad1d:()=>Tp,pad2d:()=>Ep,pad3d:()=>_p,pad4d:()=>Ip,pool:()=>Mp,pow:()=>Kc,prelu:()=>Dp,print:()=>Fo,prod:()=>Op,profile:()=>ui,raggedGather:()=>Rp,raggedTensorToTensor:()=>Fp,rand:()=>Cp,randomGamma:()=>Vp,randomNormal:()=>Wp,randomStandardNormal:()=>Up,randomUniform:()=>Gp,range:()=>qp,ready:()=>gi,real:()=>Ei,reciprocal:()=>Kp,registerBackend:()=>xi,registerGradient:()=>da,registerKernel:()=>pa,relu:()=>Hp,relu6:()=>jp,removeBackend:()=>bi,reshape:()=>_l,reverse:()=>Jp,reverse1d:()=>Qp,reverse2d:()=>Yp,reverse3d:()=>Zp,reverse4d:()=>Xp,rfft:()=>gd,round:()=>$p,rsqrt:()=>ed,scalar:()=>Vc,scatterND:()=>zd,scatter_util:()=>p,searchSorted:()=>op,selu:()=>td,separableConv2d:()=>nd,serialization:()=>h,setBackend:()=>fi,setPlatform:()=>Si,setdiff1dAsync:()=>rd,sigmoid:()=>Dl,sign:()=>ad,signal:()=>Xh,sin:()=>sd,sinh:()=>od,slice:()=>Ol,slice1d:()=>id,slice2d:()=>cd,slice3d:()=>ld,slice4d:()=>ud,slice_util:()=>d,softmax:()=>pd,softplus:()=>Zu,spaceToBatchND:()=>Ap,sparse:()=>nm,sparseToDense:()=>Vd,spectral:()=>Zh,split:()=>fd,sqrt:()=>Mc,square:()=>Dc,squaredDifference:()=>yd,squeeze:()=>bd,stack:()=>wd,step:()=>vd,stridedSlice:()=>xd,string:()=>rm,sub:()=>Hc,sum:()=>Iu,sumOutType:()=>as,tan:()=>Nd,tanh:()=>Rl,tensor:()=>Ms,tensor1d:()=>Sd,tensor2d:()=>kd,tensor3d:()=>Oi,tensor4d:()=>Td,tensor5d:()=>Ed,tensor6d:()=>_d,tensor_util:()=>a,test_util:()=>m,tidy:()=>pi,tile:()=>Cu,time:()=>mi,topk:()=>Id,train:()=>am,transpose:()=>_i,truncatedNormal:()=>Ad,unique:()=>Md,unregisterGradient:()=>ma,unregisterKernel:()=>ha,unsortedSegmentSum:()=>Dd,unstack:()=>Od,upcastType:()=>rs,upperBound:()=>Rd,util:()=>r,valueAndGrad:()=>Cc,valueAndGrads:()=>Bc,variable:()=>Fd,variableGrads:()=>Lc,version_core:()=>Tc,where:()=>du,whereAsync:()=>Bd,zeros:()=>dp,zerosLike:()=>Oc});var v={};n.r(v),n.d(v,{json:()=>kf});var x={};n.r(x),n.d(x,{json:()=>Tf});var N={};n.r(N),n.d(N,{json:()=>Ef});var S={};n.r(S),n.d(S,{json:()=>_f});var k={};n.r(k),n.d(k,{json:()=>If});var T={};n.r(T),n.d(T,{json:()=>Af});var E={};n.r(E),n.d(E,{json:()=>Mf});var _={};n.r(_),n.d(_,{json:()=>Df});var I={};n.r(I),n.d(I,{json:()=>Of});var A={};n.r(A),n.d(A,{json:()=>Rf});var M={};n.r(M),n.d(M,{json:()=>Ff});var D={};n.r(D),n.d(D,{json:()=>Cf});var O={};n.r(O),n.d(O,{json:()=>Bf});var R={};n.r(R),n.d(R,{json:()=>Lf});var F={};n.r(F),n.d(F,{json:()=>Pf});var C={};n.r(C),n.d(C,{json:()=>zf});var B={};n.r(B),n.d(B,{json:()=>Vf});var L={};n.r(L),n.d(L,{json:()=>Wf});var P={};n.r(P),n.d(P,{json:()=>Uf});var z={};n.r(z),n.d(z,{OP_SCOPE_SUFFIX:()=>Es,abs:()=>Jc,acos:()=>tl,acosh:()=>nl,add:()=>Ec,addN:()=>rl,all:()=>al,any:()=>sl,argMax:()=>ol,argMin:()=>il,asin:()=>cl,asinh:()=>ll,atan:()=>ul,atan2:()=>pl,atanh:()=>dl,avgPool:()=>Il,avgPool3d:()=>Al,basicLSTMCell:()=>Fl,batchNorm:()=>Bl,batchNorm2d:()=>Ll,batchNorm3d:()=>Pl,batchNorm4d:()=>zl,batchToSpaceND:()=>Cl,bincount:()=>Vl,booleanMaskAsync:()=>Ld,broadcastArgs:()=>Wl,broadcastTo:()=>Ul,buffer:()=>Do,cast:()=>Oo,ceil:()=>Gl,clipByValue:()=>ql,clone:()=>Ro,complex:()=>Is,concat:()=>Ml,concat1d:()=>Kl,concat2d:()=>Hl,concat3d:()=>jl,concat4d:()=>Jl,conv1d:()=>Yl,conv2d:()=>Ql,conv2dTranspose:()=>Xl,conv3d:()=>$l,conv3dTranspose:()=>tu,cos:()=>nu,cosh:()=>ru,cosineWindow:()=>qd,cumprod:()=>au,cumsum:()=>su,denseBincount:()=>ou,depthToSpace:()=>iu,depthwiseConv2d:()=>cu,diag:()=>lu,dilation2d:()=>uu,div:()=>Ic,divNoNan:()=>hu,dot:()=>mu,dropout:()=>Ud,einsum:()=>fu,elu:()=>gu,enclosingPowerOfTwo:()=>Gd,equal:()=>pu,erf:()=>yu,euclideanNorm:()=>Du,exp:()=>Ou,expandDims:()=>Ru,expm1:()=>Fu,eye:()=>Bu,fft:()=>dd,fill:()=>Gc,floor:()=>Lu,floorDiv:()=>_c,fused:()=>f,gather:()=>Pu,gatherND:()=>Wd,greater:()=>zu,greaterEqual:()=>Vu,ifft:()=>hd,imag:()=>ki,image:()=>$h,inTopKAsync:()=>Kd,irfft:()=>md,isFinite:()=>Wu,isInf:()=>Uu,isNaN:()=>Gu,leakyRelu:()=>qu,less:()=>Ku,lessEqual:()=>Hu,linalg:()=>em,linspace:()=>ju,localResponseNormalization:()=>Ju,log:()=>Qu,log1p:()=>Yu,logSigmoid:()=>Xu,logSoftmax:()=>$u,logSumExp:()=>ep,logicalAnd:()=>tp,logicalNot:()=>np,logicalOr:()=>rp,logicalXor:()=>ap,losses:()=>tm,lowerBound:()=>ip,matMul:()=>ti,max:()=>Eu,maxPool:()=>cp,maxPool3d:()=>lp,maxPoolWithArgmax:()=>up,maximum:()=>Qc,mean:()=>pp,meshgrid:()=>mp,min:()=>_u,minimum:()=>fp,mirrorPad:()=>gp,mod:()=>yp,moments:()=>bp,movingAverage:()=>Pd,mul:()=>Ac,multiRNNCell:()=>wp,multinomial:()=>vp,neg:()=>Ti,norm:()=>Mu,notEqual:()=>xp,oneHot:()=>ni,ones:()=>hp,onesLike:()=>Np,op:()=>_s,outerProduct:()=>Sp,pad:()=>kp,pad1d:()=>Tp,pad2d:()=>Ep,pad3d:()=>_p,pad4d:()=>Ip,pool:()=>Mp,pow:()=>Kc,prelu:()=>Dp,print:()=>Fo,prod:()=>Op,raggedGather:()=>Rp,raggedTensorToTensor:()=>Fp,rand:()=>Cp,randomGamma:()=>Vp,randomNormal:()=>Wp,randomStandardNormal:()=>Up,randomUniform:()=>Gp,range:()=>qp,real:()=>Ei,reciprocal:()=>Kp,relu:()=>Hp,relu6:()=>jp,reshape:()=>_l,reverse:()=>Jp,reverse1d:()=>Qp,reverse2d:()=>Yp,reverse3d:()=>Zp,reverse4d:()=>Xp,rfft:()=>gd,round:()=>$p,rsqrt:()=>ed,scalar:()=>Vc,scatterND:()=>zd,searchSorted:()=>op,selu:()=>td,separableConv2d:()=>nd,setdiff1dAsync:()=>rd,sigmoid:()=>Dl,sign:()=>ad,signal:()=>Xh,sin:()=>sd,sinh:()=>od,slice:()=>Ol,slice1d:()=>id,slice2d:()=>cd,slice3d:()=>ld,slice4d:()=>ud,softmax:()=>pd,softplus:()=>Zu,spaceToBatchND:()=>Ap,sparse:()=>nm,sparseToDense:()=>Vd,spectral:()=>Zh,split:()=>fd,sqrt:()=>Mc,square:()=>Dc,squaredDifference:()=>yd,squeeze:()=>bd,stack:()=>wd,step:()=>vd,stridedSlice:()=>xd,string:()=>rm,sub:()=>Hc,sum:()=>Iu,tan:()=>Nd,tanh:()=>Rl,tensor:()=>Ms,tensor1d:()=>Sd,tensor2d:()=>kd,tensor3d:()=>Oi,tensor4d:()=>Td,tensor5d:()=>Ed,tensor6d:()=>_d,tile:()=>Cu,topk:()=>Id,transpose:()=>_i,truncatedNormal:()=>Ad,unique:()=>Md,unsortedSegmentSum:()=>Dd,unstack:()=>Od,upperBound:()=>Rd,variable:()=>Fd,where:()=>du,whereAsync:()=>Bd,zeros:()=>dp,zerosLike:()=>Oc});class V{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class W{refCount(e){return U("refCount")}incRef(e){return U("incRef")}timerAvailable(){return!0}time(e){return U("time")}read(e){return U("read")}readSync(e){return U("readSync")}readToGPU(e,t){return U("readToGPU")}numDataIds(){return U("numDataIds")}disposeData(e,t){return U("disposeData")}write(e,t,n){return U("write")}move(e,t,n,r,a){return U("move")}memory(){return U("memory")}floatPrecision(){return U("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return U("dispose")}}function U(e){throw new Error("'".concat(e,"' not yet implemented or not found in the registry. ")+"This kernel may not be supported by the tfjs backend you have chosen")}function G(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,j(e,t,n)}function q(e,t){if(e.length!==t.length)throw new Error("Array sizes must match to be shuffled together "+"First array length was ".concat(e.length)+"Second array length was ".concat(t.length));let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,j(e,n,r),j(t,n,r)}function K(e,t,n){return Math.max(e,Math.min(t,n))}function H(e){return e%2===0?e:e+1}function j(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function J(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Q(e,t){const n=Math.random();return t*n+(1-n)*e}function Y(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function Z(e,t){if(!e)throw new Error("string"===typeof t?t:t())}function X(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";Z(re(e,t),()=>n+" Shapes ".concat(e," and ").concat(t," must match"))}function $(e){Z(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function ee(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t&&(t=[]),Array.isArray(e)||be(e)&&!n)for(let r=0;r<e.length;++r)ee(e[r],t,n);else t.push(e);return t}function te(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ne(e){return 0===e.length}function re(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ae(e){return e%1===0}function se(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function oe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ie(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return G(t),t}function ce(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function le(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:setTimeout;return new Promise((a,s)=>{let o=0;const i=()=>{if(e())return void a();o++;const c=t(o);null!=n&&o>=n?s():r(i,c)};i()})}function ue(e,t){let n=1,r=-1;for(let s=0;s<e.length;++s)if(e[s]>=0)n*=e[s];else if(-1===e[s]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. "+"Found -1 at dim ".concat(r," and dim ").concat(s));r=s}else if(e[s]<0)throw Error("Shapes can not be < 0. Found ".concat(e[s]," at dim ").concat(s));if(-1===r){if(t>0&&t!==n)throw Error("Size(".concat(t,") must match the product of shape ").concat(e));return e}if(0===n)throw Error("Cannot infer the missing size in [".concat(e,"] when ")+"there are 0 elements");if(t%n!==0)throw Error("The implicit shape can't be a fractional number. "+"Got ".concat(t," / ").concat(n));const a=e.slice();return a[r]=t/n,a}function pe(e,t){const n=t.length;return Z((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>"All values in axis param must be in range [-".concat(n,", ").concat(n,") but ")+"got axis ".concat(e)),Z(e.every(e=>ae(e)),()=>"All values in axis param must be integers but "+"got axis ".concat(e)),e.map(e=>e<0?n+e:e)}function de(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:pe(t,e).sort();let o=0;for(let i=0;i<e.length;++i){if(null!=s){if(s[o]===i&&1!==e[i])throw new Error("Can't squeeze axis ".concat(i," since its dim '").concat(e[i],"' is not 1"));(null==s[o]||s[o]>i)&&1===e[i]&&(n.push(e[i]),r.push(i)),s[o]<=i&&o++}1!==e[i]&&(n.push(e[i]),r.push(i))}return{newShape:n,keptDims:r}}function he(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type ".concat(e));n=new Uint8Array(t)}return n}function me(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type ".concat(e));n=new Array(t)}return n}function fe(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type ".concat(t," being uploaded contains ").concat(r,"."))}}function ge(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ye(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function be(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function we(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype ".concat(e))}function ve(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function xe(e){return"string"===typeof e||e instanceof String}function Ne(e){return"boolean"===typeof e}function Se(e){return"number"===typeof e}function ke(e){return Array.isArray(e)?ke(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Se(e)?"float32":xe(e)?"string":Ne(e)?"bool":"float32"}function Te(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Ee(e,t){for(let n=t;n<e;++n)if(e%n===0)return n;return e}function _e(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Ie(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce((e,t)=>e*t)*(r?2:1);for(let t=0;t<s;t++)a[t]=Ie(e+t*i,o,n,r)}return a}function Ae(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error("[".concat(e,"] does not match the input size ").concat(t.length).concat(n?" for a complex tensor":"","."));return Ie(0,e,t,n)}function Me(e,t){const n=De(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function De(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type ".concat(t))}function Oe(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return Ae(e,new Float32Array(n));if("int32"===t)return Ae(e,new Int32Array(n));if("bool"===t)return Ae(e,new Uint8Array(n));throw new Error("Unknown data type ".concat(t))}function Re(e){e.forEach(t=>{Z(Number.isInteger(t)&&t>=0,()=>"Tensor must have a shape comprised of positive integers but got "+"shape [".concat(e,"]."))})}function Fe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let a=0;a<e.length-1;++a)r+=n[a]*e[a];return r}function Ce(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let a=0;a<r.length-1;++a)r[a]=Math.floor(e/n[a]),e-=r[a]*n[a];return r[r.length-1]=e,r}function Be(e){return e&&e.then&&"function"===typeof e.then}const Le="tfjsflags";class Pe{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ze,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Ve().getBool("IS_TEST")||Ve().getBool("PROD")||console.warn("Platform ".concat(this.platformName," has already been set. ")+"Overwriting the platform with ".concat(e,"."))),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Ve().getBool("IS_TEST")||Ve().getBool("PROD")||console.warn("Setting feature override from URL ".concat(e,": ").concat(t,".")),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Be(t))throw new Error("Flag ".concat(e," cannot be synchronously evaluated. ")+"Please use getAsync() instead.");return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error("Cannot set flag ".concat(e," as it has not been registered."));this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error("Cannot evaluate flag '".concat(e,"': no evaluation function found."));return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"===typeof this.global||"undefined"===typeof this.global.location||"undefined"===typeof this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Le in e){e[Le].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if("".concat(+t)===t)return+t;throw new Error("Could not parse value flag value ".concat(t," for flag ").concat(e,"."))}(t,n)})}}}function ze(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,r[0],r[1]),r.join("=")}),t}function Ve(){return Ue}let We,Ue=null;function Ge(){if(null==We){let e;if("undefined"!==typeof window)e=window;else if("undefined"!==typeof n.g)e=n.g;else if("undefined"!==typeof process)e=process;else{if("undefined"===typeof self)throw new Error("Could not find a global object");e=self}We=e}return We}function qe(e,t){const n=function(){const e=Ge();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Ke="Abs",He="Acos",je="Acosh",Je="Add",Qe="AddN",Ye="All",Ze="Any",Xe="ArgMax",$e="ArgMin",et="Asin",tt="Asinh",nt="Atan",rt="Atanh",at="Atan2",st="AvgPool",ot="AvgPoolGrad",it="AvgPool3D",ct="AvgPool3DGrad",lt="BatchMatMul",ut="BatchToSpaceND",pt="Bincount",dt="BroadcastTo",ht="BroadcastArgs",mt="Cast",ft="Ceil",gt="ClipByValue",yt="Complex",bt="ComplexAbs",wt="Concat",vt="Conv2D",xt="Conv2DBackpropFilter",Nt="Conv2DBackpropInput",St="Conv3D",kt="Conv3DBackpropFilterV2",Tt="Conv3DBackpropInputV2",Et="Cos",_t="Cosh",It="Cumprod",At="Cumsum",Mt="CropAndResize",Dt="DenseBincount",Ot="DepthToSpace",Rt="DepthwiseConv2dNative",Ft="DepthwiseConv2dNativeBackpropFilter",Ct="DepthwiseConv2dNativeBackpropInput",Bt="Diag",Lt="Dilation2D",Pt="Dilation2DBackpropInput",zt="Dilation2DBackpropFilter",Vt="RealDiv",Wt="Einsum",Ut="Elu",Gt="EluGrad",qt="Erf",Kt="Equal",Ht="Exp",jt="ExpandDims",Jt="Expm1",Qt="FFT",Yt="Fill",Zt="FlipLeftRight",Xt="Floor",$t="FloorDiv",en="FusedBatchNorm",tn="GatherV2",nn="GatherNd",rn="Greater",an="GreaterEqual",sn="Identity",on="IFFT",cn="Imag",ln="IsFinite",un="IsInf",pn="IsNan",dn="LeakyRelu",hn="Less",mn="LessEqual",fn="LinSpace",gn="Log",yn="Log1p",bn="LogicalAnd",wn="LogicalNot",vn="LogicalOr",xn="LogicalXor",Nn="LogSoftmax",Sn="LowerBound",kn="LRN",Tn="LRNGrad",En="Max",_n="Maximum",In="MaxPool",An="MaxPoolGrad",Mn="MaxPool3D",Dn="MaxPool3DGrad",On="MaxPoolWithArgmax",Rn="Mean",Fn="Min",Cn="Minimum",Bn="MirrorPad",Ln="Mod",Pn="Multinomial",zn="Multiply",Vn="Neg",Wn="NotEqual",Un="NonMaxSuppressionV3",Gn="NonMaxSuppressionV4",qn="NonMaxSuppressionV5",Kn="OnesLike",Hn="OneHot",jn="Pack",Jn="PadV2",Qn="Pool",Yn="Pow",Zn="Prelu",Xn="Prod",$n="RaggedGather",er="RaggedTensorToTensor",tr="Range",nr="Real",rr="Reciprocal",ar="Relu",sr="Reshape",or="ResizeNearestNeighbor",ir="ResizeNearestNeighborGrad",cr="ResizeBilinear",lr="ResizeBilinearGrad",ur="Relu6",pr="Reverse",dr="Round",hr="Rsqrt",mr="ScatterNd",fr="SearchSorted",gr="Select",yr="Selu",br="Slice",wr="Sin",vr="Sinh",xr="Sign",Nr="Sigmoid",Sr="Softplus",kr="Sqrt",Tr="Sum",Er="SpaceToBatchND",_r="SplitV",Ir="Softmax",Ar="SparseFillEmptyRows",Mr="SparseReshape",Dr="SparseSegmentMean",Or="SparseSegmentSum",Rr="SparseToDense",Fr="SquaredDifference",Cr="Square",Br="StridedSlice",Lr="StringNGrams",Pr="StringSplit",zr="StringToHashBucketFast",Vr="Sub",Wr="Tan",Ur="Tanh",Gr="Tile",qr="TopK",Kr="Transform",Hr="Transpose",jr="Unique",Jr="Unpack",Qr="UnsortedSegmentSum",Yr="UpperBound",Zr="ZerosLike",Xr="Step",$r="FromPixels",ea="RotateWithOffset",ta="_FusedMatMul",na="FusedConv2D",ra="FusedDepthwiseConv2D";function aa(){Ve().getBool("IS_TEST")||Ve().getBool("PROD")||console.warn(...arguments)}function sa(){Ve().getBool("IS_TEST")||Ve().getBool("PROD")||console.log(...arguments)}const oa=qe("kernelRegistry",()=>new Map),ia=qe("gradRegistry",()=>new Map);function ca(e,t){const n=ga(e,t);return oa.get(n)}function la(e){return ia.get(e)}function ua(e){const t=oa.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function pa(e){const{kernelName:t,backendName:n}=e,r=ga(t,n);oa.has(r)&&aa("The kernel '".concat(t,"' for backend ")+"'".concat(n,"' is already registered")),oa.set(r,e)}function da(e){const{kernelName:t}=e;ia.has(t)&&Ve().getBool("DEBUG")&&aa("Overriding the gradient for '".concat(t,"'")),ia.set(t,e)}function ha(e,t){const n=ga(e,t);if(!oa.has(n))throw new Error("The kernel '".concat(e,"' for backend ")+"'".concat(t,"' is not registered"));oa.delete(n)}function ma(e){if(!ia.has(e))throw new Error("The gradient '".concat(e,"' for backend is not registered"));ia.delete(e)}function fa(e,t){ua(e).forEach(e=>{pa(Object.assign({},e,{backendName:t}))})}function ga(e,t){return"".concat(t,"_").concat(e)}var ya=n(353);const ba=n.n(ya)()||ya;function wa(e){return ba.fromString(e,!0,16)}const va=wa("c3a5c85c97cb3127"),xa=wa("b492b66fbe98f273"),Na=wa("9ae16a3b2f90404f");function Sa(e){return e.xor(e.shru(47))}function ka(e,t,n){const r=e.slice(t,t+n);return ba.fromBytes(Array.from(r),!0,!0)}function Ta(e,t){return ka(e,t,8)}function Ea(e,t){return ka(e,t,4)}function _a(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Ia(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:wa("9ddfea08eb382d69"),r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function Aa(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=_a(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(_a(a,44)),[a.add(r),s.add(o)]}(Ta(e,t),Ta(e,t+8),Ta(e,t+16),Ta(e,t+24),n,r)}function Ma(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=ba.fromNumber(81,!0);if(t<=32)return t<=16?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;if(t>=8){const n=Na.add(2*t),r=Ta(e,0).add(Na),a=Ta(e,t-8);return Ia(_a(a,37).mul(n).add(r),_a(r,25).add(a).mul(n),n)}if(t>=4){const n=Na.add(2*t);return Ia(Ea(e,0).shl(3).add(t),Ea(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return Sa(Na.mul(n).xor(va.mul(r))).mul(Na)}return Na}(e,t):function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=Na.add(2*t),r=Ta(e,0).mul(xa),a=Ta(e,8),s=Ta(e,t-8).mul(n),o=Ta(e,t-16).mul(Na);return Ia(_a(r.add(a),43).add(_a(s,30)).add(o),r.add(_a(a.add(Na),18)).add(s),n)}(e,t);if(t<=64)return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=Na.add(2*t),r=Ta(e,0).mul(Na),a=Ta(e,8),s=Ta(e,t-8).mul(n),o=Ta(e,t-16).mul(Na),i=_a(r.add(a),43).add(_a(s,30)).add(o),c=Ia(i,r.add(_a(a.add(Na),18)).add(s),n),l=Ta(e,16).mul(n),u=Ta(e,24),p=i.add(Ta(e,t-32)).mul(n),d=c.add(Ta(e,t-24)).mul(n);return Ia(_a(l.add(u),43).add(_a(p,30)).add(d),l.add(_a(u.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(xa).add(113),s=Sa(a.mul(Na).add(113)).mul(Na),o=[ba.UZERO,ba.UZERO],i=[ba.UZERO,ba.UZERO];r=r.mul(Na).add(Ta(e,0));let c=0;const l=64*(t-1>>6),u=l+(t-1&63)-63;do{r=_a(r.add(a).add(o[0]).add(Ta(e,c+8)),37).mul(xa),a=_a(a.add(o[1]).add(Ta(e,c+48)),42).mul(xa),r=r.xor(i[1]),a=a.add(o[0]).add(Ta(e,c+40)),s=_a(s.add(i[0]),33).mul(xa),o=Aa(e,c,o[1].mul(xa),r.add(i[0])),i=Aa(e,c+32,s.add(i[1]),a.add(Ta(e,c+16))),[s,r]=[r,s],c+=64}while(c!==l);const p=xa.add(s.and(255).shl(1));return c=u,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=_a(r.add(a).add(o[0]).add(Ta(e,c+8)),37).mul(p),a=_a(a.add(o[1]).add(Ta(e,c+48)),42).mul(p),r=r.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(Ta(e,c+40))),s=_a(s.add(i[0]),33).mul(p),o=Aa(e,c,o[1].mul(p),r.add(i[0])),i=Aa(e,c+32,s.add(i[1]),a.add(Ta(e,c+16))),[s,r]=[r,s],Ia(Ia(o[0],i[0],p).add(Sa(a).mul(va)).add(s),Ia(o[1],i[1],p).add(r),p)}function Da(e,t){return"string"===t?Ca(e):Oa([e],t)}function Oa(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ee(e)),Ve().getBool("DEBUG")&&fe(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type ".concat(t))}function Ra(){return Ve().platform.now()}function Fa(e,t){return Ve().platform.fetch(e,t)}function Ca(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Ve().platform.encode(e,t)}function Ba(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Ve().platform.decode(e,t)}class La{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new za)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let s;const o=Ra();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:Ra()-o})}if(Ve().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<r.length;i++){const t=r[i];t.data().then(n=>{Pa(n,t.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])})})}}function Pa(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn("Found ".concat(t," in the result of '").concat(n,"'")),!0}return!1}class za{logKernelProfile(e,t,n,r,a,s){const o="number"===typeof r?ce("".concat(r,"ms"),9):r.error,i=ce(e,25),c=t.rank,l=t.size,u=ce(t.shape.toString(),14);let p="";for(const d in a){const e=a[d];if(null!=e){const n=e.shape||t.shape,r=n.length;p+="".concat(d,": ").concat(r,"D ").concat(r>0?n:""," ")}}console.log("%c".concat(i,"\t%c").concat(o,"\t%c").concat(c,"D ").concat(u,"\t%c").concat(l,"\t%c").concat(p,"\t%c").concat(s),"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Va(e,t,n,r){const a=_e(t),s=function(e,t,n,r){const a=te(t),s=r[r.length-1],o=new Array(s).fill(0),i=t.length,c="complex64"===n?qa(e):e;if(i>1)for(let l=0;l<a/s;l++){const e=l*s;for(let t=0;t<s;t++)o[t]=Math.max(o[t],Wa(c[e+t],0,n).length)}return o}(e,t,n,a),o=t.length,i=Ga(e,t,n,a,s),c=["Tensor"];return r&&(c.push("  dtype: ".concat(n)),c.push("  rank: ".concat(o)),c.push("  shape: [".concat(t,"]")),c.push("  values:")),c.push(i.map(e=>"    "+e).join("\n")),c.join("\n")}function Wa(e,t,n){let r;return r=Array.isArray(e)?"".concat(parseFloat(e[0].toFixed(7))," + ")+"".concat(parseFloat(e[1].toFixed(7)),"j"):xe(e)?"'".concat(e,"'"):"bool"===n?Ua(e):parseFloat(e.toFixed(7)).toString(),ce(r,t)}function Ua(e){return 0===e?"false":"true"}function Ga(e,t,n,r,a){let s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];const o="complex64"===n?2:1,i=t[0],c=t.length;if(0===c){if("complex64"===n){return[Wa(qa(e)[0],0,n)]}return"bool"===n?[Ua(e[0])]:[e[0].toString()]}if(1===c){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=qa(r),s=qa(s)),["["+r.map((e,t)=>Wa(e,a[t],n)).join(", ")+", ..., "+s.map((e,t)=>Wa(e,a[i-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?qa(e):Array.from(e)).map((e,t)=>Wa(e,a[t],n)).join(", ")+"]"]}const l=t.slice(1),u=r.slice(1),p=r[0]*o,d=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,s=r+p;d.push(...Ga(e.slice(r,s),l,n,u,a,!1))}d.push("...");for(let t=i-3;t<i;t++){const r=t*p,s=r+p;d.push(...Ga(e.slice(r,s),l,n,u,a,t===i-1))}}else for(let f=0;f<i;f++){const t=f*p,r=t+p;d.push(...Ga(e.slice(t,r),l,n,u,a,f===i-1))}const h=2===c?",":"";d[0]="["+d[0]+h;for(let f=1;f<d.length-1;f++)d[f]=" "+d[f]+h;let m=",\n";for(let f=2;f<c;f++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(s?"":m),d}function qa(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ka{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=te(e),null!=n){const e=n.length;Z(e===this.size,()=>"Length of values '".concat(e,"' does not match the size ")+"inferred by the shape '".concat(this.size,"'."))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||me(t,this.size),this.strides=_e(e)}set(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),Z(n.length===this.rank,()=>"The number of provided coordinates (".concat(n.length,") must ")+"match the rank (".concat(this.rank,")"));const a=this.locToIndex(n);this.values[a]=e}get(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];0===t.length&&(t=[0]);let r=0;for(const s of t){if(s<0||s>=this.shape[r]){const e="Requested out of range element at ".concat(t,". ")+"  Buffer shape=".concat(this.shape);throw new Error(e)}r++}let a=t[t.length-1];for(let s=0;s<t.length-1;++s)a+=this.strides[s]*t[s];return this.values[a]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ha().makeTensor(this.values,this.shape,this.dtype)}}let Ha=null,ja=null,Ja=null;class Qa{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=te(e),this.strides=_e(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ja.buffer(this.shape,this.dtype,e)}bufferSync(){return ja.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ae(this.shape,e,"complex64"===this.dtype)}arraySync(){return Ae(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ha().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>Ba(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ha().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ha().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>Ba(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ha().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ha().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return ja.print(this,e)}clone(){return this.throwIfDisposed(),ja.clone(this)}toString(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return Va(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ja.cast(this,e)}variable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),Ha().makeVariable(this,e,t,n)}}Object.defineProperty(Qa,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),qe("Tensor",()=>Qa);class Ya extends Qa{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error("dtype of the new value (".concat(e.dtype,") and ")+"previous value (".concat(this.dtype,") must match"));if(!re(e.shape,this.shape))throw new Error("shape of the new value (".concat(e.shape,") and ")+"previous value (".concat(this.shape,") must match"));Ha().disposeTensor(this),this.dataId=e.dataId,Ha().incRef(this,null)}dispose(){Ha().disposeVariable(this),this.isDisposedInternal=!0}}var Za,Xa,$a,es,ts;Object.defineProperty(Ya,Symbol.hasInstance,{value:e=>e instanceof Qa&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Za||(Za={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Xa||(Xa={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}($a||($a={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(es||(es={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ts||(ts={}));const ns={float32:es,int32:Xa,bool:$a,complex64:ts};function rs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error("Can not upcast ".concat(e," with ").concat(t))}return ns[e][t]}function as(e){return rs(e,"int32")}function ss(e,t){if(e.dtype===t.dtype)return[e,t];const n=rs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function os(e,t){Z(e.dtype===t.dtype,()=>"The dtypes of the first(".concat(e.dtype,") and")+" second(".concat(t.dtype,") input must match"))}function is(e,t){return t.some(t=>t.id===e.id)}function cs(e){const t=[];return ls(e,t,new Set),t}function ls(e,t,n){if(null==e)return;if(e instanceof Qa)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!==typeof r)return;var r;const a=e;for(const s in a){const e=a[s];n.has(e)||(n.add(e),ls(e,t,n))}}function us(e){return null!=e.kernelName}class ps{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ds{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ps}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error("Backend '".concat(this.backendName,"' has not yet been initialized. Make ")+"sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error("The highest priority backend '".concat(e,"' has not yet been ")+"initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e in this.registryFactory?(aa("".concat(e," backend was already registered. ")+"Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error("Backend name '".concat(e,"' not found in registry"));if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new La(this.backendInstance),!0}setupRegisteredKernels(){ua(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){ua(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error("Cannot initialize backend ".concat(e,", no registration found."));try{const n=t.factory();if(!n||n instanceof W||"function"!==typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,aa("Initialization of backend ".concat(e," failed")),aa(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return aa("Initialization of backend ".concat(e," failed")),aa(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error("".concat(e," backend not found in registry"));this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!==typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!==typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!==typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return ds.nextTensorId++}nextVariableId(){return ds.nextVariableId++}clone(e){const t=ms.runKernel(sn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ms.runKernel(mt,t,n)}}),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=ca(e,this.backendName)))throw new Error("Kernel '".concat(e,"' not registered for backend '").concat(this.backendName,"'"));return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach(e=>{a+="complex64"===e.dtype?3:1});const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error("Backend '".concat(this.backendName,"' has an internal memory leak ")+"(".concat(o," data ids) after running '").concat(e,"'"))}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=us(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(us(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const c=ca(t,this.backendName);Z(null!=c,()=>"Cannot find registered kernel '".concat(t,"' for backend '").concat(this.backendName,"'")),o=()=>{const e=this.backend.numDataIds();i=c.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(r){const e=this.getTensorsForGradient(t,a,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy(()=>t(this.backend,a));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,e,n),n}}const{inputs:l,attrs:u}=e,p=us(e)?null:e.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(c,l,()=>o()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()}),r&&this.addTapeNode(c,l,t,p,n,u),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(e=>null!=l[e]?l[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map(e=>this.keep(this.clone(e)));return t}getTensorsForGradient(e,t,n){const r=la(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(Z(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),s=Object.keys(t).map(e=>t[e])):s=e.map(e=>t[e]);const o=n.filter((e,t)=>a[t]);return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&xe(e[0])&&(a=e.map(e=>Ca(e)));const s=r.write(a,t,n),o=new Qa(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=ve(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:a}=e,s=new Qa(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new Ya(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error("Variable with name ".concat(a.name," was already registered"));return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*we(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Ya||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*we(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=la(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=De(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=cs(e),n=new Set(t.map(e=>e.id));for(let a=0;a<this.state.activeScope.track.length;a++){const e=this.state.activeScope.track[a];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Z(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '".concat(n.dtype,"'"));const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));Z(a instanceof Qa,()=>"The result y returned by f() must be a tensor.");const s=function(e,t,n){const r={},a={};for(let c=0;c<t.length;c++)r[t[c].id]=!0;for(let c=0;c<e.length;c++){const n=e[c],s=n.inputs;for(const e in s){const o=s[e];let i=!1;for(let e=0;e<t.length;e++)if(r[o.id]){n.outputs.forEach(e=>r[e.id]=!0),i=!0,a[n.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let c=e.length-1;c>=0;c--){const t=e[c],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(s[t.outputs[e].id]){for(const e in n)s[n[e].id]=!0,o[t.id]=!0;break}}const i=[];for(let c=0;c<e.length;c++){const t=e[c];if(a[t.id]&&o[t.id]){const e={};for(const a in t.inputs){const n=t.inputs[a];r[n.id]&&(e[a]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,i.push(n)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[a.id]=null==n?function(e){const t=Me(te(e),"float32");return ms.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach(t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)}),null==s.gradient)throw new Error("Cannot compute gradient: gradient function not found "+"for ".concat(s.kernelName,"."));const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error("Cannot backprop through input ".concat(t,". ")+"Available gradients found: ".concat(Object.keys(i),"."));const a=n(()=>i[t]());if("float32"!==a.dtype)throw new Error("Error in gradient for op ".concat(s.kernelName,". The gradient of input ")+"".concat(t," must have 'float32' dtype, but has '").concat(a.dtype,"'"));const o=s.inputs[t];if(!re(a.shape,o.shape))throw new Error("Error in gradient for op ".concat(s.kernelName,". The gradient of input ")+"'".concat(t,"' has shape '").concat(a.shape,"', which does not match ")+"the shape of the input '".concat(o.shape,"'"));if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,e=>this.tidy(e),fs);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:r}})}customGrad(e){var t=this;return Z(Te(e),()=>"The f passed in customGrad(f) must be a function."),function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];let s;Z(r.every(e=>e instanceof Qa),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};r.forEach((e,t)=>{o[t]=e});return t.runKernelFunc({forwardFunc:(t,n)=>(s=e(...r,n),Z(s.value instanceof Qa,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),Z(Te(s.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),s.value),backwardsFunc:(e,t)=>{const n=s.gradFunc(e,t),a=Array.isArray(n)?n:[n];Z(a.length===r.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),Z(a.every(e=>e instanceof Qa),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return a.forEach((e,t)=>{o[t]=()=>e}),o},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Ra(),n=await this.backend.time(e);return n.wallMs=Ra()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ps;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function hs(){const e=Ge();if(null==e._tfengine){const t=new Pe(e);e._tfengine=new ds(t)}var t;return t=e._tfengine.ENV,Ue=t,Ha=()=>e._tfengine,e._tfengine}ds.nextTensorId=0,ds.nextVariableId=0;const ms=hs();function fs(e,t){const n={a:e,b:t};return ms.runKernel(Je,n)}let gs;function ys(e){gs=e}function bs(e){if(void 0!==gs)return gs;if(e||"undefined"!==typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!==typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function ws(){return"undefined"!==typeof window&&null!=window.document||"undefined"!==typeof WorkerGlobalScope}const vs=Ve();function xs(e,t){let n=e;if(be(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||be(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Ve().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ns(e,r,[]),r}function Ns(e,t,n){if(n=n||[],!Array.isArray(e)&&!be(e))return void Z(0===t.length,()=>"Element arr[".concat(n.join("]["),"] is a primitive, ")+"but should be an array/TypedArray of ".concat(t[0]," elements"));Z(t.length>0,()=>"Element arr[".concat(n.join("]["),"] should be a primitive, ")+"but is an array of ".concat(e.length," elements")),Z(e.length===t[0],()=>"Element arr[".concat(n.join("]["),"] should have ").concat(t[0]," ")+"elements, but has ".concat(e.length," elements"));const r=t.slice(1);for(let a=0;a<e.length;++a)Ns(e[a],r,n.concat(a))}function Ss(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error("Argument '".concat(n,"' passed to '").concat(r,"' must ")+"be ".concat(e," tensor, but got ").concat(t," tensor"))}}function ks(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(e instanceof Qa)return Ss(r,e.dtype,t,n),e;let a=ke(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),Ss(r,a,t,n),null==e||!be(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e){const r=null==e?"null":e.constructor.name;throw new Error("Argument '".concat(t,"' passed to '").concat(n,"' must be a ")+"Tensor or TensorLike, but got '".concat(r,"'"))}const s=xs(e,a);be(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?Oa(e,a):ee(e,[],!0);return ms.makeTensor(o,s,a)}function Ts(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(e))throw new Error("Argument ".concat(t," passed to ").concat(n," must be a ")+"`Tensor[]` or `TensorLike[]`");return e.map((e,a)=>ks(e,"".concat(t,"[").concat(a,"]"),n,r))}vs.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),vs.registerFlag("IS_BROWSER",()=>ws()),vs.registerFlag("IS_NODE",()=>"undefined"!==typeof process&&"undefined"!==typeof process.versions&&"undefined"!==typeof process.versions.node),vs.registerFlag("IS_CHROME",()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),vs.registerFlag("PROD",()=>!1),vs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>vs.getBool("DEBUG")),vs.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),vs.registerFlag("IS_TEST",()=>!1),vs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),vs.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),vs.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),vs.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),vs.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const Es="__op";function _s(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+"".concat(t.length," keys."));let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Es;const a=function(){ms.startScope(n);try{const e=r(...arguments);return Be(e)&&console.error("Cannot return a Promise inside of tidy."),ms.endScope(e),e}catch(e){throw ms.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const Is=_s({complex_:function(e,t){const n=ks(e,"real","complex"),r=ks(t,"imag","complex");X(n.shape,r.shape,"real and imag shapes, ".concat(n.shape," and ").concat(r.shape,", ")+"must match in call to tf.complex().");const a={real:n,imag:r};return ms.runKernel(yt,a)}});function As(e,t,n,r){if(null==r&&(r=ke(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!be(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Re(t);const e=te(t),r=te(n);Z(e===r,()=>"Based on the provided shape, [".concat(t,"], the tensor should have ")+"".concat(e," values but has ").concat(r));for(let a=0;a<n.length;++a){const e=n[a],r=a!==n.length-1||e!==te(t.slice(a));Z(n[a]===t[a]||!r,()=>"Error creating a new Tensor. Inferred shape "+"(".concat(n,") does not match the provided ")+"shape (".concat(t,"). "))}}return be(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Oa(e,r):ee(e,[],!0),ms.makeTensor(e,t,r)}function Ms(e,t,n){return As(e,t,xs(e,n),n)}const Ds={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Os=4;async function Rs(e,t){const n=[],r=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error("Unsupported dtype in weight '".concat(o,"': ").concat(i.dtype));const c={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise(async e=>{const t=await i.bytes(),n=t.reduce((e,t)=>e+t.length,0)+Os*t.length,r=new Uint8Array(n);let a=0;for(let s=0;s<t.length;s++){const e=t[s],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,a),a+=Os,r.set(e,a),a+=e.length}e(r)});r.push(e)}else r.push(i.data());null!=t&&(c.group=t),n.push(c)}return{data:Cs(await Promise.all(r)),specs:n}}function Fs(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,c=te(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error("Weight ".concat(s.name," with quantization ").concat(n.dtype," ")+"doesn't have corresponding metadata min and scale.")}else{if("float16"!==n.dtype)throw new Error("Weight ".concat(s.name," has unknown ")+"quantization dtype ".concat(n.dtype,". ")+"Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.");if("float32"!==o)throw new Error("Weight ".concat(s.name," is quantized with ").concat(n.dtype," ")+"which only supports weights of type float32 not ".concat(o,"."))}const i=Ds[n.dtype],u=e.slice(a,a+c*i),p="uint8"===n.dtype?new Uint8Array(u):new Uint16Array(u);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error("Unsupported quantization type ".concat(n.dtype," ")+"for weight type float32.");void 0===r&&(r=Ks()),l=r(p)}else{if("int32"!==o)throw new Error("Unsupported dtype in weight '".concat(t,"': ").concat(o));if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error("Unsupported quantization type ".concat(n.dtype," ")+"for weight type int32.");l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}a+=c*i}else if("string"===o){const t=te(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+Os))[0];a+=Os;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=Ds[o],s=e.slice(a,a+c*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error("Unsupported dtype in weight '".concat(t,"': ").concat(o));{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=Ms(e,i,"float32"),o=Ms(r,i,"float32");n[t]=Is(a,o),a.dispose(),o.dispose()}}a+=c*r}"complex64"!==o&&(n[t]=Ms(l,i,o))}return n}function Cs(e){if(null===e)throw new Error("Invalid input value: ".concat(JSON.stringify(e)));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: ".concat(e.constructor.name))});const r=new Uint8Array(t);let a=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),r.buffer}const Bs="undefined"!==typeof Buffer&&("undefined"===typeof Blob||"undefined"===typeof atob||"undefined"===typeof btoa);function Ls(e){return Bs?Buffer.byteLength(e):new Blob([e]).size}function Ps(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function zs(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Vs(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Ws(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Us(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Ws(e,n,r)}function Gs(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ls(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ls(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function qs(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Ks(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0===(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let o=0;o<r.length;o++){const a=r[o],i=e[n[a>>10]+(1023&a)]+t[a>>10];s[o]=i}return new Float32Array(a)}}class Hs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Hs.instance&&(Hs.instance=new Hs),Hs.instance}static registerSaveRouter(e){Hs.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Hs.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Hs.getHandlers(e,"save")}static getLoadHandlers(e,t){return Hs.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Hs.getInstance().loadRouters:Hs.getInstance().saveRouters).forEach(t=>{const a=t(e,n);null!==a&&r.push(a)}),r}}const js=e=>Hs.registerSaveRouter(e),Js=e=>Hs.registerLoadRouter(e),Qs=e=>Hs.getSaveHandlers(e),Ys=(e,t)=>Hs.getLoadHandlers(e,t),Zs="tensorflowjs",Xs="models_store",$s="model_info_store";function eo(){if(!Ve().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"===typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function to(e){const t=e.result;t.createObjectStore(Xs,{keyPath:"modelPath"}),t.createObjectStore($s,{keyPath:"modelPath"})}class no{constructor(e){if(this.indexedDB=eo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open(Zs,1);r.onupgradeneeded=()=>to(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(Xs,"readonly"),r=t.objectStore(Xs).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error("Cannot find model with path '".concat(this.modelPath,"' ")+"in IndexedDB."));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=Gs(t),s=a.transaction($s,"readwrite");let o=s.objectStore($s);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let c;i.onsuccess=()=>{c=a.transaction(Xs,"readwrite");const i=c.objectStore(Xs).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore($s);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)})}}no.URL_SCHEME="indexeddb://";const ro=e=>{return Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(no.URL_SCHEME)?(t=e.slice(no.URL_SCHEME.length),new no(t)):null;var t};Hs.registerSaveRouter(ro),Hs.registerLoadRouter(ro);class ao{constructor(){this.indexedDB=eo()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(Zs,1);n.onupgradeneeded=()=>to(n),n.onsuccess=()=>{const r=n.result,a=r.transaction($s,"readonly"),s=a.objectStore($s).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(no.URL_SCHEME)?t.slice(no.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open(Zs,1);r.onupgradeneeded=()=>to(r),r.onsuccess=()=>{const a=r.result,s=a.transaction($s,"readwrite"),o=s.objectStore($s),i=o.get(e);let c;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error("Cannot find model with path '".concat(e,"' ")+"in IndexedDB."));{const r=o.delete(e),s=()=>{c=a.transaction(Xs,"readwrite");const r=c.objectStore(Xs).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)})}}const so="/",oo="tensorflowjs_models",io="info",co="model_topology",lo="weight_specs",uo="weight_data",po="model_metadata";function ho(e){return{info:[oo,e,io].join(so),topology:[oo,e,co].join(so),weightSpecs:[oo,e,lo].join(so),weightData:[oo,e,uo].join(so),modelMetadata:[oo,e,po].join(so)}}function mo(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function fo(e){const t=e.split(so);if(t.length<3)throw new Error("Invalid key format: ".concat(e));return t.slice(1,t.length-1).join(so)}class go{constructor(e){if(!Ve().getBool("IS_BROWSER")||"undefined"===typeof window||"undefined"===typeof window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ho(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),a=Gs(e);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(Bs)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,a=t.length;r<a;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:a}}catch(t){throw mo(this.keys),new Error("Failed to save model '".concat(this.modelPath,"' to local storage: ")+"size quota being exceeded is a possible cause of this failure: "+"modelTopologyBytes=".concat(a.modelTopologyBytes,", ")+"weightSpecsBytes=".concat(a.weightSpecsBytes,", ")+"weightDataBytes=".concat(a.weightDataBytes,"."))}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error("In local storage, there is no model with name '".concat(this.modelPath,"'"));if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error("In local storage, the topology of model '".concat(this.modelPath,"' ")+"is missing.");t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error("In local storage, the weight specs of model '".concat(this.modelPath,"' ")+"are missing.");t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error("In local storage, the binary weight values of model "+"'".concat(this.modelPath,"' are missing."));return t.weightData=function(e){if(Bs){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(s),t}}go.URL_SCHEME="localstorage://";const yo=e=>{return Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(go.URL_SCHEME)?(t=e.slice(go.URL_SCHEME.length),new go(t)):null;var t};Hs.registerSaveRouter(yo),Hs.registerLoadRouter(yo);class bo{constructor(){Z(Ve().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Z("undefined"===typeof window||"undefined"!==typeof window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=oo+so,n=so+io;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[fo(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=ho(e=(t=e).startsWith(go.URL_SCHEME)?t.slice(go.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error("Cannot find model at path '".concat(e,"'"));const r=JSON.parse(this.LS.getItem(n.info));return mo(n),r}}const wo="://";class vo{constructor(){this.managers={}}static getInstance(){return null==vo.instance&&(vo.instance=new vo),vo.instance}static registerManager(e,t){Z(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(wo)&&(e=e.slice(0,e.indexOf(wo))),Z(e.length>0,()=>"scheme must not be an empty string.");const n=vo.getInstance();Z(null==n.managers[e],()=>"A model store manager is already registered for scheme '".concat(e,"'.")),n.managers[e]=t}static getManager(e){const t=vo.getInstance().managers[e];if(null==t)throw new Error("Cannot find model manager for scheme '".concat(e,"'"));return t}static getSchemes(){return Object.keys(vo.getInstance().managers)}}function xo(e){if(-1===e.indexOf(wo))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+"".concat(vo.getSchemes().join(",")));return{scheme:e.split(wo)[0],path:e.split(wo)[1]}}async function No(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Z(e!==t,()=>"Old path and new path are the same: '".concat(e,"'"));const r=Hs.getLoadHandlers(e);Z(r.length>0,()=>"Copying failed because no load handler is found for source URL ".concat(e,".")),Z(r.length<2,()=>"Copying failed because more than one (".concat(r.length,") ")+"load handlers for source URL ".concat(e,"."));const a=r[0],s=Hs.getSaveHandlers(t);Z(s.length>0,()=>"Copying failed because no save handler is found for destination "+"URL ".concat(t,".")),Z(s.length<2,()=>"Copying failed because more than one (".concat(r.length,") ")+"save handlers for destination URL ".concat(t,"."));const o=s[0],i=xo(e).scheme,c=xo(e).path,l=i===xo(e).scheme,u=await a.load();n&&l&&await vo.getManager(i).removeModel(c);const p=await o.save(u);return n&&!l&&await vo.getManager(i).removeModel(c),p.modelArtifactsInfo}async function So(){const e=vo.getSchemes(),t={};for(const n of e){const e=await vo.getManager(n).listModels();for(const r in e){t[n+wo+r]=e[r]}}return t}async function ko(e){const t=xo(e);return vo.getManager(t.scheme).removeModel(t.path)}async function To(e,t){return No(e,t,!1)}async function Eo(e,t){return No(e,t,!0)}class _o{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got ".concat(t));return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&Ve().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))):setTimeout(e,t)}}if(Ve().get("IS_BROWSER")){Ve().setPlatform("browser",new _o);try{vo.registerManager(go.URL_SCHEME,new bo)}catch(My){}try{vo.registerManager(no.URL_SCHEME,new ao)}catch(My){}}const Io=()=>n(817);let Ao;class Mo{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Ve().global.fetch?Ve().global.fetch(e,t):(null==Ao&&(Ao=Io()),Ao(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got ".concat(t));return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function Do(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2?arguments[2]:void 0;return t=t||"float32",Re(e),new Ka(e,t,n)}Ve().get("IS_NODE")&&!Ve().get("IS_BROWSER")&&Ve().setPlatform("node",new Mo);const Oo=_s({cast_:function(e,t){const n=ks(e,"x","cast");if(!ge(t))throw new Error("Failed to cast to unknown dtype ".concat(t));if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},a={dtype:t};return ms.runKernel(mt,r,a)}});const Ro=_s({clone_:function(e){const t={x:ks(e,"x","clone","string_or_numeric")};return ms.runKernel(sn,t)}});function Fo(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(e.toString(t))}hs();ja={buffer:Do,cast:Oo,clone:Ro,print:Fo};function Co(e){return new Promise(e=>setTimeout(e)).then(e)}class Bo{constructor(e){if(!Ve().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Bo.URL_SCHEME)&&(e=e.slice(Bo.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"===typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Vs(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await Co(()=>a.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Co(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Gs(e)}}}}Bo.URL_SCHEME="downloads://";class Lo{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, "+"but received ".concat(e));this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error("modelTopology field is missing from file ".concat(this.jsonFile.name)));if(null==r.weightsManifest)return void t(new Error("weightManifest field is missing from file ".concat(this.jsonFile.name)));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=Us(r,e=>this.loadWeights(e));e(s)},n.onerror=e=>t("Failed to read model topology and weights manifest JSON "+"from file '".concat(this.jsonFile.name,"'. BrowserFiles supports loading ")+"Keras-style tf.Model artifacts only."),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(a).then(e=>[t,Ps(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r("Failed to weights data from file of path '".concat(e,"'.")),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>zs(e.name)),r={};for(const a of e)a.paths.forEach(e=>{const a=zs(e);if(-1!==t.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: "+"'".concat(a,"'"));if(t.push(a),-1===n.indexOf(a))throw new Error("Weight file with basename '".concat(a,"' is not provided."));r[e]=this.weightsFiles[n.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw new Error("Mismatch in the number of files in weights manifest "+"(".concat(t.length,") and the number of weight files provided ")+"(".concat(this.weightsFiles.length,")."));return r}}function Po(e){return new Lo(e)}function zo(e,t,n,r){!function(e){Z(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){Z(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but "+"got startFraction ".concat(e)),Z(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but "+"got endFraction ".concat(t)),Z(t>=e,()=>"startFraction must be no more than endFraction, but "+"got startFraction ".concat(e," and endFraction ")+"".concat(t))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map(s=>(s.then(s=>{const o=n+ ++a/e.length*(r-n);return t(o),s}),s)))}async function Vo(e,t){null==t&&(t={});const n=null==t.fetchFunc?Ve().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(r):await zo(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await zo(a,t.onProgress,.5,1)}async function Wo(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return Uo(e=>Vo(e,{requestInit:r}))(e,t,n)}function Uo(e){return async function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0;const a=t.map(()=>!1),s={},o=null!=r?r.map(()=>!1):[],i=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const c="quantization"in e?e.quantization.dtype:e.dtype,l=Ds[c]*te(e.shape),u=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((t,n)=>{t===e.name&&(u(),o[n]=!0)}):u(),i.push(e.name),n+=l})}),!o.every(e=>e)){const e=r.filter((e,t)=>!o[t]);throw new Error("Could not find weights in manifest with names: "+"".concat(e.join(", "),". \n")+"Manifest JSON has weights with names: "+"".concat(i.join(", "),"."))}const c=a.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];c.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const u=await e(l),p={};let d=0;return c.forEach(e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=u[d+t].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let t=0;t<n;t++){const e=new Uint8Array(u[d+t]);o.set(e,i),i+=e.byteLength}s[e].forEach(e=>{const t=Fs(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)p[n]=t[n]}),d+=n}),p}}Hs.registerSaveRouter(e=>Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Bo.URL_SCHEME)?function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new Bo(e)}(e.slice(Bo.URL_SCHEME.length)):null);class Go{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Z("function"===typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=Ve().platform.fetch,Z(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&Z(2===e.length,()=>"URL paths for http must have a length of 2, "+"(actual length is ".concat(e.length,").")),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Vs(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Gs(e),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+"".concat(r.status,"."))}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error("Request to ".concat(this.path," failed with status code ")+"".concat(e.status,". Please verify this URL points to ")+"the model JSON of the model to load.");let t;try{t=await e.json()}catch(a){let e="Failed to parse model JSON of response from ".concat(this.path,".");throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error("The JSON from HTTP path ".concat(this.path," contains neither model ")+"topology or manifest for weights.");return Us(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=qs(e),o=[],i=[];for(const c of e)for(const e of c.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,Ps(await Vo(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function qo(e){return null!=e.match(Go.URL_SCHEME_REGEX)}Go.URL_SCHEME_REGEX=/^https?:\/\//;const Ko=(e,t)=>{if("undefined"===typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>qo(e)):qo(e),n)return Ho(e,t)}return null};function Ho(e,t){return new Go(e,t)}function jo(e,t){return Ho(e,t)}Hs.registerSaveRouter(Ko),Hs.registerLoadRouter(Ko);class Jo{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Qo{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Yo{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Zo(e,t,n,r){return new Yo(Xo(...arguments))}function Xo(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Jo(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Jo({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Jo({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function $o(e){return new Qo(e)}function ei(e){return new Qo(e)}const ti=_s({matMul_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=ks(e,"a","matMul"),s=ks(t,"b","matMul");[a,s]=ss(a,s);const o={a:a,b:s},i={transposeA:n,transposeB:r};return ms.runKernel(lt,o,i)}});const ni=_s({oneHot_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"int32";if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is ".concat(t));const s={indices:ks(e,"indices","oneHot","int32")},o={dtype:a,depth:t,onValue:n,offValue:r};return ms.runKernel(Hn,s,o)}});function ri(){Ve().set("PROD",!0)}function ai(){Ve().set("DEBUG",!0)}function si(){Ve().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function oi(e){Ve().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ii(){ms.disposeVariables()}function ci(){return ms}function li(){return ms.memory()}function ui(e){return ms.profile(e)}function pi(e,t){return ms.tidy(e,t)}function di(e){cs(e).forEach(e=>e.dispose())}function hi(e){return ms.keep(e)}function mi(e){return ms.time(e)}function fi(e){return ms.setBackend(e)}function gi(){return ms.ready()}function yi(){return ms.backendName}function bi(e){ms.removeBackend(e)}function wi(e){return ms.findBackend(e)}function vi(e){return ms.findBackendFactory(e)}function xi(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return ms.registerBackend(e,t,n)}function Ni(){return ms.backend}function Si(e,t){Ve().setPlatform(e,t)}Ja=oi;const ki=_s({imag_:function(e){const t={input:ks(e,"input","imag")};return ms.runKernel(cn,t)}});const Ti=_s({neg_:function(e){const t={x:ks(e,"x","neg")};return ms.runKernel(Vn,t)}});const Ei=_s({real_:function(e){const t={input:ks(e,"input","real")};return ms.runKernel(nr,t)}});const _i=_s({transpose_:function(e,t,n){const r=ks(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),Z(r.rank===t.length,()=>"Error in transpose: rank of input ".concat(r.rank," ")+"must match length of perm ".concat(t,".")),t.forEach(e=>{Z(e>=0&&e<r.rank,()=>"All entries in 'perm' must be between 0 and ".concat(r.rank-1)+" but got ".concat(t))}),r.rank<=1)return r.clone();const a={x:r},s={perm:t};return"complex64"===r.dtype?pi(()=>{let e=Ei(r),t=ki(r);return e=ms.runKernel(Hr,{x:e},s),t=ms.runKernel(Hr,{x:t},s),n&&(t=Ti(t)),Is(e,t)}):ms.runKernel(Hr,a,s)}});const Ii=_s({confusionMatrix_:function(e,t,n){const r=ks(e,"labels","confusionMatrix"),a=ks(t,"predictions","confusionMatrix");Z(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, "+"but got ".concat(n)),Z(1===r.rank,()=>"Expected the rank of labels to be 1, but got ".concat(r.rank)),Z(1===a.rank,()=>"Expected the rank of predictions to be 1, "+"but got ".concat(a.rank)),Z(r.shape[0]===a.shape[0],()=>"Mismatch in the number of examples: "+"".concat(r.shape[0]," vs. ").concat(a.shape[0],". ")+"Labels and predictions should have the same number of elements."),Z(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+"".concat(n));const s=ni(Oo(r,"int32"),n),o=ni(Oo(a,"int32"),n),i=_i(s),c=ti(i,o);return Oo(c,"int32")}});function Ai(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function Mi(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function Di(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){const n="Operands could not be broadcast together with shapes "+"".concat(e," and ").concat(t,".");throw Error(n)}n.unshift(r)}}return n}function Oi(e,t,n){if($(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=xs(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return As(e,t,r,n)}let Ri;function Fi(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!==typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!==typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!==typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!==typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, "+"but was ".concat(e.constructor.name));i=!0}if(null!=ca($r,ms.backendName)){const n={pixels:e},r={numChannels:t};return ms.runKernel($r,n,r)}const[c,l]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let u,p;if(o)u=e.getContext("2d").getImageData(0,0,c,l).data;else if(r||n)u=e.data;else if(s||a||i){if(null==Ri)if("undefined"===typeof document){if("undefined"===typeof OffscreenCanvas||"undefined"===typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Ri=new OffscreenCanvas(1,1).getContext("2d")}else Ri=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Ri.canvas.width=c,Ri.canvas.height=l,Ri.drawImage(e,0,0,c,l),u=Ri.getImageData(0,0,c,l).data}if(4===t)p=new Int32Array(u);else{const e=c*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=u[4*n+e]}return Oi(p,[l,c,t],"int32")}function Ci(e){return"undefined"!==typeof window&&"undefined"!==typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Bi(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=null;if(Ve().getBool("WRAP_TO_IMAGEBITMAP")&&Ci(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(r){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Fi(n,t)}async function Li(e,t){let n=ks(e,"img","toPixels");if(!(e instanceof Qa)){const e=n;n=Oo(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank ".concat(n.rank,"."));const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error("toPixels only supports depth of size "+"1, 3 or 4 but got ".concat(s));if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error("Unsupported type for toPixels: ".concat(n.dtype,".")+" Please use float32 or int32 tensors.");const o=await n.data(),i="float32"===n.dtype?255:1,c=new Uint8ClampedArray(a*r*4);for(let l=0;l<r*a;++l){const e=[0,0,0,255];for(let r=0;r<s;r++){const t=o[l*s+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error("Tensor values for a float32 Tensor must be in the "+"range [0 - 1] but encountered ".concat(t,"."))}else if("int32"===n.dtype&&(t<0||t>255))throw new Error("Tensor values for a int32 Tensor must be in the "+"range [0 - 255] but encountered ".concat(t,"."));1===s?(e[0]=t*i,e[1]=t*i,e[2]=t*i):e[r]=t*i}const t=4*l;c[t+0]=Math.round(e[0]),c[t+1]=Math.round(e[1]),c[t+2]=Math.round(e[2]),c[t+3]=Math.round(e[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(c,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),c}const Pi=_s({fromPixels_:Fi});function zi(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher,"+" but the rank was ".concat(n,"."));if(r<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher,"+" but the rank was ".concat(r,"."));if("int32"!==t.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type,"+" but the dtype was ".concat(t.dtype,"."));if(t.shape[r-1]>n)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+"".concat(t.shape[r-1]," vs. ").concat(n));if(0===te(e.shape))throw new Error("Requested more than 0 entries, but input is empty."+" Input shape: ".concat(e.shape,"."));const a=t.shape,s=a[a.length-1];let o=1;for(let p=0;p<a.length-1;++p)o*=a[p];const i=e.shape,c=a.slice();c.pop();let l=1;for(let p=s;p<n;++p)l*=i[p],c.push(i[p]);const u=[..._e(e.shape).map(e=>e/l),1].slice(0,s);return[c,o,l,u]}function Vi(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s="Must have updates.shape = indices.shape[:batchDim] + "+"shape[sliceDim:], got updates.shape: ".concat(n.shape)+", indices.shape: ".concat(t.shape,", shape: ").concat(e)+", sliceDim: ".concat(r,", and batchDim: ").concat(a,".");if(n.rank<a)throw new Error(s+" update.rank < ".concat(a,". "));if(e.length<r+(n.rank-a))throw new Error(s+" Output shape length < ".concat(r+(n.rank-a)));if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != ".concat(a+e.length-r));for(let o=0;o<a;++o)if(n.shape[o]!==t.shape[o])throw new Error(s+" updates.shape[".concat(o,"] (").concat(n.shape[o],") != indices.shape[").concat(o,"] (").concat(t.shape[o],")."));for(let o=0;o<n.rank-a;++o)if(n.shape[o+a]!==e[o+r])throw new Error(s+" updates.shape[".concat(o+a,"] (").concat(n.shape[o+a],") != shape[").concat(o+a,"] (").concat(e[o+a],")"))}function Wi(e,t,n){if(t.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher,"+" but the rank was ".concat(t.rank,"."));if(e.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher,"+" but the rank was ".concat(e.rank,"."));if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: ".concat(t.dtype));if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: ".concat(n));if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: ".concat(t.shape));if(0===e.size)throw new Error("Updates specified for empty output. updates shape: ".concat(e.shape))}Vi(n,t,e)}function Ui(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length;let o=1;for(let c=a;c<s;++c)o*=n[c];const i=a<1?1:a;return{sliceRank:a,numUpdates:te(t.shape)/i,sliceSize:o,strides:[..._e(n.slice(0,a)),1],outputSize:te(n)}}const Gi=-2,qi=-1;function Ki(e,t,n){const r=e.shape.length;Z(r===t.length,()=>"Error in slice".concat(r,"D: Length of begin ").concat(t," must ")+"match the rank of the array (".concat(r,").")),Z(r===n.length,()=>"Error in slice".concat(r,"D: Length of size ").concat(n," must ")+"match the rank of the array (".concat(r,")."));for(let a=0;a<r;++a)Z(t[a]+n[a]<=e.shape[a],()=>"Error in slice".concat(r,"D: begin[").concat(a,"] + size[").concat(a,"] ")+"(".concat(t[a]+n[a],") would overflow input.shape[").concat(a,"] (").concat(e.shape[a],")"))}function Hi(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ji(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function Ji(e,t,n,r){const a=[...e];for(let s=a.length;s<r.length;s++)a.push(1);for(let s=0;s<n;s++)0===s?a[t]=1:(a.splice(t,0,1),a.pop());return a}function Qi(e,t,n){return n<=e?n:n-(t-1)}function Yi(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Zi(e,t,n,r,a,s,o,i,c){const l=e.length;let u=new Array(l),p=new Array(l),d=new Array(l);if(t.length&&n>0){const c=t[0],l=n+1;u=Xi(o,c,l,r,e),p=$i(i,c,l,a,e),d=Ji(s,c,l,e)}else for(let h=0;h<l;h++)u[h]=tc(o,r,s,e,h,c),p[h]=nc(i,a,s,e,h,c),d[h]=ec(s,h,c);return{begin:u,end:p,strides:d}}function Xi(e,t,n,r,a){const s=[...a],o=Yi(n,t);for(let i=0;i<s.length;i++)if(o.indexOf(i)>-1)s[i]=0;else{const a=Qi(t,n,i);let o=r[a];e&1<<a&&(o=0),s[i]=o}return s}function $i(e,t,n,r,a){const s=[...a],o=Yi(n,t);for(let i=0;i<s.length;i++)if(o.indexOf(i)>-1)s[i]=Number.MAX_SAFE_INTEGER;else{const a=Qi(t,n,i);let o=r[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),s[i]=o}for(let i=0;i<s.length;i++){const e=a[i];s[i]<0&&(s[i]+=e),s[i]=K(0,s[i],a[i])}return s}function ec(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function tc(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const c=r[a];return o<0&&(o+=c),o=K(0,o,c-1),o}function nc(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const c=r[a];return o<0&&(o+=c),o=i>0?K(0,o,c):K(-1,o,c-1),o}function rc(e,t,n){let r=n.length;for(let a=0;a<n.length;a++)if(n[a]>1){r=a;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function ac(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function sc(e,t,n){let r;const a=e.shape.length;let s;return r="number"===typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach(e=>{Z(-1!==e,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(a).fill(-1):"number"===typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map((t,n)=>t>=0?t:(Z(-1===t,()=>"Negative size values should be exactly -1 but got "+"".concat(t," for the slice() size at index ").concat(n,".")),e.shape[n]-r[n])),[r,s]}function oc(e,t,n,r,a,s,o,i,c){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!==(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let u=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:c};for(let b=0;b<p.dims;b++)u&&0!==(1<<b&i)&&p.numAddAxisAfterEllipsis++,1<<b&o&&(u=!0);u||(p.ellipsisMask|=1<<p.dims,p.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(Gi),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error("Index out of range using input dim ".concat(n,"; input ")+"has only ".concat(t.dims," dims, ").concat(t.begin.length,"."));null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(qi),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,d);let h=!0,m=!0,f=!0;const g=[],y=[];for(let b=0;b<e.length;++b){if(0===d.strides[b])throw Error("strides[".concat(b,"] must be non-zero"));const t=!!(d.shrinkAxisMask&1<<b),n=e[b];if(-1===n){g.push(t?1:-1);continue}const r=[d.beginMask&1<<b,d.endMask&1<<b],a=[d.strides[b]>0?0:-1,d.strides[b]>0?n:n-1];if(t&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");f=f&&1===d.strides[b];const s=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(t){const e=d.begin[b]<0?n+d.begin[b]:d.begin[b];if(d.begin[b]=e,d.end[b]=d.begin[b]+1,e<0||e>=n)throw Error("slice index ".concat(d.begin[b]," of dimension ").concat(b," out of bounds."))}else d.begin[b]=ic(d.begin[b],0,d.strides[b],n,r,a),d.end[b]=ic(d.end[b],1,d.strides[b],n,r,a);const e=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===n;h=h&&e,m=m&&(0===b&&1===d.strides[b]||e)}else h=h&&1===d.strides[b]&&s,m=m&&(0===b&&1===d.strides[b]||s);let o,i=!1;if(d.beginValid&&d.endValid?(o=d.end[b]-d.begin[b],i=!0):t?(o=1,i=!0):s&&n>=0&&(o=d.strides[b]<0?-n:n,i=!0),i){let e;e=0===o||o<0!==d.strides[b]<0?0:Math.trunc(o/d.strides[b])+(o%d.strides[b]!==0?1:0),g.push(e)}else g.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const e=d.finalShapeGatherIndices[b];e>=0?y.push(g[e]):e===Gi&&y.push(1)}return{finalShapeSparse:y.filter((e,t)=>d.finalShapeGatherIndices[t]!==Gi),finalShape:y,isIdentity:h,sliceDim0:m,isSimpleSlice:f,begin:d.begin,end:d.end,strides:d.strides}}function ic(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}class cc{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class lc{constructor(){this.classNameMap={}}static getMap(){return null==lc.instance&&(lc.instance=new lc),lc.instance}static register(e){lc.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function uc(e){Z(null!=e.className,()=>"Class being registered does not have the static className property defined."),Z("string"===typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),Z(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),lc.register(e)}const pc=.001,dc=.1;function hc(e,t,n){return null==n&&(n=mc()),fc(e,t,(e,t)=>wc(e,t,n))}function mc(){return 32===ms.backend.floatPrecision()?pc:dc}function fc(e,t,n){let r=!0;if((be(e)||be(t))&&(r=!1),be(e)&&be(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error("Arrays are of different type. Actual: ".concat(n,". ")+"Expected: ".concat(r))}if(Array.isArray(e)&&Array.isArray(t)){const n=xs(e),r=xs(t);if(!re(n,r))throw new Error("Arrays have different shapes. "+"Actual: [".concat(n,"]. Expected: [").concat(r,"]"))}const a=be(e)?e:ee(e),s=be(t)?t:ee(t);if(a.length!==s.length)throw new Error("Arrays have different lengths actual: ".concat(a.length," vs ")+"expected: ".concat(s.length,".\n")+"Actual:   ".concat(a,".\n")+"Expected: ".concat(s,"."));for(let o=0;o<s.length;++o){const e=a[o],t=s[o];if(!n(e,t))throw new Error("Arrays differ: actual[".concat(o,"] = ").concat(e,", expected[").concat(o,"] = ").concat(t,".\n")+"Actual:   ".concat(a,".\n")+"Expected: ".concat(s,"."))}"undefined"!==typeof expect&&expect().nothing()}function gc(e,t){e().then(()=>t.fail(),()=>t()),"undefined"!==typeof expect&&expect().nothing()}function yc(e,t){const n="string"===typeof t||"number"===typeof t||"boolean"===typeof t?[t]:t;return xe(e)||xe(e[0])||xe(t)||xe(t[0])?fc(e,n,(e,t)=>e==t):fc(e,t,(e,t)=>wc(e,t,0))}function bc(e,t,n){if(null==n&&(n=mc()),!wc(e,t,n))throw new Error("Numbers differ: actual === ".concat(e,", expected === ").concat(t));"undefined"!==typeof expect&&expect().nothing()}function wc(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function vc(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error("Value out of range:".concat(e[r]," low: ").concat(t,", high: ").concat(n))}function xc(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error("Expected ArrayBuffer to be of length "+"".concat(r.length,", but it was ").concat(n.length));for(let a=0;a<r.length;a++)if(n[a]!==r[a])throw new Error("Expected ArrayBuffer value at ".concat(a," to be ")+"".concat(r[a]," but got ").concat(n[a]," instead"))}function Nc(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Nc(n):e[t]=Ca(n)}return e}function Sc(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise(e=>{t.addEventListener("loadeddata",n=>e(t)),t.load()})}async function kc(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise(t=>{e.requestVideoFrameCallback(t)})}const Tc="3.21.0";const Ec=_s({add_:function(e,t){let n=ks(e,"a","add"),r=ks(t,"b","add");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(Je,a)}});const _c=_s({floorDiv_:function(e,t){let n=ks(e,"a","floorDiv"),r=ks(t,"b","floorDiv");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel($t,a)}});const Ic=_s({div_:function(e,t){let n=ks(e,"a","div"),r=ks(t,"b","div");if([n,r]=ss(n,r),"int32"===n.dtype&&"int32"===r.dtype)return _c(n,r);const a={a:n,b:r};return ms.runKernel(Vt,a,{})}});const Ac=_s({mul_:function(e,t){let n=ks(e,"a","mul"),r=ks(t,"b","mul");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(zn,a)}});const Mc=_s({sqrt_:function(e){const t={x:ks(e,"x","sqrt","float32")};return ms.runKernel(kr,t)}});const Dc=_s({square_:function(e){const t=ks(e,"x","square");return ms.runKernel("Square",{x:t},{})}});const Oc=_s({zerosLike_:function(e){const t={x:ks(e,"x","zerosLike")};return ms.runKernel(Zr,t)}});function Rc(e){return Z(Te(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{const r=ks(t,"x","tf.grad","string_or_numeric"),a=null!=n?ks(n,"dy","tf.grad"):null;return ms.tidy(()=>{const{value:t,grads:n}=ms.gradients(()=>e(r),[r],a);return null!=a&&X(t.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),zc(n),n[0]})}}function Fc(e){return Z(Te(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{Z(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Ts(t,"args","tf.grads","string_or_numeric"),a=null!=n?ks(n,"dy","tf.grads"):null;return ms.tidy(()=>{const{value:t,grads:n}=ms.gradients(()=>e(...r),r,a);return null!=a&&X(t.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),zc(n),n})}}function Cc(e){return Z(Te(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{Z(t instanceof Qa,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),Z(null==n||n instanceof Qa,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:a}=ms.gradients(()=>e(t),[t],n);return zc(r),{grad:r[0],value:a}}}function Bc(e){return Z(Te(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{Z(Array.isArray(t)&&t.every(e=>e instanceof Qa),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),Z(null==n||n instanceof Qa,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=ms.gradients(()=>e(...t),t,n);return null!=n&&X(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),zc(r.grads),r}}function Lc(e,t){Z(Te(e),()=>"The f passed in variableGrads(f) must be a function"),Z(null==t||Array.isArray(t)&&t.every(e=>e instanceof Ya),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in ms.registeredVariables)t.push(ms.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,a=t.length;t=t.filter(e=>e.trainable),Z(t.length>0,()=>"variableGrads() expects at least one of the input variables to "+"be trainable, but none of the ".concat(a," variables is ")+"trainable.");const{value:s,grads:o}=ms.gradients(e,t,null,!0);Z(o.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),Z(0===s.rank,()=>"The f passed in variableGrads(f) must return a scalar, but it "+"returned a rank-".concat(s.rank," tensor"));const i={};return t.forEach((e,t)=>{null!=o[t]&&(i[e.name]=o[t])}),null!=r&&r.forEach(e=>i[e.name]=null),{value:s,grads:i}}function Pc(e){return ms.customGrad(e)}function zc(e){if(e.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Vc(e,t){if((be(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&be(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return As(e,[],[],t)}class Wc extends cc{minimize(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0;const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return di(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Lc(e,t)}dispose(){null!=this.iterations_&&di(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Vc(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+"".concat(this.getClassName()))}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Wc,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Uc extends Wc{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ms.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ms.registeredVariables[t],a=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:"".concat(t,"/accum_grad"),variable:pi(()=>Oc(r).variable(a))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:"".concat(t,"/accum_var"),variable:pi(()=>Oc(r).variable(a))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;pi(()=>{const e=Ec(Ac(o,this.rho),Ac(Dc(s),1-this.rho)),t=Ac(Ic(Mc(Ec(i,this.epsilon)),Mc(Ec(o,this.epsilon))),s),n=Ec(Ac(i,this.rho),Ac(Dc(t),1-this.rho));o.assign(e),i.assign(n);const a=Ec(Ac(t,-this.learningRate),r);r.assign(a)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(di(this.accumulatedGrads.map(e=>e.variable)),di(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Gc(e,t,n){const r={shape:e,value:t,dtype:n};return ms.runKernel(Yt,{},r)}Uc.className="Adadelta",uc(Uc);class qc extends Wc{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ms.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:"".concat(t,"/accumulator"),variable:pi(()=>Gc(r.shape,this.initialAccumulatorValue).variable(e))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;pi(()=>{const e=Ec(s,Dc(a));s.assign(e);const t=Ec(Ac(Ic(a,Mc(Ec(e,ms.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&di(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}qc.className="Adagrad",uc(qc);const Kc=_s({pow_:function(e,t){let n=ks(e,"base","pow"),r=ks(t,"exp","pow");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(Yn,a)}});const Hc=_s({sub_:function(e,t){let n=ks(e,"a","sub"),r=ks(t,"b","sub");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(Vr,a)}});class jc extends Wc{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],pi(()=>{this.accBeta1=Vc(t).variable(),this.accBeta2=Vc(n).variable()}),null==r&&(this.epsilon=ms.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);pi(()=>{const n=Hc(1,this.accBeta1),r=Hc(1,this.accBeta2);t.forEach((t,a)=>{const s=ms.registeredVariables[t],o=!1;null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:"".concat(t,"/m"),variable:pi(()=>Oc(s).variable(o))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:"".concat(t,"/v"),variable:pi(()=>Oc(s).variable(o))});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const c=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=Ec(Ac(c,this.beta1),Ac(i,1-this.beta1)),p=Ec(Ac(l,this.beta2),Ac(Dc(i),1-this.beta2)),d=Ic(u,n),h=Ic(p,r);c.assign(u),l.assign(p);const m=Ec(Ac(Ic(d,Ec(Mc(h),this.epsilon)),-this.learningRate),s);s.assign(m)}),this.accBeta1.assign(Ac(this.accBeta1,this.beta1)),this.accBeta2.assign(Ac(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&di(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&di(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),pi(()=>{this.accBeta1.assign(Kc(this.beta1,this.iterations_+1)),this.accBeta2.assign(Kc(this.beta2,this.iterations_+1))});const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}jc.className="Adam",uc(jc);const Jc=_s({abs_:function(e){const t=ks(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ms.runKernel(bt,e)}{const e={x:t};return ms.runKernel(Ke,e)}}});const Qc=_s({maximum_:function(e,t){let n=ks(e,"a","maximum"),r=ks(t,"b","maximum");[n,r]=ss(n,r),"bool"===n.dtype&&(n=Oo(n,"int32"),r=Oo(r,"int32")),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(_n,a)}});class Yc extends Wc{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],pi(()=>{this.iteration=Vc(0).variable(),this.accBeta1=Vc(t).variable()}),null==r&&(this.epsilon=ms.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);pi(()=>{const n=Hc(1,this.accBeta1),r=Ic(-this.learningRate,Ec(Ac(this.iteration,this.decay),1));t.forEach((t,a)=>{const s=ms.registeredVariables[t],o=!1;null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:"".concat(t,"/m"),variable:Oc(s).variable(o)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:"".concat(t,"/v"),variable:Oc(s).variable(o)});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const c=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=Ec(Ac(c,this.beta1),Ac(i,1-this.beta1)),p=Ac(l,this.beta2),d=Jc(i),h=Qc(p,d);c.assign(u),l.assign(h);const m=Ec(Ac(Ic(r,n),Ic(u,Ec(h,this.epsilon))),s);s.assign(m)}),this.iteration.assign(Ec(this.iteration,1)),this.accBeta1.assign(Ac(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&di(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&di(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Yc.className="Adamax",uc(Yc);class Zc extends Wc{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=ms.registeredVariables[t];pi(()=>{const e=Ec(Ac(this.c,r),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=hi(Vc(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Zc.className="SGD",uc(Zc);class Xc extends Zc{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Vc(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ms.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:"".concat(t,"/momentum"),variable:pi(()=>Oc(r).variable(e))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&pi(()=>{let e;const t=Ec(Ac(this.m,a),s);e=this.useNesterov?Ec(Ac(this.c,Ec(s,Ac(t,this.m))),r):Ec(Ac(this.c,t),r),a.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&di(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Xc.className="Momentum",uc(Xc);class $c extends Wc{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=ms.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ms.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:"".concat(t,"/rms"),variable:pi(()=>Oc(r).variable(a))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:"".concat(t,"/momentum"),variable:pi(()=>Oc(r).variable(a))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:"".concat(t,"/mg"),variable:pi(()=>Oc(r).variable(a))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;pi(()=>{const e=Ec(Ac(o,this.decay),Ac(Dc(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=Ec(Ac(t,this.decay),Ac(s,1-this.decay)),c=Ic(Ac(s,this.learningRate),Mc(Hc(e,Ec(Dc(a),this.epsilon)))),l=Ec(Ac(i,this.momentum),c);o.assign(e),t.assign(a),i.assign(l);const u=Hc(r,l);r.assign(u)}else{const e=Ec(Ac(o,this.decay),Ac(Dc(s),1-this.decay)),t=Ec(Ac(i,this.momentum),Ic(Ac(s,this.learningRate),Mc(Ec(e,this.epsilon))));o.assign(e),i.assign(t);const n=Hc(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&di(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&di(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&di(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}$c.className="RMSProp",uc($c);class el{static sgd(e){return new Zc(e)}static momentum(e,t){return new Xc(e,t,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}static rmsprop(e){return new $c(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]&&arguments[4])}static adam(){return new jc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null)}static adadelta(){return new Uc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.95,arguments.length>2&&void 0!==arguments[2]?arguments[2]:null)}static adamax(){return new Yc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.002,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]?arguments[4]:0)}static adagrad(e){return new qc(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1)}}const tl=_s({acos_:function(e){const t={x:ks(e,"x","acos")};return ms.runKernel(He,t)}});const nl=_s({acosh_:function(e){const t={x:ks(e,"x","acosh")};return ms.runKernel(je,t)}});const rl=_s({addN_:function(e){Z(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),Z(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+"".concat(e.length));const t=e.map((e,t)=>ks(e,"tensors".concat(t),"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!re(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=t;return ms.runKernel(Qe,r)}});const al=_s({all_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ks(e,"x","all","bool")},a={axis:t,keepDims:n};return ms.runKernel(Ye,r,a)}});const sl=_s({any_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ks(e,"x","any","bool")},a={axis:t,keepDims:n};return ms.runKernel(Ze,r,a)}});const ol=_s({argMax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ks(e,"x","argMax")},r={axis:t};return ms.runKernel(Xe,n,r)}});const il=_s({argMin_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ks(e,"x","argMin")},r={axis:t};return ms.runKernel($e,n,r)}});const cl=_s({asin_:function(e){const t={x:ks(e,"x","asin")};return ms.runKernel(et,t)}});const ll=_s({asinh_:function(e){const t={x:ks(e,"x","asinh")};return ms.runKernel(tt,t)}});const ul=_s({atan_:function(e){const t={x:ks(e,"x","atan")};return ms.runKernel(nt,t)}});const pl=_s({atan2_:function(e,t){let n=ks(e,"a","atan2"),r=ks(t,"b","atan2");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(at,a)}});const dl=_s({atanh_:function(e){const t={x:ks(e,"x","atanh")};return ms.runKernel(rt,t)}});function hl(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",s=arguments.length>5?arguments[5]:void 0;return gl(e,[...t,e[3]],n,s,r,null,null,Tl(a))}function ml(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast";const[i,c]=wl(t);let l;if("channelsLast"===o)l=[i,c,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat ".concat(o));l=[i,c,e[1],e[1]]}return gl(e,l,n,r,a,s,!1,o)}function fl(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NDHWC";const[i,c,l]=vl(t);let u,p;if("NDHWC"===o)p="channelsLast",u=[i,c,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat ".concat(o));p="channelsFirst",u=[i,c,l,e[1],e[1]]}return yl(e,u,n,r,a,!1,p,s)}function gl(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",[c,l,u,p]=[-1,-1,-1,-1];if("channelsLast"===i)[c,l,u,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat ".concat(i));[c,p,l,u]=e}const[d,h,,m]=t,[f,g]=wl(n),[y,b]=wl(r),w=xl(d,y),v=xl(h,b),{padInfo:x,outHeight:N,outWidth:S}=function(e,t,n,r,a,s,o,i,c){let l,u,p;if("number"===typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=bl(e,t,n));const s=e[0],o=e[1],i=Nl((s-t+2*r)/n+1,a),c=Nl((o-t+2*r)/n+1,a);return[i,c]}([t,n],s,r,e,i);u=a[0],p=a[1]}else if("same"===e){u=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(u-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),c=Math.floor(e/2),d=e-c,h=Math.floor(i/2);l={top:c,bottom:d,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},u=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!==typeof e)throw Error("Unknown padding parameter: ".concat(e));{const d="channelsLast"===c?e[1][0]:e[2][0],h="channelsLast"===c?e[1][1]:e[2][1],m="channelsLast"===c?e[2][0]:e[3][0],f="channelsLast"===c?e[2][1]:e[3][1];l={top:d,bottom:h,left:m,right:f,type:0===d&&0===h&&0===m&&0===f?"VALID":"EXPLICIT"},u=Nl((t-s+d+h)/r+1,i),p=Nl((n-o+m+f)/a+1,i)}}return{padInfo:l,outHeight:u,outWidth:p}}(a,l,u,f,g,w,v,s,i),k=o?m*p:m;let T;return"channelsFirst"===i?T=[c,k,N,S]:"channelsLast"===i&&(T=[c,N,S,k]),{batchSize:c,dataFormat:i,inHeight:l,inWidth:u,inChannels:p,outHeight:N,outWidth:S,outChannels:k,padInfo:x,strideHeight:f,strideWidth:g,filterHeight:d,filterWidth:h,effectiveFilterHeight:w,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:b,inShape:e,outShape:T,filterShape:t}}function yl(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",i=arguments.length>7?arguments[7]:void 0,[c,l,u,p,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[c,l,u,p,d]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat ".concat(o));[c,d,l,u,p]=e}const[h,m,f,,g]=t,[y,b,w]=vl(n),[v,x,N]=vl(r),S=xl(h,v),k=xl(m,x),T=xl(f,N),{padInfo:E,outDepth:_,outHeight:I,outWidth:A}=function(e,t,n,r,a,s,o,i,c,l,u){let p,d,h,m;if("number"===typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=bl(e,t,r));const o=e[0],i=e[1],c=e[2],l=Nl((o-t+2*a)/r+1,s),u=Nl((i-t+2*a)/r+1,s),p=Nl((c-t+2*a)/r+1,s);return[l,u,p,n]}([t,n,r,1],i,1,a,e,u);d=s[0],h=s[1],m=s[2]}else if("same"===e){d=Math.ceil(t/a),h=Math.ceil(n/s),m=Math.ceil(r/o);const e=(d-1)*a+i-t,u=(h-1)*s+c-n,f=(m-1)*o+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(u/2),w=u-b,v=Math.floor(f/2);p={top:b,bottom:w,left:v,right:f-v,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: ".concat(e));p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/a),h=Math.ceil((n-c+1)/s),m=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:d,outHeight:h,outWidth:m}}(a,l,u,p,y,b,w,S,k,T,i),M=s?g*d:g;let D;return"channelsFirst"===o?D=[c,M,_,I,A]:"channelsLast"===o&&(D=[c,_,I,A,M]),{batchSize:c,dataFormat:o,inDepth:l,inHeight:u,inWidth:p,inChannels:d,outDepth:_,outHeight:I,outWidth:A,outChannels:M,padInfo:E,strideDepth:y,strideHeight:b,strideWidth:w,filterDepth:h,filterHeight:m,filterWidth:f,effectiveFilterDepth:S,effectiveFilterHeight:k,effectiveFilterWidth:T,dilationDepth:v,dilationHeight:x,dilationWidth:N,inShape:e,outShape:D,filterShape:t}}function bl(e,t,n){const r=xl(t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:1);return Math.floor((e[0]*(n-1)-n+r)/2)}function wl(e){return"number"===typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function vl(e){return"number"===typeof e?[e,e,e]:e}function xl(e,t){return t<=1?e:e+(e-1)*(t-1)}function Nl(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode ".concat(t))}}function Sl(e){const[t,n,r]=wl(e);return 1===t&&1===n&&1===r}function kl(e,t){return Sl(e)||Sl(t)}function Tl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat ".concat(e))}function El(e,t,n){if(null!=n){if("string"===typeof t)throw Error("Error in ".concat(e,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(t,"."));if("number"===typeof t)Z(ae(t),()=>"Error in ".concat(e,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(t,"."));else{if("object"!==typeof t)throw Error("Error in ".concat(e,": Unknown padding parameter: ").concat(t));t.forEach(t=>{t.forEach(t=>{Z(ae(t),()=>"Error in ".concat(e,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(t,"."))})})}}}const _l=_s({reshape_:function(e,t){const n={x:ks(e,"x","reshape","string_or_numeric")},r={shape:t};return ms.runKernel(sr,n,r)}});const Il=_s({avgPool_:function(e,t,n,r,a){const s=ks(e,"x","avgPool","float32");Z(kl(n,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(1,"'"));let o=s,i=!1;3===s.rank&&(i=!0,o=_l(s,[1,s.shape[0],s.shape[1],s.shape[2]])),Z(4===o.rank,()=>"Error in avgPool: x must be rank 4 but got rank ".concat(o.rank,".")),El("avgPool",r,a);const c={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let u=ms.runKernel(st,c,l);return u=Oo(u,s.dtype),i?_l(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Al=_s({avgPool3d_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=ks(e,"x","avgPool3d","float32");let i=o,c=!1;4===o.rank&&(c=!0,i=_l(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===i.rank,()=>"Error in avgPool3d: x must be rank 5 but got rank ".concat(i.rank,".")),Z("NDHWC"===s,()=>"Error in avgPool3d: Only NDHWC is currently supported, "+"but got dataFormat of ".concat(s)),El("avgPool3d",r,a);const l={x:i},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let p=ms.runKernel(it,l,u);return p=Oo(p,i.dtype),c?_l(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Ml=_s({concat_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;Z(e.length>=1,()=>"Pass at least one tensor to concat");const n=Ts(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype ".concat(e.dtype,". "))}),1===n.length)return Ro(n[0]);const r=n,a={axis:t};return ms.runKernel(wt,r,a)}});const Dl=_s({sigmoid_:function(e){const t={x:ks(e,"x","sigmoid","float32")};return ms.runKernel(Nr,t)}});const Ol=_s({slice_:function(e,t,n){const r=ks(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},s={begin:t,size:n};return ms.runKernel(br,a,s)}});const Rl=_s({tanh_:function(e){const t={x:ks(e,"x","tanh","float32")};return ms.runKernel(Ur,t)}});const Fl=_s({basicLSTMCell_:function(e,t,n,r,a,s){const o=ks(e,"forgetBias","basicLSTMCell"),i=ks(t,"lstmKernel","basicLSTMCell"),c=ks(n,"lstmBias","basicLSTMCell"),l=ks(r,"data","basicLSTMCell"),u=ks(a,"c","basicLSTMCell"),p=ks(s,"h","basicLSTMCell"),d=Ml([l,p],1),h=ti(d,i),m=Ec(h,c),f=m.shape[0],g=m.shape[1]/4,y=[f,g],b=Ol(m,[0,0],y),w=Ol(m,[0,g],y),v=Ol(m,[0,2*g],y),x=Ol(m,[0,3*g],y),N=Ec(Ac(Dl(b),Rl(w)),Ac(u,Dl(Ec(o,v))));return[N,Ac(Rl(N),Dl(x))]}});const Cl=_s({batchToSpaceND_:function(e,t,n){const r=ks(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);Z(r.rank>=1+t.length,()=>"input rank is ".concat(r.rank," but should be > than blockShape.length ").concat(t.length)),Z(n.length===t.length,()=>"crops.length is ".concat(n.length," but should be equal to blockShape.length  ").concat(t.length)),Z(r.shape[0]%a===0,()=>"input tensor batch is ".concat(r.shape[0]," but is not divisible by the product of ")+"the elements of blockShape ".concat(t.join(" * ")," === ").concat(a));const s={x:r},o={blockShape:t,crops:n};return ms.runKernel(ut,s,o)}});const Bl=_s({batchNorm_:function(e,t,n,r,a,s){null==s&&(s=.001);const o=ks(e,"x","batchNorm"),i=ks(t,"mean","batchNorm"),c=ks(n,"variance","batchNorm");let l,u;null!=a&&(l=ks(a,"scale","batchNorm")),null!=r&&(u=ks(r,"offset","batchNorm")),Z(i.rank===c.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Z(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Z(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const p={x:function(e){let t;return t=0===e.rank||1===e.rank?_l(e,[1,1,1,e.size]):2===e.rank?_l(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?_l(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:l,offset:u,mean:i,variance:c},d={varianceEpsilon:s},h=ms.runKernel(en,p,d);return _l(h,o.shape)}});const Ll=_s({batchNorm2d_:function(e,t,n,r,a,s){const o=ks(e,"x","batchNorm"),i=ks(t,"mean","batchNorm"),c=ks(n,"variance","batchNorm");let l,u;return null!=a&&(l=ks(a,"scale","batchNorm")),null!=r&&(u=ks(r,"offset","batchNorm")),Z(2===o.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+"".concat(o.rank,".")),Z(2===i.rank||1===i.rank,()=>"Error in batchNorm2D: mean must be rank 2 or rank 1 but "+"got rank ".concat(i.rank,".")),Z(2===c.rank||1===c.rank,()=>"Error in batchNorm2D: variance must be rank 2 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&Z(2===l.rank||1===l.rank,()=>"Error in batchNorm2D: scale must be rank 2 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&Z(2===u.rank||1===u.rank,()=>"Error in batchNorm2D: offset must be rank 2 or rank 1 "+"but got rank ".concat(u.rank,".")),Bl(o,i,c,u,l,s)}});const Pl=_s({batchNorm3d_:function(e,t,n,r,a,s){const o=ks(e,"x","batchNorm"),i=ks(t,"mean","batchNorm"),c=ks(n,"variance","batchNorm");let l,u;return null!=a&&(l=ks(a,"scale","batchNorm")),null!=r&&(u=ks(r,"offset","batchNorm")),Z(3===o.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+"".concat(o.rank,".")),Z(3===i.rank||1===i.rank,()=>"Error in batchNorm3D: mean must be rank 3 or rank 1 but "+"got rank ".concat(i.rank,".")),Z(3===c.rank||1===c.rank,()=>"Error in batchNorm3D: variance must be rank 3 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&Z(3===l.rank||1===l.rank,()=>"Error in batchNorm3D: scale must be rank 3 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&Z(3===u.rank||1===u.rank,()=>"Error in batchNorm3D: offset must be rank 3 or rank 1 "+"but got rank ".concat(u.rank,".")),Bl(o,i,c,u,l,s)}});const zl=_s({batchNorm4d_:function(e,t,n,r,a,s){const o=ks(e,"x","batchNorm"),i=ks(t,"mean","batchNorm"),c=ks(n,"variance","batchNorm");let l,u;return null!=a&&(l=ks(a,"scale","batchNorm")),null!=r&&(u=ks(r,"offset","batchNorm")),Z(4===o.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+"".concat(o.rank,".")),Z(4===i.rank||1===i.rank,()=>"Error in batchNorm4D: mean must be rank 4 or rank 1 but "+"got rank ".concat(i.rank,".")),Z(4===c.rank||1===c.rank,()=>"Error in batchNorm4D: variance must be rank 4 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&Z(4===l.rank||1===l.rank,()=>"Error in batchNorm4D: scale must be rank 4 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&Z(4===u.rank||1===u.rank,()=>"Error in batchNorm4D: offset must be rank 4 or rank 1 "+"but got rank ".concat(u.rank,".")),Bl(o,i,c,u,l,s)}});const Vl=_s({bincount_:function(e,t,n){const r=ks(e,"x","bincount"),a=ks(t,"weights","bincount");Z("int32"===r.dtype,()=>"Error in bincount: input "+"dtype must be int32, but got ".concat(r.dtype)),Z(n>=0,()=>"size must be non-negative, but got ".concat(n,".")),Z(a.size===r.size||0===a.size,()=>"Error in bincount: weights must have the same size as input or"+"0-length, but got input shape: ".concat(r.shape,", weights shape: ")+"".concat(a.shape,"."));const s={x:r,weights:a},o={size:n};return ms.runKernel(pt,s,o)}});const Wl=_s({broadcastArgs_:function(e,t){const n=ks(e,"s0","broadcastArgs","int32"),r=ks(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error("broadcastArgs(): first input must be a vector (rank=1). "+"Has rank ".concat(n.rank));if(1!==r.rank)throw new Error("broadcastArgs(): second input must be a vector (rank=1). "+"Has rank ".concat(r.rank));const a={s0:n,s1:r};return ms.runKernel(ht,a)}});const Ul=_s({broadcastTo_:function(e,t){let n=ks(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!==0))throw new Error("broadcastTo(): Invalid broadcast shape [".concat(t,"]."));if(t.length<n.rank)throw new Error("broadcastTo(): shape.length=".concat(t.length," < input.rank=").concat(n.rank,"."));if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=_l(n,e)}const a=n.shape,s=Array.from(t);for(let c=t.length-1;c>=0;c--)if(a[c]===t[c])s[c]=1;else if(1!==n.shape[c])throw new Error("broadcastTo(): [".concat(r,"] cannot be broadcast to [").concat(t,"]."));if(0===s.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return Ro(n);const o={x:n},i={reps:s};return ms.runKernel(Gr,o,i)}});const Gl=_s({ceil_:function(e){const t={x:ks(e,"x","ceil","float32")};return ms.runKernel(ft,t)}});const ql=_s({clipByValue_:function(e,t,n){const r=ks(e,"x","clipByValue");if(Z(t<=n,()=>"Error in clip: min (".concat(t,") must be ")+"less than or equal to max (".concat(n,").")),t===n)return Gc(r.shape,t,r.dtype);const a={x:r},s={clipValueMin:t,clipValueMax:n};return ms.runKernel(gt,a,s)}});const Kl=_s({concat1d_:function(e){return Ml(e,0)}});const Hl=_s({concat2d_:function(e,t){return Ml(e,t)}});const jl=_s({concat3d_:function(e,t){return Ml(e,t)}});const Jl=_s({concat4d_:function(e,t){return Ml(e,t)}});const Ql=_s({conv2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=ks(e,"x","conv2d","float32"),c=ks(t,"filter","conv2d","float32");let l=i,u=!1;3===i.rank&&(u=!0,l=_l(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(4===l.rank,()=>"Error in conv2d: input must be rank 4, but got rank ".concat(l.rank,".")),Z(4===c.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+"".concat(c.rank,".")),El("conv2d",r,o);const p="NHWC"===a?l.shape[3]:l.shape[1];Z(p===c.shape[2],()=>"Error in conv2d: depth of input (".concat(p,") must match ")+"input depth for filter ".concat(c.shape[2],".")),Z(kl(n,s),()=>"Error in conv2D: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(s,"'"));const d={x:l,filter:c},h={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},m=ms.runKernel(vt,d,h);return u?_l(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Yl=_s({conv1d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6?arguments[6]:void 0;const i=ks(e,"x","conv1d"),c=ks(t,"filter","conv1d");let l=i,u=!1;2===i.rank&&(u=!0,l=_l(i,[1,i.shape[0],i.shape[1]])),Z(3===l.rank,()=>"Error in conv1d: input must be rank 3, but got rank ".concat(l.rank,".")),Z(3===c.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+"".concat(c.rank,".")),El("conv1d",r,o),Z(l.shape[2]===c.shape[1],()=>"Error in conv1d: depth of input (".concat(l.shape[2],") must match ")+"input depth for filter ".concat(c.shape[1],".")),Z(kl(n,s),()=>"Error in conv1D: Either stride or dilation must be 1. "+"Got stride ".concat(n," and dilation '").concat(s,"'")),Z("NWC"===a,()=>"Error in conv1d: got dataFormat of ".concat(a," but only NWC is currently supported."));const p=_l(c,[1,c.shape[0],c.shape[1],c.shape[2]]),d=_l(l,[l.shape[0],1,l.shape[1],l.shape[2]]),h=Ql(d,p,[1,n],r,"NHWC",[1,s],o);return _l(h,u?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}});const Zl=_s({conv2DBackpropInput_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0;Z(e.length===t.rank,()=>"Length of inShape "+"(".concat(e.length,") and rank of dy (").concat(t.rank,") must match"));let i=e,c=t,l=!1;3===t.rank&&(l=!0,c=_l(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),Z(4===i.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+"".concat(i.length,".")),Z(4===c.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got "+"rank ".concat(c.rank)),Z(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got "+"rank ".concat(n.rank));const u="NHWC"===s?i[3]:i[1],p="NHWC"===s?c.shape[3]:c.shape[1];Z(u===n.shape[2],()=>"Error in conv2dDerInput: depth of input (".concat(u,") must ")+"match input depth for filter ".concat(n.shape[2],".")),Z(p===n.shape[3],()=>"Error in conv2dDerInput: depth of output (".concat(p,") must ")+"match output depth for filter ".concat(n.shape[3],".")),El("conv2dDerInput",a,o);const d={dy:c,filter:n},h={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,inputShape:i},m=ms.runKernel(Nt,d,h);return l?_l(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Xl=_s({conv2dTranspose_:function(e,t,n,r,a,s){const o=ks(e,"x","conv2dTranspose"),i=ks(t,"filter","conv2dTranspose");return Zl(n,o,i,r,a,"NHWC",s)}});const $l=_s({conv3d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1];const o=ks(e,"x","conv3d"),i=ks(t,"filter","conv3d");let c=o,l=!1;4===o.rank&&(l=!0,c=_l(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===c.rank,()=>"Error in conv3d: input must be rank 5, but got rank ".concat(c.rank,".")),Z(5===i.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+"".concat(i.rank,".")),Z(c.shape[4]===i.shape[3],()=>"Error in conv3d: depth of input (".concat(c.shape[4],") must match ")+"input depth for filter ".concat(i.shape[3],".")),Z(kl(n,s),()=>"Error in conv3D: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(s,"'")),Z("NDHWC"===a,()=>"Error in conv3d: got dataFormat of ".concat(a," but only NDHWC is currently supported."));const u={x:c,filter:i},p={strides:n,pad:r,dataFormat:a,dilations:s},d=ms.runKernel(St,u,p);return l?_l(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const eu=_s({conv3DBackpropInput_:function(e,t,n,r,a){Z(e.length===t.rank,()=>"Length of inShape "+"(".concat(e.length,") and rank of dy (").concat(t.rank,") must match"));let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=_l(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const c=s[4],l=o.shape[4];Z(5===s.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+"".concat(s.length,".")),Z(5===o.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got "+"rank ".concat(o.rank)),Z(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got "+"rank ".concat(n.rank)),Z(c===n.shape[3],()=>"Error in conv3dDerInput: depth of input (".concat(c,") must ")+"match input depth for filter ".concat(n.shape[3],".")),Z(l===n.shape[4],()=>"Error in conv3dDerInput: depth of output (".concat(l,") must ")+"match output depth for filter ".concat(n.shape[4],"."));const u={dy:o,filter:n},p={pad:a,strides:r,inputShape:s},d=ms.runKernel(Tt,u,p);return i?_l(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const tu=_s({conv3dTranspose_:function(e,t,n,r,a){const s=ks(e,"x","conv3dTranspose"),o=ks(t,"filter","conv3dTranspose");return eu(n,s,o,r,a)}});const nu=_s({cos_:function(e){const t={x:ks(e,"x","cos","float32")};return ms.runKernel(Et,t)}});const ru=_s({cosh_:function(e){const t={x:ks(e,"x","cosh","float32")};return ms.runKernel(_t,t)}});const au=_s({cumprod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a={x:ks(e,"x","cumprod")},s={axis:t,exclusive:n,reverse:r};return ms.runKernel(It,a,s)}});const su=_s({cumsum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a={x:ks(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:r};return ms.runKernel(At,a,s)}});const ou=_s({denseBincount_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=ks(e,"x","denseBincount"),s=ks(t,"weights","denseBincount");Z("int32"===a.dtype,()=>"Error in denseBincount: input "+"dtype must be int32, but got ".concat(a.dtype)),Z(a.rank<=2,()=>"Error in denseBincount: input must be at most rank 2, but got "+"rank ".concat(a.rank,".")),Z(n>=0,()=>"size must be non-negative, but got ".concat(n,".")),Z(s.size===a.size||0===s.size,()=>"Error in denseBincount: weights must have the same shape as x or "+"0-length, but got x shape: ".concat(a.shape,", weights shape: ")+"".concat(s.shape,"."));const o={x:a,weights:s},i={size:n,binaryOutput:r};return ms.runKernel(Dt,o,i)}});const iu=_s({depthToSpace_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC";const r=ks(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];Z(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: ".concat(t)),Z(a*t>=0,()=>"Negative dimension size caused by overflow when multiplying\n    ".concat(a," and ").concat(t,"  for depthToSpace with input shape\n    ").concat(r.shape)),Z(s*t>=0,()=>"Negative dimension size caused by overflow when multiplying\n    ".concat(s," and ").concat(t," for depthToSpace with input shape\n        ").concat(r.shape)),Z(o%(t*t)===0,()=>"Dimension size must be evenly divisible by ".concat(t*t," but is ").concat(o," for depthToSpace with input shape ").concat(r.shape));const i={x:r},c={blockSize:t,dataFormat:n};return ms.runKernel(Ot,i,c)}});const cu=_s({depthwiseConv2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=ks(e,"x","depthwiseConv2d","float32"),c=ks(t,"filter","depthwiseConv2d","float32");let l=i,u=!1;3===i.rank&&(u=!0,l=_l(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(4===l.rank,()=>"Error in depthwiseConv2d: input must be rank 4, but got "+"rank ".concat(l.rank,".")),Z(4===c.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+"".concat(c.rank,"."));const p="NHWC"===a?l.shape[3]:l.shape[1];Z(p===c.shape[2],()=>"Error in depthwiseConv2d: number of input channels "+"(".concat(p,") must match the inChannels dimension in ")+"filter ".concat(c.shape[2],".")),El("depthwiseConv2d",r,o);const d={x:l,filter:c},h={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},m=ms.runKernel(Rt,d,h);return u?_l(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const lu=_s({diag_:function(e){const t={x:ks(e,"x","diag")};return ms.runKernel(Bt,t)}});const uu=_s({dilation2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC";const o=ks(e,"x","dilation2d"),i=ks(t,"filter","dilation2d");Z(3===o.rank||4===o.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+"".concat(o.rank,".")),Z(3===i.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+"".concat(i.rank,".")),Z("NHWC"===s,()=>"Error in dilation2d: Only NHWC is currently supported, "+"but got dataFormat of ".concat(s));let c=o,l=!1;3===o.rank&&(c=_l(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const u={x:c,filter:i},p={strides:n,pad:r,dilations:a},d=ms.runKernel(Lt,u,p);return l?_l(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const pu=_s({equal_:function(e,t){let n=ks(e,"a","equal","string_or_numeric"),r=ks(t,"b","equal","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(Kt,a)}});const du=_s({where_:function(e,t,n){const r=ks(t,"a","where"),a=ks(n,"b","where"),s=ks(e,"condition","where","bool"),o=Di(Di(s.shape,r.shape),a.shape),i={condition:Ul(s,o),t:Ul(r,o),e:Ul(a,o)};return ms.runKernel(gr,i)}});const hu=_s({divNoNan_:function(e,t){let n=ks(e,"a","div"),r=ks(t,"b","div");[n,r]=ss(n,r);const a=Ic(n,r),s=Oc(a),o=pu(r,s);return du(o,s,a)}});const mu=_s({dot_:function(e,t){const n=ks(e,"t1","dot"),r=ks(t,"t2","dot");Z((1===n.rank||2===n.rank)&&(1===r.rank||2===r.rank),()=>"Error in dot: inputs must all be rank 1 or 2, but got ranks "+"".concat(n.rank," and ").concat(r.rank,"."));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(Z(a===s,()=>"Error in dot: inner dimensions of inputs must match, but got "+"".concat(a," and ").concat(s,".")),1===n.rank&&1===r.rank){const e=_l(n,[1,-1]),t=_l(r,[-1,1]),a=ti(e,t);return _l(a,[])}if(1===n.rank&&2===r.rank){const e=_l(n,[1,-1]),t=_l(r,[r.shape[0],r.shape[1]]),a=ti(e,t);return _l(a,[a.size])}if(2===n.rank&&1===r.rank){const e=_l(r,[-1,1]),t=ti(n,e);return _l(t,[t.size])}{const e=_l(r,[r.shape[0],r.shape[1]]);return ti(n,e)}}});const fu=_s({einsum_:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const a=n.map((e,t)=>ks(e,"tensors".concat(t),"einsum")),s={equation:e};return ms.runKernel(Wt,a,s)}});const gu=_s({elu_:function(e){const t={x:ks(e,"x","elu","float32")};return ms.runKernel(Ut,t)}});const yu=_s({erf_:function(e){let t=ks(e,"x","erf");Z("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=Oo(t,"float32"));const n={x:t};return ms.runKernel(qt,n)}});function bu(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function wu(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function vu(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map(t=>e[t])]}function xu(e,t){return wu(e,t.map(e=>1),t)}function Nu(e,t,n){Z(bu(t,n),()=>"".concat(e," supports only inner-most axes for now. ")+"Got axes ".concat(t," and rank-").concat(n," input."))}function Su(e,t){if(bu(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function ku(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Tu(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Eu=_s({max_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ks(e,"x","max")},a={reductionIndices:t,keepDims:n};return ms.runKernel(En,r,a)}});const _u=_s({min_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ks(e,"x","min")},a={axis:t,keepDims:n};return ms.runKernel(Fn,r,a)}});const Iu=_s({sum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=ks(e,"x","sum");"bool"===r.dtype&&(r=Oo(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return ms.runKernel(Tr,a,s)}});function Au(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===e.rank)return Jc(e);if(1!==e.rank&&null===n)return Au(_l(e,[-1]),t,n);if(1===e.rank||"number"===typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Iu(Jc(e),n);if(t===1/0)return Eu(Jc(e),n);if(t===-1/0)return _u(Jc(e),n);if("euclidean"===t||2===t)return Mc(Iu(Kc(Jc(e),Vc(2,"int32")),n));throw new Error("Error in norm: invalid ord value: ".concat(t))}if(Array.isArray(n)&&2===n.length){if(1===t)return Eu(Iu(Jc(e),n[0]),n[1]-1);if(t===1/0)return Eu(Iu(Jc(e),n[1]),n[0]);if(t===-1/0)return _u(Iu(Jc(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Mc(Iu(Dc(e),n));throw new Error("Error in norm: invalid ord value: ".concat(t))}throw new Error("Error in norm: invalid axis: ".concat(n))}const Mu=_s({norm_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=Au(e=ks(e,"x","norm"),t,n);let s=a.shape;if(r){const t=pe(n,e.shape);s=xu(a.shape,t)}return _l(a,s)}});const Du=_s({euclideanNorm_:function(e){return Mu(e,"euclidean",arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}});const Ou=_s({exp_:function(e){const t={x:ks(e,"x","exp")};return ms.runKernel(Ht,t)}});const Ru=_s({expandDims_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ks(e,"x","expandDims","string_or_numeric");Z(t<=n.rank,()=>"Axis must be <= rank of the tensor");const r={input:n},a={dim:t};return ms.runKernel(jt,r,a)}});const Fu=_s({expm1_:function(e){const t={x:ks(e,"x","expm1")};return ms.runKernel(Jt,t)}});const Cu=_s({tile_:function(e,t){const n=ks(e,"x","tile","string_or_numeric");Z(n.rank===t.length,()=>"Error in transpose: rank of input ".concat(n.rank," ")+"must match length of reps ".concat(t,"."));const r={x:n},a={reps:t};return ms.runKernel(Gr,r,a)}});const Bu=_s({eye_:function(e,t,n){null==t&&(t=e);const r=Do([e,t],arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),a=e<=t?e:t;for(let o=0;o<a;++o)r.set(1,o,o);const s=_l(r.toTensor(),[e,t]);if(null==n)return s;if(1===n.length)return Cu(Ru(s,0),[n[0],1,1]);if(2===n.length)return Cu(Ru(Ru(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Cu(Ru(Ru(Ru(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D "+"batchShapes, but received ".concat(n.length,"D."))}});const Lu=_s({floor_:function(e){const t={x:ks(e,"x","floor","float32")};return ms.runKernel(Xt,t)}});const Pu=_s({gather_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const a={x:ks(e,"x","gather"),indices:ks(t,"indices","gather","int32")},s={axis:n,batchDims:r};return ms.runKernel(tn,a,s)}});const zu=_s({greater_:function(e,t){let n=ks(e,"a","greater","string_or_numeric"),r=ks(t,"b","greater","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(rn,a)}});const Vu=_s({greaterEqual_:function(e,t){let n=ks(e,"a","greaterEqual","string_or_numeric"),r=ks(t,"b","greaterEqual","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(an,a)}});const Wu=_s({isFinite_:function(e){const t={x:ks(e,"x","isFinite")};return ms.runKernel(ln,t)}});const Uu=_s({isInf_:function(e){const t={x:ks(e,"x","isInf")};return ms.runKernel(un,t)}});const Gu=_s({isNaN_:function(e){const t={x:ks(e,"x","isNaN")};return ms.runKernel(pn,t)}});const qu=_s({leakyRelu_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2;const n={x:ks(e,"x","leakyRelu")},r={alpha:t};return ms.runKernel(dn,n,r)}});const Ku=_s({less_:function(e,t){let n=ks(e,"a","less","string_or_numeric"),r=ks(t,"b","less","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(hn,a)}});const Hu=_s({lessEqual_:function(e,t){let n=ks(e,"a","lessEqual","string_or_numeric"),r=ks(t,"b","lessEqual","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(mn,a)}});function ju(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return ms.runKernel(fn,{},r)}const Ju=_s({localResponseNormalization_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const s=ks(e,"x","localResponseNormalization");Z(4===s.rank||3===s.rank,()=>"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ".concat(s.rank,".")),Z(ae(t),()=>"Error in localResponseNormalization: depthRadius must be an "+"integer but got depthRadius ".concat(t,"."));let o=s,i=!1;3===s.rank&&(i=!0,o=_l(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const c={x:o},l={depthRadius:t,bias:n,alpha:r,beta:a},u=ms.runKernel(kn,c,l);return i?_l(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Qu=_s({log_:function(e){const t={x:ks(e,"x","log","float32")};return ms.runKernel(gn,t)}});const Yu=_s({log1p_:function(e){const t={x:ks(e,"x","log1p")};return ms.runKernel(yn,t)}});const Zu=_s({softplus_:function(e){const t={x:ks(e,"x","softplus")};return ms.runKernel(Sr,t)}});const Xu=_s({logSigmoid_:function(e){const t=ks(e,"x","logSigmoid");return Pc(e=>({value:Ti(Zu(Ti(e))),gradFunc:t=>Ac(t,Dl(Ti(e)))}))(t)}});const $u=_s({logSoftmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=ks(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. "+"Logits was rank ".concat(n.rank," and axis was ").concat(t));const r=Pc((e,n)=>{const r=Eu(e,t,!0),a=Hc(e,r),s=Hc(Oo(a,"float32"),Qu(Iu(Ou(a),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[r]=n,a=Ou(r);return Hc(e,Ac(Iu(e,t,!0),a))}}});return r(n)}});const ep=_s({logSumExp_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=ks(e,"x","logSumExp"),a=pe(t,r.shape),s=Eu(r,a,!0),o=Hc(r,s),i=Ou(o),c=Iu(i,a),l=Qu(c),u=Ec(_l(s,l.shape),l);if(n){const e=xu(u.shape,a);return _l(u,e)}return u}});const tp=_s({logicalAnd_:function(e,t){const n=ks(e,"a","logicalAnd","bool"),r=ks(t,"b","logicalAnd","bool");Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(bn,a)}});const np=_s({logicalNot_:function(e){const t={x:ks(e,"x","logicalNot","bool")};return ms.runKernel(wn,t)}});const rp=_s({logicalOr_:function(e,t){const n=ks(e,"a","logicalOr","bool"),r=ks(t,"b","logicalOr","bool");Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(vn,a)}});const ap=_s({logicalXor_:function(e,t){const n=ks(e,"a","logicalXor","bool"),r=ks(t,"b","logicalXor","bool");return Di(n.shape,r.shape),tp(rp(e,t),np(tp(e,t)))}}),sp=2147483648;const op=_s({searchSorted_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"left";const r=ks(e,"sortedSequence","searchSorted"),a=ks(t,"values","searchSorted"),s=r.shape[r.shape.length-1],o=a.shape[a.shape.length-1],i=_l(r,[-1,s]),c=_l(a,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==c.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(te(c.shape)>=sp)throw new Error("values tensor size must less than ".concat(sp));if(i.shape[1]>=sp)throw new Error("trailing dim_size must less than ".concat(sp," for int32 output type, was ").concat(i.shape[1]));const l={sortedSequence:i,values:c},u={side:n};return ms.runKernel(fr,l,u)}});function ip(e,t){return op(e,t,"left")}const cp=_s({maxPool_:function(e,t,n,r,a){const s=ks(e,"x","maxPool");let o=s,i=!1;3===s.rank&&(i=!0,o=_l(s,[1,s.shape[0],s.shape[1],s.shape[2]])),Z(4===o.rank,()=>"Error in maxPool: input must be rank 4 but got rank ".concat(o.rank,".")),Z(kl(n,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(1,"'")),El("maxPool",r,a);const c={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:a},u=ms.runKernel(In,c,l);return i?_l(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const lp=_s({maxPool3d_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=ks(e,"x","maxPool3d");let i=o,c=!1;4===o.rank&&(c=!0,i=_l(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===i.rank,()=>"Error in maxPool3d: x must be rank 5 but got rank ".concat(i.rank,".")),Z("NDHWC"===s,()=>"Error in maxPool3d: Only NDHWC is currently supported, "+"but got dataFormat of ".concat(s)),El("maxPool3d",r,a);const l={x:i},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},p=ms.runKernel(Mn,l,u);return c?_l(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const up=_s({maxPoolWithArgmax_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const s={x:ks(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=ms.runKernel(On,s,o);return{result:i[0],indexes:i[1]}}});const pp=_s({mean_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ks(e,"x","mean")},a={axis:t,keepDims:n};return ms.runKernel(Rn,r,a)}});function dp(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=dp(e,"float32"),n=dp(e,"float32");return Is(t,n)}const n=De(te(e),t);return ms.makeTensor(n,e,t)}function hp(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=hp(e,"float32"),n=dp(e,"float32");return Is(t,n)}const n=Me(te(e),t);return ms.makeTensor(n,e,t)}function mp(e,t){let{indexing:n="xy"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("xy"!==n&&"ij"!==n)throw new TypeError("".concat(n," is not a valid third argument to meshgrid"));if(void 0===e)return[];let r=ks(e,"x","meshgrid",e instanceof Qa?e.dtype:"float32");if(void 0===t)return[r];let a=ks(t,"y","meshgrid",t instanceof Qa?t.dtype:"float32");const s=te(r.shape),o=te(a.shape);return"xy"===n?(r=_l(r,[1,-1]),a=_l(a,[-1,1]),[ti(hp([o,1],r.dtype),r),ti(a,hp([1,s],a.dtype))]):(r=_l(r,[-1,1]),a=_l(a,[1,-1]),[ti(r,hp([1,o],r.dtype)),ti(hp([s,1],a.dtype),a)])}const fp=_s({minimum_:function(e,t){let n=ks(e,"a","minimum"),r=ks(t,"b","minimum");[n,r]=ss(n,r),"bool"===n.dtype&&(n=Oo(n,"int32"),r=Oo(r,"int32")),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(Cn,a)}});const gp=_s({mirrorPad_:function(e,t,n){Z("reflect"===n||"symmetric"===n,()=>"Invalid mode. Mode must be either reflect or symmetric. "+"Got ".concat(n,"."));const r=ks(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Z(t.length===r.rank,()=>"Padding doesn't match input. Must be ".concat(r.rank,". ")+"Got ".concat(t.length,"."));const a="reflect"===n?1:0;for(let i=0;i<r.rank;i++)Z(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),Z(t[i][0]>=0&&t[i][0]<=r.shape[i]-a&&t[i][1]>=0&&t[i][1]<=r.shape[i]-a,()=>"Padding in dimension ".concat(i," cannot be greater than or equal ")+"to ".concat(r.shape[i]-a," or less than 0 for input of ")+"shape ".concat(r.shape));const s={paddings:t,mode:n},o={x:r};return ms.runKernel(Bn,o,s)}});const yp=_s({mod_:function(e,t){let n=ks(e,"a","mod"),r=ks(t,"b","mod");[n,r]=ss(n,r);const a={a:n,b:r};return ms.runKernel(Ln,a)}});const bp=_s({moments_:function(e){let t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const n=pe(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,(e=ks(e,"x","moments")).shape),r=pp(e,n,t);let a=r.shape;t||(a=xu(r.shape,n));const s=Dc(Hc(Oo(e,"float32"),_l(r,a)));return{mean:r,variance:pp(s,n,t)}}});const wp=_s({multiRNNCell_:function(e,t,n,r){const a=ks(t,"data","multiRNNCell"),s=Ts(n,"c","multiRNNCell"),o=Ts(r,"h","multiRNNCell");let i=a;const c=[];for(let p=0;p<e.length;p++){const t=e[p](i,s[p],o[p]);c.push(t[0]),c.push(t[1]),i=t[1]}const l=[],u=[];for(let p=0;p<c.length;p+=2)l.push(c[p]),u.push(c[p+1]);return[l,u]}});const vp=_s({multinomial_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=ks(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+"".concat(s,"."));if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is ".concat(o));n=n||Math.random();const i={logits:1===o?_l(a,[1,-1]):a},c={numSamples:t,seed:n,normalized:r},l=ms.runKernel(Pn,i,c);return 1===o?_l(l,[l.size]):l}});const xp=_s({notEqual_:function(e,t){let n=ks(e,"a","notEqual","string_or_numeric"),r=ks(t,"b","notEqual","string_or_numeric");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(Wn,a)}});const Np=_s({onesLike_:function(e){const t={x:ks(e,"x","onesLike")};return ms.runKernel(Kn,t)}});const Sp=_s({outerProduct_:function(e,t){const n=ks(e,"v1","outerProduct"),r=ks(t,"v2","outerProduct");Z(1===n.rank&&1===r.rank,()=>"Error in outerProduct: inputs must be rank 1, but got ranks "+"".concat(n.rank," and ").concat(r.rank,"."));const a=_l(n,[-1,1]),s=_l(r,[1,-1]);return ti(a,s)}});const kp=_s({pad_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r=ks(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},s={x:r};return ms.runKernel(Jn,s,a)}});const Tp=_s({pad1d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Z(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),kp(e,[t],n)}});const Ep=_s({pad2d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Z(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),kp(e,t,n)}});const _p=_s({pad3d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Z(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),kp(e,t,n)}});const Ip=_s({pad4d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Z(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),kp(e,t,n)}});const Ap=_s({spaceToBatchND_:function(e,t,n){const r=ks(e,"x","spaceToBatchND");Z(r.rank>=1+t.length,()=>"input rank ".concat(r.rank," should be > than [blockShape] ").concat(t.length)),Z(n.length===t.length,()=>"paddings.shape[0] ".concat(n.length," must be equal to [blockShape] ").concat(t.length)),Z(r.shape.reduce((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]===0:e,!0),()=>"input spatial dimensions ".concat(r.shape.slice(1)," with paddings ").concat(n.toString()," must be divisible by blockShapes ").concat(t.toString()));const a={x:r},s={blockShape:t,paddings:n};return ms.runKernel(Er,a,s)}});const Mp=_s({pool_:function(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const i=ks(e,"x","maxPool");let c=i,l=!1;3===i.rank&&(l=!0,c=_l(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(kl(s,a),()=>"Error in pool: Either strides or dilations must be 1. "+"Got strides ".concat(s," and dilations '").concat(a,"'"));const u=ml(c.shape,t,s,a,r),p=[u.dilationHeight,u.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)),r=n.map(e=>e-1),a=r.map(e=>Math.floor(e/2)),s=r.map((e,t)=>e-a[t]);return r.map((e,t)=>[a[t],s[t]])}([u.filterHeight,u.filterWidth],p):[[0,0],[0,0]];const h=1===p[0]&&1===p[1],[m,f]=function(e,t,n){const r=n.map(e=>e[0]),a=n.map(e=>e[1]),s=e.concat(r,a),o=t.map((e,t)=>(e-s[t]%e)%e),i=a.map((e,t)=>e+o[t]),c=t.map((e,t)=>[r[t],i[t]]),l=t.map((e,t)=>[0,o[t]]);return[c,l]}([u.inHeight,u.inWidth],p,d),g=h?r:"valid",y=h?c:Ap(c,p,m),b=("avg"===n?()=>Il(y,t,s,g,o):()=>cp(y,t,s,g,o))(),w=h?b:Cl(b,p,f);return l?_l(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Dp=_s({prelu_:function(e,t){const n={x:ks(e,"x","prelu"),alpha:ks(t,"alpha","prelu")};return ms.runKernel(Zn,n)}});const Op=_s({prod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=ks(e,"x","prod");"bool"===r.dtype&&(r=Oo(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return ms.runKernel(Xn,a,s)}});const Rp=_s({raggedGather_:function(e,t,n,r){const a={paramsNestedSplits:e.map((e,t)=>ks(e,"tensors".concat(t),"raggedGather","int32")),paramsDenseValues:ks(t,"paramsDenseValues","raggedGather"),indices:ks(n,"indices","raggedGather","int32")},s={outputRaggedRank:r},o=ms.runKernel($n,a,s);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const Fp=_s({raggedTensorToTensor_:function(e,t,n,r,a){const s=ks(e,"shape","raggedTensorToTensor","int32"),o=ks(t,"values","raggedTensorToTensor"),i={shape:s,values:o,defaultValue:ks(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map((e,t)=>ks(e,"tensors".concat(t),"raggedTensorToTensor","int32"))},c={rowPartitionTypes:a};return ms.runKernel(er,i,c)}});const Cp=_s({rand_:function(e,t,n){const r=te(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type ".concat(n));a=new Uint8Array(r)}for(let s=0;s<r;s++)a[s]=t();return ms.makeTensor(a,e,n)}});var Bp=n(334);class Lp{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=Bp.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Pp{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=Bp.alea(a.toString()),this.randn=new Lp(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class zp{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"===typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between ".concat(e," - ").concat(t," <= 1 and dtype is not float"));this.random=Bp.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Vp=_s({randomGamma_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",a=arguments.length>4?arguments[4]:void 0;if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type ".concat(r));const s=new Pp(t,n,r,a),o=Do(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const Wp=_s({randomNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error("Unsupported data type ".concat(r));const s=new Lp(t,n,r,!1,a),o=Do(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const Up=_s({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error("Unsupported data type ".concat(t));return Wp(e,0,1,t,n)}});const Gp=_s({randomUniform_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>4?arguments[4]:void 0;const a=Do(e,arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),s=new zp(t,n,null,r);for(let o=0;o<a.values.length;o++)a.values[o]=s.nextValue();return a.toTensor()}});function qp(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return ms.runKernel(tr,{},a)}const Kp=_s({reciprocal_:function(e){const t={x:ks(e,"x","reciprocal")};return ms.runKernel(rr,t)}});const Hp=_s({relu_:function(e){const t={x:ks(e,"x","relu")};return ms.runKernel(ar,t)}});const jp=_s({relu6_:function(e){const t={x:ks(e,"x","relu6")};return ms.runKernel(ur,t)}});const Jp=_s({reverse_:function(e,t){const n={x:ks(e,"x","reverse")},r={dims:t};return ms.runKernel(pr,n,r)}});const Qp=_s({reverse1d_:function(e){const t=ks(e,"x","reverse");return Z(1===t.rank,()=>"Error in reverse1D: x must be rank 1 but got rank ".concat(t.rank,".")),Jp(t,0)}});const Yp=_s({reverse2d_:function(e,t){const n=ks(e,"x","reverse");return Z(2===n.rank,()=>"Error in reverse2D: x must be rank 2 but got rank ".concat(n.rank,".")),Jp(n,t)}});const Zp=_s({reverse3d_:function(e,t){const n=ks(e,"x","reverse");return Z(3===n.rank,()=>"Error in reverse3D: x must be rank 3 but got rank ".concat(n.rank,".")),Jp(n,t)}});const Xp=_s({reverse4d_:function(e,t){const n=ks(e,"x","reverse");return Z(4===n.rank,()=>"Error in reverse4D: x must be rank 4 but got rank ".concat(n.rank,".")),Jp(n,t)}});const $p=_s({round_:function(e){const t={x:ks(e,"x","round")};return ms.runKernel(dr,t)}});const ed=_s({rsqrt_:function(e){const t={x:ks(e,"x","rsqrt","float32")};return ms.runKernel(hr,t)}});const td=_s({selu_:function(e){const t={x:ks(e,"x","selu")};return ms.runKernel(yr,t)}});const nd=_s({separableConv2d_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC";const i=ks(e,"x","separableConv2d"),c=ks(t,"depthwiseFilter","separableConv2d"),l=ks(n,"pointwiseFilter","separableConv2d");let u=i,p=!1;if(3===i.rank&&(p=!0,u=_l(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Z(4===u.rank,()=>"Error in separableConv2d: input must be rank 4, but got "+"rank ".concat(u.rank,".")),Z(4===c.rank,()=>"Error in separableConv2d: depthwise filter must be rank 4, but "+"got rank ".concat(c.rank,".")),Z(4===l.rank,()=>"Error in separableConv2d: pointwise filter must be rank 4, but "+"got rank ".concat(c.rank,".")),Z(1===l.shape[0],()=>"Error in separableConv2d: the first dimension of pointwise filter "+" must be 1, but got ".concat(l.shape[0],".")),Z(1===l.shape[1],()=>"Error in separableConv2d: the second dimension of pointwise "+"filter must be 1, but got ".concat(l.shape[1],"."));const d=c.shape[2],h=c.shape[3];Z(l.shape[2]===d*h,()=>"Error in separableConv2d: the third dimension of pointwise filter "+"must be ".concat(d*h,", ")+"but got ".concat(l.shape[2],"."));const m=cu(u,c,r,a,o,s),f=Ql(m,l,1,"valid",o);return p?_l(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const rd=async function(e,t){const n=ks(e,"x","setdiff1d"),r=ks(t,"y","setdiff1d");Z(n.dtype===r.dtype,()=>"x and y should have the same dtype, but got x (".concat(n.dtype,") and y (").concat(r.dtype,").")),Z(1===n.rank,()=>"x should be 1D tensor, but got x (".concat(n.shape,").")),Z(1===r.rank,()=>"y should be 1D tensor, but got y (".concat(r.shape,")."));const a=await n.data(),s=await r.data(),o=new Set(s);let i=0;for(let u=0;u<a.length;u++)o.has(a[u])||i++;const c=new Ka([i],n.dtype),l=new Ka([i],"int32");for(let u=0,p=0;u<a.length;u++)o.has(a[u])||(c.values[p]=a[u],l.values[p]=u,p++);return[c.toTensor(),l.toTensor()]};const ad=_s({sign_:function(e){const t={x:ks(e,"x","sign")};return ms.runKernel(xr,t)}});const sd=_s({sin_:function(e){const t={x:ks(e,"x","sin","float32")};return ms.runKernel(wr,t)}});const od=_s({sinh_:function(e){const t={x:ks(e,"x","sinh")};return ms.runKernel(vr,t)}});const id=_s({slice1d_:function(e,t,n){const r=ks(e,"x","slice1d");return Z(1===r.rank,()=>"slice1d expects a rank-1 tensor, but got a rank-".concat(r.rank," tensor")),Ol(r,[t],[n])}});const cd=_s({slice2d_:function(e,t,n){const r=ks(e,"x","slice2d");return Z(2===r.rank,()=>"slice2d expects a rank-2 tensor, but got a rank-".concat(r.rank," tensor")),Ol(r,t,n)}});const ld=_s({slice3d_:function(e,t,n){const r=ks(e,"x","slice3d");return Z(3===r.rank,()=>"slice3d expects a rank-3 tensor, but got a rank-".concat(r.rank," tensor")),Ol(r,t,n)}});const ud=_s({slice4d_:function(e,t,n){const r=ks(e,"x","slice4d");return Z(4===r.rank,()=>"slice4d expects a rank-4 tensor, but got a rank-".concat(r.rank," tensor")),Ol(r,t,n)}});const pd=_s({softmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=ks(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. "+"Logits was rank ".concat(n.rank," and dim was ").concat(t));const r={logits:n},a={dim:t};return ms.runKernel(Ir,r,a)}});const dd=_s({fft_:function(e){Z("complex64"===e.dtype,()=>"The dtype for tf.spectral.fft() must be complex64 "+"but got ".concat(e.dtype,"."));const t={input:e};return ms.runKernel(Qt,t)}});const hd=_s({ifft_:function(e){Z("complex64"===e.dtype,()=>"The dtype for tf.spectral.ifft() must be complex64 "+"but got ".concat(e.dtype,"."));const t={input:e};return ms.runKernel(on,t)}});const md=_s({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=_l(e,[n,t]);r=hd(a)}else{const a=[n,2*(t-1)],s=_l(Ei(e),[n,t]),o=_l(ki(e),[n,t]),i=Jp(Ol(s,[0,1],[n,t-2]),1),c=Ac(Jp(Ol(o,[0,1],[n,t-2]),1),Vc(-1)),l=Ml([s,i],1),u=Ml([o,c],1),p=_l(Is(l,u),[a[0],a[1]]);r=hd(p)}if(r=Ei(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=_l(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const fd=_s({split_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r={x:ks(e,"x","split")},a={numOrSizeSplits:t,axis:n};return ms.runKernel(_r,r,a)}});const gd=_s({rfft_:function(e,t){Z("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got ".concat(e.dtype));let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map(e=>0),s=e.shape.map(e=>e);s[e.shape.length-1]=t,a=Ol(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,a=Ml([e,dp(r)],e.shape.length-1),n=t}else a=e;const s=Oc(a),o=_l(Is(a,s),[r,n]),i=dd(o),c=Math.floor(n/2)+1,l=Ei(i),u=ki(i),p=fd(l,[c,n-c],l.shape.length-1),d=fd(u,[c,n-c],u.shape.length-1),h=a.shape.slice();return h[a.shape.length-1]=c,_l(Is(p[0],d[0]),h)}});const yd=_s({squaredDifference_:function(e,t){let n=ks(e,"a","squaredDifference"),r=ks(t,"b","squaredDifference");[n,r]=ss(n,r),Di(n.shape,r.shape);const a={a:n,b:r};return ms.runKernel(Fr,a,{})}});const bd=_s({squeeze_:function(e,t){const n=ks(e,"x","squeeze","string_or_numeric");return _l(n,de(n.shape,t).newShape)}});const wd=_s({stack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Ts(e,"tensors","stack","string_or_numeric");Z(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&Z(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const r=n,a={axis:t};return ms.runKernel(jn,r,a)}});const vd=_s({step_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ks(e,"x","step")},r={alpha:t};return ms.runKernel(Xr,n,r)}});const xd=_s({stridedSlice_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,c=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0;const l={x:ks(e,"x","stridedSlice","string_or_numeric")},u={begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:c};return ms.runKernel(Br,l,u)}});const Nd=_s({tan_:function(e){const t={x:ks(e,"x","tan","float32")};return ms.runKernel(Wr,t)}});function Sd(e,t){$(e);const n=xs(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return As(e,null,n,t)}function kd(e,t,n){if($(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=xs(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return As(e,t,r,n)}function Td(e,t,n){if($(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=xs(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return As(e,t,r,n)}function Ed(e,t,n){if($(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=xs(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return As(e,t,r,n)}function _d(e,t,n){if($(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=xs(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return As(e,t=t||r,r,n)}const Id=_s({topk_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=ks(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t<0)throw new Error("'k' passed to topk() must be >= 0 but got ".concat(t));if(t>a)throw new Error("'k' passed to topk() must be <= the last dimension (".concat(a,") ")+"but got ".concat(t));const s={x:r},o={k:t,sorted:n},[i,c]=ms.runKernel(qr,s,o);return{values:i,indices:c}}});const Ad=_s({truncatedNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new Lp(t,n,r,!0,a),o=Do(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const Md=_s({unique_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ks(e,"x","unique","string_or_numeric");Z(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},a={axis:t},[s,o]=ms.runKernel(jr,r,a);return{values:s,indices:o}}});const Dd=_s({unsortedSegmentSum_:function(e,t,n){const r=ks(e,"x","unsortedSegmentSum"),a=ks(t,"segmentIds","unsortedSegmentSum","int32");Z(ae(n),()=>"numSegments must be of dtype int");const s={x:r,segmentIds:a},o={numSegments:n};return ms.runKernel(Qr,s,o)}});const Od=_s({unstack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ks(e,"x","unstack","string_or_numeric");Z(t>=-n.shape.length&&t<n.shape.length,()=>"Axis = ".concat(t," is not in [-").concat(n.shape.length,", ").concat(n.shape.length,")"));const r={value:n},a={axis:t};return ms.runKernel(Jr,r,a)}});function Rd(e,t){return op(e,t,"right")}function Fd(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return ms.makeVariable(e,t,n,r)}function Cd(e,t){const n=[];for(let s=0;s<t.length;s++)t[s]&&n.push(s);const r=Do(e,"int32"),a=Do([n.length,e.length],"int32");for(let s=0;s<n.length;s++){const t=r.indexToLoc(n[s]),o=s*e.length;a.values.set(t,o)}return a.toTensor()}const Bd=async function(e){const t=ks(e,"condition","whereAsync","bool"),n=await t.data(),r=Cd(t.shape,n);return e!==t&&t.dispose(),r};const Ld=async function(e,t,n){const r=ks(e,"tensor","boolMask"),a=ks(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;Z(o>0,()=>"mask cannot be scalar"),X(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let f=s;f<s+o;f++)c*=i[f];const l=i.slice(0,s).concat([c],i.slice(s+o)),u=_l(r,l),p=_l(a,[-1]),d=await Bd(p),h=bd(d,[1]),m=Pu(u,h,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),h.dispose(),u.dispose(),p.dispose(),d.dispose(),m};const Pd=_s({movingAverage_:function(e,t,n,r){let a=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];const s=ks(e,"v","movingAverage"),o=ks(t,"x","movingAverage"),i=ks(n,"decay","movingAverage");os(s,o),Z(re(s.shape,o.shape),()=>"Shape mismatch in v and x");const c=Vc(1),l=Hc(c,i);let u=Ac(Hc(o,s),l);if(a){Z(null!=r,()=>"When using zeroDebias: true, step is required.");const e=ks(r,"step","movingAverage");u=Ic(u,Hc(c,Kc(i,e)))}return Ec(s,u)}});const zd=_s({scatterND_:function(e,t,n){const r=ks(e,"indices","scatterND","int32"),a=ks(t,"updates","scatterND");Wi(a,r,n);const s={indices:r,updates:a},o={shape:n};return ms.runKernel(mr,s,o)}});const Vd=_s({sparseToDense_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const a=ks(e,"sparseIndices","sparseToDense","int32"),s=ks(t,"sparseValues","sparseToDense","string_or_numeric"),o=ks(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type,"+" but the dtype was ".concat(e.dtype,"."));if(e.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix,"+" but got shape ".concat(e.shape,"."));const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error("outputShape has incorrect number of elements:,"+" ".concat(n.length,", should be: ").concat(s,"."));const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error("sparseValues has incorrect shape "+"".concat(t.shape,", should be [] or [").concat(a,"]"));if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},c={outputShape:n};return ms.runKernel(Rr,i,c)}});const Wd=_s({gatherND_:function(e,t){const n=ks(t,"indices","gatherND","int32"),r={params:ks(e,"x","gatherND","string_or_numeric"),indices:n};return ms.runKernel(nn,r)}});const Ud=_s({dropout_:function(e,t,n,r){const a=ks(e,"x","dropout");if(Z("float32"===a.dtype,()=>"x has to be a floating point tensor since it's going to be "+"scaled, but got a ".concat(a.dtype," tensor instead.")),Z(t>=0&&t<1,()=>"rate must be a float in the range [0, 1), but got ".concat(t,".")),0===t)return e instanceof Qa?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(re(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,i=Ic(Lu(Ec(Gp(s,0,1,"float32",r),o)),o);return Ac(a,i)}});function Gd(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function qd(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return Sd(a,"float32")}const Kd=async function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const r=ks(e,"predictions","inTopK"),a=ks(t,"targets","inTopK");Z(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, "+"but got ".concat(r.rank)),Z(r.rank-1===a.rank,()=>"predictions rank should be 1 larger than targets rank, but got predictions rank "+"".concat(r.rank," and targets rank ").concat(a.rank)),X(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];Z(n>0&&n<=s,()=>"'k' passed to inTopK() must be > 0 && <= the predictions last "+"dimension (".concat(s,"), but got ").concat(n));const o=await r.data(),i=await a.data(),[c,l]=[o.length/s,s],u=he("bool",c);for(let p=0;p<c;p++){const e=p*l,t=o.subarray(e,e+l),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort((e,t)=>t.value-e.value),u[p]=0;for(let a=0;a<n;a++)if(r[a].index===i[p]){u[p]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),Ms(u,a.shape,"bool")};const Hd=_s({conv2DBackpropFilter_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0,i=e;3===e.rank&&(i=_l(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=_l(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Z(4===i.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+"".concat(i.shape,".")),Z(4===c.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+"".concat(c.shape,".")),Z(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+"".concat(n,"."));const l="NHWC"===s?i.shape[3]:i.shape[1],u="NHWC"===s?c.shape[3]:c.shape[1];Z(l===n[2],()=>"Error in conv2dDerFilter: depth of input ".concat(l,") must ")+"match input depth in filter (".concat(n[2],".")),Z(u===n[3],()=>"Error in conv2dDerFilter: depth of dy (".concat(u,") must ")+"match output depth for filter (".concat(n[3],").")),El("conv2dDerFilter",a,o);const p={x:i,dy:c},d={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return ms.runKernel(xt,p,d)}});function jd(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Ac(e,vd(t));throw new Error("Cannot compute gradient for fused activation ".concat(n,"."))}function Jd(e,t){let n=t;const r=Mi(e.shape,t.shape);return r.length>0&&(n=Iu(n,r)),_l(n,e.shape)}function Qd(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Hp(e);if("elu"===t)return gu(e);if("relu6"===t)return jp(e);if("prelu"===t)return Dp(e,n);if("leakyrelu"===t)return qu(e,r);if("sigmoid"===t)return Dl(e);throw new Error("Unknown fused activation ".concat(t,"."))}const Yd=(e,t)=>!(e>0)||"linear"===t;const Zd=_s({fusedConv2d_:function(e){let{x:t,filter:n,strides:r,pad:a,dataFormat:s="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:c,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:p}=e;if(l=l||"linear",!1===Yd(ms.state.gradientDepth,l)){Z("NHWC"===s,()=>"Error in fused conv2d: got dataFormat of ".concat(s," but ")+"only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.");let e=Ql(t,n,r,a,s,o,i);return null!=c&&(e=Ec(e,c)),Qd(e,l,u,p)}const d=ks(t,"x","conv2d","float32"),h=ks(n,"filter","conv2d","float32");let m=d,f=!1;3===d.rank&&(f=!0,m=_l(d,[1,d.shape[0],d.shape[1],d.shape[2]])),Z(4===m.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+"".concat(m.rank,".")),Z(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+"".concat(h.rank,".")),El("fused conv2d",a,i);const g="NHWC"===s?m.shape[3]:m.shape[1];Z(h.shape[2]===g,()=>"Error in conv2d: depth of input (".concat(g,") must match ")+"input depth for filter ".concat(h.shape[2],".")),Z(kl(r,o),()=>"Error in conv2D: Either strides or dilations must be 1. "+"Got strides ".concat(r," and dilations '").concat(o,"'"));const y=gl(m.shape,h.shape,r,o,a,i);let b,w;if(null!=c&&(b=ks(c,"bias","fused conv2d"),[b]=ss(b,d),"NHWC"===s?Di(y.outShape,b.shape):(Z(b.shape.length<=1,()=>"Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of "+"rank-".concat(b.shape.length,".")),Z(0===b.shape.length||b.shape[0]===y.outChannels||1===b.shape[0],()=>"Error in fused conv2d: bias shape (".concat(b.shape,") is not ")+"compatible with the number of output channels "+"(".concat(y.outChannels,")")))),null!=u){const e=u.shape;if(Z(e.length<=1||3===e.length,()=>"Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of "+"rank-".concat(e.length,".")),1===e.length)Z(1===e[0]||e[0]===y.outChannels,()=>"Error in fused conv2d: PReLU activation weights "+"(".concat(e,") is not compatible with the number of output ")+"channels (".concat(y.outChannels,")."));else if(3===e.length)try{Di(e,y.outShape)}catch(S){const t="Error in fused conv2d: PReLU activation weights (".concat(e,") ")+"is not compatible with the output shape of the conv2d "+"(".concat(y.outShape,").");throw Error(t)}w=ks(u,"prelu weights","fused conv2d")}const v=(e,t)=>{Z("NHWC"===s,()=>"Error in gradient of fused conv2D: got dataFormat of ".concat(s," but only NHWC is currently supported."));const[n,i,c,u]=t,p=jd(e,c,l);Z(Sl(o),()=>"Error in gradient of fused conv2D: dilation rates greater than 1 "+"are not yet supported in gradients. Got dilations '".concat(o,"'"));const d=[Zl(i.shape,p,n,r,a),Hd(i,p,n.shape,r,a)];if(null!=u){const e=Jd(u,p);d.push(e)}return d},x={x:m,filter:h,bias:b,preluActivationWeights:w},N={strides:r,pad:a,dataFormat:s,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:p};if(null==c){const e=Pc((e,t,n)=>{let r=ms.runKernel(na,x,N);return n([t,e,r]),f&&(r=_l(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:v}});return e(m,h)}{const e=Pc((e,t,n,r)=>{let a=ms.runKernel(na,x,N);return r([t,e,a,n]),f&&(a=_l(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:v}});return e(m,h,b)}}});const Xd=_s({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=e;3===e.rank&&(i=_l(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=_l(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:c},u={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return ms.runKernel(Ft,l,u)}});const $d=_s({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=t,c=!1;3===t.rank&&(c=!0,i=_l(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},u={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},p=ms.runKernel(Ct,l,u);return c?_l(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const eh=_s({fusedDepthwiseConv2d_:function(e){let{x:t,filter:n,strides:r,pad:a,dataFormat:s="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:c,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:p}=e;if(!1===Yd(ms.state.gradientDepth,l)){let e=cu(t,n,r,a,s,o,i);return null!=c&&(e=Ec(e,c)),Qd(e,l,u,p)}const d=ks(t,"x","depthwiseConv2d","float32"),h=ks(n,"filter","depthwiseConv2d","float32");let m=d,f=!1;3===d.rank&&(f=!0,m=_l(d,[1,d.shape[0],d.shape[1],d.shape[2]])),Z(4===m.rank,()=>"Error in fused depthwiseConv2d: input must be rank 4, but got "+"rank ".concat(m.rank,".")),Z(4===h.rank,()=>"Error in fused depthwiseConv2d: filter must be rank 4, "+"but got rank ".concat(h.rank,".")),Z(m.shape[3]===h.shape[2],()=>"Error in fused depthwiseConv2d: number of input channels "+"(".concat(m.shape[3],") must match the inChannels dimension in ")+"filter ".concat(h.shape[2],".")),null==o&&(o=[1,1]),Z(kl(r,o),()=>"Error in fused depthwiseConv2d: Either strides or dilations must "+"be 1. Got strides ".concat(r," and dilations '").concat(o,"'")),El("fused depthwiseConv2d",a,i);const g=gl(m.shape,h.shape,r,o,a,i,!0);let y,b;null!=c&&(y=ks(c,"bias","fused conv2d"),[y]=ss(y,d),Di(g.outShape,y.shape)),null!=u&&(b=ks(u,"prelu weights","fused depthwiseConv2d"));const w=(e,t)=>{Z(Sl(o),()=>"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations "+"'".concat(o,"'"));const[n,s,c,u]=t,p=jd(e,c,l),d=$d(s.shape,p,n,r,a,o,i),h=Xd(s,p,n.shape,r,a,o,i);if(null!=u){return[d,h,Jd(y,p)]}return[d,h]},v={x:m,filter:h,bias:y,preluActivationWeights:b},x={strides:r,pad:a,dataFormat:s,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:p};if(null==c){const e=Pc((e,t,n)=>{let r=ms.runKernel(ra,v,x);return n([t,e,r]),f&&(r=_l(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}});return e(m,h)}{const e=Pc((e,t,n,r)=>{let a=ms.runKernel(ra,v,x);return r([t,e,a,n]),f&&(a=_l(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:w}});return e(m,h,y)}}});const th=_s({fusedMatMul_:function(e){let{a:t,b:n,transposeA:r=!1,transposeB:a=!1,bias:s,activation:o="linear",preluActivationWeights:i,leakyreluAlpha:c=.2}=e;if(!1===Yd(ms.state.gradientDepth,o)){let e=ti(t,n,r,a);return null!=s&&(e=Ec(e,s)),Qd(e,o,i,c)}let l=ks(t,"a","fused matMul"),u=ks(n,"b","fused matMul");[l,u]=ss(l,u);const p=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=a?u.shape[u.rank-1]:u.shape[u.rank-2],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],m=a?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),y=te(f),b=te(g);Z(p===d,()=>"Error in fused matMul: inner shapes (".concat(p,") and (")+"".concat(d,") of Tensors with shapes ").concat(l.shape," and ")+"".concat(u.shape," and transposeA=").concat(r)+" and transposeB=".concat(a," must match."));const w=Di(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,m]),v=_l(l,r?[y,p,h]:[y,h,p]),x=_l(u,a?[b,m,d]:[b,d,m]);let N,S;null!=s&&(N=ks(s,"bias","fused matMul"),[N]=ss(N,l),Di(w,N.shape)),null!=i&&(S=ks(i,"prelu weights","fused matMul"));const k=(e,t)=>{const[n,i,c,l]=t,u=jd(_l(e,c.shape),c,o);let p,d;if(r||a?!r&&a?(p=ti(u,i,!1,!1),d=ti(u,n,!0,!1)):r&&!a?(p=ti(i,u,!1,!0),d=ti(n,u,!1,!1)):(p=ti(i,u,!0,!0),d=ti(u,n,!0,!0)):(p=ti(u,i,!1,!0),d=ti(n,u,!0,!1)),null!=s){return[p,d,Jd(l,u)]}return[p,d]},T={a:v,b:x,bias:N,preluActivationWeights:S},E={transposeA:r,transposeB:a,activation:o,leakyreluAlpha:c};if(null==s){const e=Pc((e,t,n)=>{const r=ms.runKernel(ta,T,E);return n([e,t,r]),{value:_l(r,w),gradFunc:k}});return e(v,x)}{const e=Pc((e,t,n,r)=>{const a=ms.runKernel(ta,T,E);return r([e,t,a,n]),{value:_l(a,w),gradFunc:k}});return e(v,x,N)}}});const nh=_s({hammingWindow_:function(e){return qd(e,.54,.46)}});const rh=_s({hannWindow_:function(e){return qd(e,.5,.5)}});const ah=_s({frame_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,s=0;const o=[];for(;s+t<=e.size;)o.push(Ol(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=Ml([Ol(e,s,t-r),Gc([r],a)]);o.push(i),s+=n}return 0===o.length?kd([],[0,t]):_l(Ml(o),[o.length,t])}});const sh=_s({stft_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:rh;null==r&&(r=Gd(t));const s=ah(e,t,n),o=Ac(s,a(t));return gd(o,r)}});const oh=_s({cropAndResize_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"bilinear",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ks(e,"image","cropAndResize"),i=ks(t,"boxes","cropAndResize","float32"),c=ks(n,"boxInd","cropAndResize","int32"),l=i.shape[0];Z(4===o.rank,()=>"Error in cropAndResize: image must be rank 4,"+"but got rank ".concat(o.rank,".")),Z(2===i.rank&&4===i.shape[1],()=>"Error in cropAndResize: boxes must be have size [".concat(l,",4] ")+"but had shape ".concat(i.shape,".")),Z(1===c.rank&&c.shape[0]===l,()=>"Error in cropAndResize: boxInd must be have size [".concat(l,"] ")+"but had shape ".concat(i.shape,".")),Z(2===r.length,()=>"Error in cropAndResize: cropSize must be of length 2, but got "+"length ".concat(r.length,".")),Z(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was ".concat(r)),Z("bilinear"===a||"nearest"===a,()=>"method must be bilinear or nearest, but was ".concat(a));const u={image:o,boxes:i,boxInd:c},p={method:a,extrapolationValue:s,cropSize:r};return ms.runKernel(Mt,u,p)}});const ih=_s({flipLeftRight_:function(e){const t=ks(e,"image","flipLeftRight","float32");Z(4===t.rank,()=>"Error in flipLeftRight: image must be rank 4,"+"but got rank ".concat(t.rank,"."));const n={image:t};return ms.runKernel(Zt,n,{})}});const ch=_s({grayscaleToRGB_:function(e){const t=ks(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];Z(t.rank>=2,()=>"Error in grayscaleToRGB: images must be at least rank 2, "+"but got rank ".concat(t.rank,".")),Z(1===r,()=>"Error in grayscaleToRGB: last dimension of a grayscale image "+"should be size 1, but got size ".concat(r,"."));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,Cu(t,a)}});const lh=_s({rotateWithOffset_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const a=ks(e,"image","rotateWithOffset","float32");Z(4===a.rank,()=>"Error in rotateWithOffset: image must be rank 4,"+"but got rank ".concat(a.rank,"."));const s={image:a},o={radians:t,fillValue:n,center:r};return ms.runKernel(ea,s,o)}});function uh(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),Z(0<=r&&r<=1,()=>"iouThreshold must be in [0, 1], but was '".concat(r,"'")),Z(2===e.rank,()=>"boxes must be a 2D tensor, but was of rank '".concat(e.rank,"'")),Z(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was ".concat(e.shape[1])),Z(1===t.rank,()=>"scores must be a 1D tensor"),Z(t.shape[0]===o,()=>"scores has incompatible shape with boxes. Expected ".concat(o,", ")+"but was ".concat(t.shape[0])),Z(0<=s&&s<=1,()=>"softNmsSigma must be in [0, 1], but was '".concat(s,"'")),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const ph=_s({nonMaxSuppression_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const s=ks(e,"boxes","nonMaxSuppression","float32"),o=ks(t,"scores","nonMaxSuppression","float32"),i=uh(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const c={maxOutputSize:n,iouThreshold:r,scoreThreshold:a};return ms.runKernel(Un,{boxes:s,scores:o},c)}});function dh(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||hh)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function hh(e,t){return e>t?1:e<t?-1:0}function mh(e,t,n,r,a){return yh(e,t,n,r,a,0)}function fh(e,t,n,r,a,s){return yh(e,t,n,r,a,0,!1,s,!0)}function gh(e,t,n,r,a,s){return yh(e,t,n,r,a,s,!0)}function yh(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],c=arguments.length>8&&void 0!==arguments[8]&&arguments[8];const l=[];for(let g=0;g<t.length;g++)t[g]>a&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(vh);const u=s>0?-.5/s:0,p=[],d=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let c=p.length-1;c>=o;--c){const n=bh(e,s,p[c]);if(n>=r){i=!0;break}if(t.score=t.score*wh(r,u,n),t.score<=a)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(s),d.push(t.score)):t.score>a&&dh(l,t,vh))}const h=p.length,m=n-h;i&&m>0&&(p.push(...new Array(m).fill(0)),d.push(...new Array(m).fill(0)));const f={selectedIndices:p};return o&&(f.selectedScores=d),c&&(f.validOutputs=h),f}function bh(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),c=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),u=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),h=(i-s)*(c-o),m=(p-l)*(d-u);if(h<=0||m<=0)return 0;const f=Math.max(s,l),g=Math.max(o,u),y=Math.min(i,p),b=Math.min(c,d),w=Math.max(y-f,0)*Math.max(b-g,0);return w/(h+m-w)}function wh(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function vh(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const xh=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const s=ks(e,"boxes","nonMaxSuppressionAsync"),o=ks(t,"scores","nonMaxSuppressionAsync"),i=uh(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const c=await Promise.all([s.data(),o.data()]),l=c[0],u=c[1],{selectedIndices:p}=mh(l,u,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),Sd(p,"int32")};const Nh=_s({nonMaxSuppressionWithScore_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ks(e,"boxes","nonMaxSuppression"),i=ks(t,"scores","nonMaxSuppression"),c=uh(o,i,n,r,a,s);n=c.maxOutputSize,r=c.iouThreshold,a=c.scoreThreshold,s=c.softNmsSigma;const l={boxes:o,scores:i},u={maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s},p=ms.runKernel(qn,l,u);return{selectedIndices:p[0],selectedScores:p[1]}}});const Sh=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ks(e,"boxes","nonMaxSuppressionAsync"),i=ks(t,"scores","nonMaxSuppressionAsync"),c=uh(o,i,n,r,a,s);n=c.maxOutputSize,r=c.iouThreshold,a=c.scoreThreshold,s=c.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),u=l[0],p=l[1],{selectedIndices:d,selectedScores:h}=gh(u,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Sd(d,"int32"),selectedScores:Sd(h)}};const kh=_s({nonMaxSuppressionPadded_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=ks(e,"boxes","nonMaxSuppression"),i=ks(t,"scores","nonMaxSuppression"),c=uh(o,i,n,r,a,null),l={boxes:o,scores:i},u={maxOutputSize:c.maxOutputSize,iouThreshold:c.iouThreshold,scoreThreshold:c.scoreThreshold,padToMaxOutputSize:s},p=ms.runKernel(Gn,l,u);return{selectedIndices:p[0],validOutputs:p[1]}}});const Th=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=ks(e,"boxes","nonMaxSuppressionAsync"),i=ks(t,"scores","nonMaxSuppressionAsync"),c=uh(o,i,n,r,a,null),l=c.maxOutputSize,u=c.iouThreshold,p=c.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:f}=fh(d,h,l,u,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Sd(m,"int32"),validOutputs:Vc(f,"int32")}};const Eh=_s({resizeBilinear_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=ks(e,"images","resizeBilinear");Z(3===a.rank||4===a.rank,()=>"Error in resizeBilinear: x must be rank 3 or 4, but got "+"rank ".concat(a.rank,".")),Z(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+"".concat(t,".")),Z(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=_l(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},c={alignCorners:n,halfPixelCenters:r,size:t},l=ms.runKernel(cr,i,c);return o?_l(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const _h=_s({resizeNearestNeighbor_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=ks(e,"images","resizeNearestNeighbor");Z(3===a.rank||4===a.rank,()=>"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got "+"rank ".concat(a.rank,".")),Z(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+"".concat(t,".")),Z("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),Z(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=_l(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},c={alignCorners:n,halfPixelCenters:r,size:t},l=ms.runKernel(or,i,c);return o?_l(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Ih=_s({threshold_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"binary",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const a=ks(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,i,c,l,u=Ac(Sd([r]),255);if(Z(3===a.rank,()=>"Error in threshold: image must be rank 3,"+"but got rank ".concat(a.rank,".")),Z(3===a.shape[2]||1===a.shape[2],()=>"Error in threshold: image color channel must be equal to 3 or 1"+"but got ".concat(a.shape[2],".")),Z("int32"===a.dtype||"float32"===a.dtype,()=>"Error in dtype: image dtype must be int32 or float32,"+"but got dtype ".concat(a.dtype,".")),Z("otsu"===t||"binary"===t,()=>"Method must be binary or otsu, but was ".concat(t)),3===a.shape[2]){[o,i,c]=fd(a,[1,1,1],-1);const e=Ac(o,.2989),t=Ac(i,.587),n=Ac(c,.114);l=Ec(Ec(e,t),n)}else l=e;if("otsu"===t){u=function(e,t){let n,r,a,s,o,i,c=Sd([-1]),l=Sd([0]),u=Sd([0]);for(let p=0;p<e.size-1;p++){n=Ol(e,0,p+1),r=Ol(e,p+1),o=Ic(Iu(n),t),i=Ic(Iu(r),t);const d=Iu(Ac(n,qp(0,n.size)));a=Ic(d,Iu(n));const h=Gc(r.shape,n.size),m=Ec(qp(0,r.size),h),f=Ac(r,m);s=Ic(Iu(f),Iu(r));const g=Hc(a,s),y=Hc(a,s),b=Ac(o,i);u=Ac(Ac(b,g),y);const w=zu(u,l);l=du(w,u,l),c=du(w,Sd([p]),c)}return c}(Vl(Oo($p(l),"int32"),Ms([]),256),s)}const p=n?Hu(l,u):zu(l,u);return Oo(Ac(p,255),"int32")}});const Ah=_s({transform_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"constant",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,s=arguments.length>5?arguments[5]:void 0;const o=ks(e,"image","transform","float32"),i=ks(t,"transforms","transform","float32");Z(4===o.rank,()=>"Error in transform: image must be rank 4,"+"but got rank ".concat(o.rank,".")),Z(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),Z(null==s||2===s.length,()=>"Error in transform: outputShape must be [height, width] or null, "+"but got ".concat(s,"."));const c={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return ms.runKernel(Kr,c,l)}});const Mh=_s({bandPart_:function(e,t,n){Z(t%1===0,()=>"bandPart(): numLower must be an integer, got ".concat(t,".")),Z(n%1===0,()=>"bandPart(): numUpper must be an integer, got ".concat(n,"."));const r=ks(e,"a","bandPart");Z(r.rank>=2,()=>"bandPart(): Rank must be at least 2, got ".concat(r.rank,"."));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error("bandPart(): numLower (".concat(t,")")+" must not be greater than the number of rows (".concat(s,")."));if(!(n<=o))throw new Error("bandPart(): numUpper (".concat(n,")")+" must not be greater than the number of columns (".concat(o,")."));t<0&&(t=s),n<0&&(n=o);const i=_l(qp(0,s,1,"int32"),[-1,1]),c=qp(0,o,1,"int32"),l=Hc(i,c),u=tp(Hu(l,Vc(+t,"int32")),Vu(l,Vc(-n,"int32"))),p=dp([s,o],r.dtype);return _l(wd(Od(_l(r,[-1,s,o])).map(e=>du(u,e,p))),a)}});const Dh=_s({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Z(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)Z(e[t].shape[0]===n,()=>"Gram-Schmidt: Non-unique lengths found in the input vectors: "+"(".concat(e[t].shape[0]," vs. ").concat(n,")"))}else t=!0,e=fd(e,e.shape[0],0).map(e=>bd(e,[0]));Z(e.length<=e[0].shape[0],()=>"Gram-Schmidt: Number of vectors (".concat(e.length,") exceeds ")+"number of dimensions (".concat(e[0].shape[0],")."));const n=[],r=e;for(let a=0;a<e.length;++a)n.push(ms.tidy(()=>{let e=r[a];if(a>0)for(let t=0;t<a;++t){const r=Ac(Iu(Ac(n[t],e)),n[t]);e=Hc(e,r)}return Ic(e,Mu(e,"euclidean"))}));return t?wd(n,0):n}});function Oh(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return ms.tidy(()=>{Z(2===e.shape.length,()=>"qr2d() requires a 2D Tensor, but got a ".concat(e.shape.length,"D Tensor."));const n=e.shape[0],r=e.shape[1];let a=Bu(n),s=Ro(e);const o=kd([[1]],[1,1]);let i=Ro(o);const c=n>=r?r:n;for(let e=0;e<c;++e){const t=s,c=i,l=a;[i,s,a]=ms.tidy(()=>{const t=Ol(s,[e,e],[n-e,1]),c=Mu(t),l=Ol(s,[e,e],[1,1]),u=du(zu(l,0),kd([[-1]]),kd([[1]])),p=Hc(l,Ac(u,c)),d=Ic(t,p);i=1===d.shape[0]?Ro(o):Ml([o,Ol(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=Ti(Ic(ti(u,p),c)),m=Ol(s,[e,0],[n-e,r]),f=Ac(h,i),g=_i(i);if(0===e)s=Hc(m,ti(f,ti(g,m)));else{const t=Hc(m,ti(f,ti(g,m)));s=Ml([Ol(s,[0,0],[e,r]),t],0)}const y=_i(f),b=Ol(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=Hc(b,ti(ti(b,i),y));else{const t=Hc(b,ti(ti(b,i),y));a=Ml([Ol(a,[0,0],[n,e]),t],1)}return[i,s,a]}),di([t,c,l])}return!t&&n>r&&(a=Ol(a,[0,0],[n,r]),s=Ol(s,[0,0],[r,r])),[a,s]})}const Rh=_s({qr_:function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Z(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank ".concat(e.rank)),2===e.rank)return Oh(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=Od(_l(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach(e=>{const[n,r]=Oh(e,t);a.push(n),s.push(r)});return[_l(wd(a,0),e.shape),_l(wd(s,0),e.shape)]}}});var Fh;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Fh||(Fh={}));const Ch=_s({computeWeightedLoss_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Fh.SUM_BY_NONZERO_WEIGHTS;const r=ks(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=ks(t,"weights","computeWeightedLoss"));const s=null==a?r:Ac(r,a);if(n===Fh.NONE)return s;if(n===Fh.SUM)return Iu(s);if(n===Fh.MEAN){if(null==a)return pp(s);{const e=r.size/a.size,t=Ic(Iu(s),Iu(a));return e>1?Ic(t,Vc(e)):t}}if(n===Fh.SUM_BY_NONZERO_WEIGHTS){if(null==a)return Ic(Iu(s),Vc(r.size));{const e=Ac(a,hp(r.shape)),t=Oo(Iu(xp(e,Vc(0))),"float32");return Ic(Iu(s),t)}}throw Error("Unknown reduction: ".concat(n))}});const Bh=_s({absoluteDifference_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Fh.SUM_BY_NONZERO_WEIGHTS;const a=ks(e,"labels","absoluteDifference"),s=ks(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=ks(n,"weights","absoluteDifference")),X(a.shape,s.shape,"Error in absoluteDifference: ");const i=Jc(Hc(a,s));return Ch(i,o,r)}});const Lh=_s({cosineDistance_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Fh.SUM_BY_NONZERO_WEIGHTS;const s=ks(e,"labels","cosineDistance"),o=ks(t,"predictions","cosineDistance");let i=null;null!=r&&(i=ks(r,"weights","cosineDistance")),X(s.shape,o.shape,"Error in cosineDistance: ");const c=Vc(1),l=Hc(c,Iu(Ac(s,o),n,!0));return Ch(l,i,a)}});const Ph=_s({hingeLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Fh.SUM_BY_NONZERO_WEIGHTS,a=ks(e,"labels","hingeLoss");const s=ks(t,"predictions","hingeLoss");let o=null;null!=n&&(o=ks(n,"weights","hingeLoss")),X(a.shape,s.shape,"Error in hingeLoss: ");const i=Vc(1);a=Hc(Ac(Vc(2),a),i);const c=Hp(Hc(i,Ac(a,s)));return Ch(c,o,r)}});const zh=_s({huberLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Fh.SUM_BY_NONZERO_WEIGHTS;const s=ks(e,"labels","huberLoss"),o=ks(t,"predictions","huberLoss");let i=null;null!=n&&(i=ks(n,"weights","huberLoss")),X(s.shape,o.shape,"Error in huberLoss: ");const c=Vc(r),l=Jc(Hc(o,s)),u=fp(l,c),p=Hc(l,u),d=Ec(Ac(Vc(.5),Dc(u)),Ac(c,p));return Ch(d,i,a)}});const Vh=_s({logLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Fh.SUM_BY_NONZERO_WEIGHTS;const s=ks(e,"labels","logLoss"),o=ks(t,"predictions","logLoss");let i=null;null!=n&&(i=ks(n,"weights","logLoss")),X(s.shape,o.shape,"Error in logLoss: ");const c=Vc(1),l=Vc(r),u=Ti(Ac(s,Qu(Ec(o,l)))),p=Ac(Hc(c,s),Qu(Ec(Hc(c,o),l))),d=Hc(u,p);return Ch(d,i,a)}});const Wh=_s({meanSquaredError_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Fh.SUM_BY_NONZERO_WEIGHTS;const a=ks(e,"labels","meanSquaredError"),s=ks(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=ks(n,"weights","meanSquaredError")),X(a.shape,s.shape,"Error in meanSquaredError: ");const i=yd(a,s);return Ch(i,o,r)}});const Uh=_s({sigmoidCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Fh.SUM_BY_NONZERO_WEIGHTS,s=ks(e,"multiClassLabels","sigmoidCrossEntropy");const o=ks(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=ks(n,"weights","sigmoidCrossEntropy")),X(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Vc(r),t=Vc(1),n=Vc(.5);s=Ec(Ac(s,Hc(t,e)),Ac(n,e))}const c=function(e,t){const n=ks(e,"labels","sigmoidCrossEntropyWithLogits"),r=ks(t,"logits","sigmoidCrossEntropyWithLogits");X(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=Hp(r),s=Ac(r,n),o=Yu(Ou(Ti(Jc(r))));return Ec(Hc(a,s),o)}(s,o);return Ch(c,i,a)}});const Gh=_s({softmaxCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Fh.SUM_BY_NONZERO_WEIGHTS,s=ks(e,"onehotLabels","softmaxCrossEntropy");const o=ks(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=ks(n,"weights","softmaxCrossEntropy")),X(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Vc(r),t=Vc(1),n=Vc(s.shape[1]);s=Ec(Ac(s,Hc(t,e)),Ic(e,n))}const c=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet "+"supported. Labels / logits was rank ".concat(t.rank," ")+"and dim was ".concat(n));const r=Pc((e,t,r)=>{const a=ep(t,[n],!0),s=Hc(Oo(t,"float32"),a);r([e,s]);const o=Ti(Ac(s,e));return{value:Iu(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=xu(e.shape,[n]);return[Ac(_l(e,s),Hc(Oo(r,"float32"),Ou(a))),Ac(_l(e,s),Hc(Ou(a),Oo(r,"float32")))]}}});return r(e,t)}(s,o);return Ch(c,i,a)}});const qh=_s({sparseFillEmptyRows_:function(e,t,n,r){const a=ks(e,"indices","sparseFillEmptyRows","int32"),s=ks(t,"values","sparseFillEmptyRows"),o=ks(n,"denseShape","sparseFillEmptyRows","int32"),i=ks(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error("Indices should be Tensor2D but received shape\n        ".concat(a.shape));if(1!==s.rank)throw new Error("Values should be Tensor1D but received shape ".concat(s.shape));if(1!==o.rank)throw new Error("Dense shape should be Tensor1D but received shape ".concat(o.shape));if(0!==i.rank)throw new Error("Default value should be a scalar but received shape ".concat(i.shape));const c={indices:a,values:s,denseShape:o,defaultValue:i},l=ms.runKernel(Ar,c);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Kh=_s({sparseReshape_:function(e,t,n){const r=ks(e,"inputIndices","sparseReshape","int32"),a=ks(t,"inputShape","sparseReshape","int32"),s=ks(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error("Input indices should be Tensor2D but received shape\n        ".concat(r.shape));if(1!==a.rank)throw new Error("Input shape should be Tensor1D but received shape ".concat(a.shape));if(1!==s.rank)throw new Error("New shape should be Tensor1D but received shape ".concat(s.shape));const o={inputIndices:r,inputShape:a,newShape:s},i=ms.runKernel(Mr,o);return{outputIndices:i[0],outputShape:i[1]}}});const Hh=_s({sparseSegmentMean_:function(e,t,n){const r=ks(e,"data","sparseSegmentMean"),a=ks(t,"indices","sparseSegmentMean","int32"),s=ks(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n          ".concat(a.shape));if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          ".concat(s.shape));const o={data:r,indices:a,segmentIds:s};return ms.runKernel(Dr,o)}});const jh=_s({sparseSegmentSum_:function(e,t,n){const r=ks(e,"data","sparseSegmentSum"),a=ks(t,"indices","sparseSegmentSum","int32"),s=ks(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n         ".concat(a.shape));if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         ".concat(s.shape));const o={data:r,indices:a,segmentIds:s};return ms.runKernel(Or,o)}});const Jh=_s({stringNGrams_:function(e,t,n,r,a,s,o,i){const c=ks(e,"data","stringNGrams","string");if("string"!==c.dtype)throw new Error("Data must be of datatype string");if(1!==c.shape.length)throw new Error("Data must be a vector, saw: ".concat(c.shape));const l=ks(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const u={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},p={data:c,dataSplits:l},d=ms.runKernel(Lr,p,u);return{nGrams:d[0],nGramsSplits:d[1]}}});const Qh=_s({stringSplit_:function(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=ks(e,"input","stringSplit","string"),a=ks(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error("Input should be Tensor1D but received shape ".concat(r.shape));if(0!==a.rank)throw new Error("Delimiter should be a scalar but received shape ".concat(a.shape));const s={skipEmpty:n},o={input:r,delimiter:a},i=ms.runKernel(Pr,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});const Yh=_s({stringToHashBucketFast_:function(e,t){const n=ks(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return ms.runKernel(zr,a,r)}}),Zh={fft:dd,ifft:hd,rfft:gd,irfft:md},Xh={hammingWindow:nh,hannWindow:rh,frame:ah,stft:sh},$h={flipLeftRight:ih,grayscaleToRGB:ch,resizeNearestNeighbor:_h,resizeBilinear:Eh,rotateWithOffset:lh,cropAndResize:oh,nonMaxSuppression:ph,nonMaxSuppressionAsync:xh,nonMaxSuppressionWithScore:Nh,nonMaxSuppressionWithScoreAsync:Sh,nonMaxSuppressionPadded:kh,nonMaxSuppressionPaddedAsync:Th,threshold:Ih,transform:Ah},em={bandPart:Mh,gramSchmidt:Dh,qr:Rh},tm={absoluteDifference:Bh,computeWeightedLoss:Ch,cosineDistance:Lh,hingeLoss:Ph,huberLoss:zh,logLoss:Vh,meanSquaredError:Wh,sigmoidCrossEntropy:Uh,softmaxCrossEntropy:Gh},nm={sparseFillEmptyRows:qh,sparseReshape:Kh,sparseSegmentMean:Hh,sparseSegmentSum:jh},rm={stringNGrams:Jh,stringSplit:Qh,stringToHashBucketFast:Yh},am={sgd:el.sgd,momentum:el.momentum,adadelta:el.adadelta,adagrad:el.adagrad,rmsprop:el.rmsprop,adamax:el.adamax,adam:el.adam},sm="undefined"!==typeof requestAnimationFrame?requestAnimationFrame:"undefined"!==typeof setImmediate?setImmediate:e=>e();function om(){return new Promise(e=>sm(()=>e()))}function im(e,t){const n=e[0].length;e.forEach((e,t)=>{Z(e.length===n,()=>"Error in concat".concat(n,"D: rank of tensors[").concat(t,"] must be the same ")+"as the rank of the rest (".concat(n,")"))}),Z(t>=0&&t<n,()=>"Error in concat".concat(n,"D: axis must be between 0 and ").concat(n-1,"."));const r=e[0];e.forEach((e,a)=>{for(let s=0;s<n;s++)Z(s===t||e[s]===r[s],()=>"Error in concat".concat(n,"D: Shape of tensors[").concat(a,"] (").concat(e,") ")+"does not match the shape of the rest (".concat(r,") ")+"along the non-concatenated axis ".concat(a,"."))})}function cm(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var lm;function um(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error("rt input.shape and shape=".concat(t," are incompatible: rt input.rank = ").concat(e+n.length,", but shape.rank = ").concat(r.length));for(let a=1;a<n.length;++a){const s=n[a],o=r[r.length-n.length+a],i=r[o];if(s>=0)if(i>=0){if(i!==s)throw new Error("rt input.shape and shape=".concat(t," are incompatible: rt input.shape[").concat(a+e,"] = ").concat(s," but shape[").concat(a+e,"] = ").concat(i))}else r[o]=s}return r}function pm(e){const t={FIRST_DIM_SIZE:lm.FIRST_DIM_SIZE,VALUE_ROWIDS:lm.VALUE_ROWIDS,ROW_LENGTHS:lm.ROW_LENGTHS,ROW_SPLITS:lm.ROW_SPLITS,ROW_LIMITS:lm.ROW_LIMITS,ROW_STARTS:lm.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function dm(e){return 0===e.length?0:e[0]===lm.FIRST_DIM_SIZE?e.length-1:e.length}function hm(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error("defaultValue.shape=".concat(e," and ragged tensor flatValues.shape=").concat(t,", are incompatible: defaultValue.rank = ").concat(n," must be less than ragged tensor input flatValues.rank = ").concat(r,")"));for(let a=0;a<Math.min(n,r-1);++a){const n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error("defaultValue.shape=".concat(e,", and ragged tensor input flatValues.shape=").concat(t," are incompatible: defaultValue.shape[").concat(a-e.length,"] = ").concat(n," but ragged tensor input.flatValues.shape[").concat(a-e.length,"] = ").concat(r))}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(lm||(lm={}));const mm=30;function fm(e){return e<=mm?e:Ee(e,Math.floor(Math.sqrt(e)))}function gm(e,t,n){return[n*("number"===typeof e?e:e[0]),t*("number"===typeof e?e:e[1])]}function ym(e,t,n){let r=[];if(!(arguments.length>3&&void 0!==arguments[3])||arguments[3])r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let a=0;a<n;++a)r=r.concat([e[a+1]/t[a],t[a]]);r=r.concat(e.slice(n+1))}return r}function bm(e,t){const n=[];if(!(arguments.length>2&&void 0!==arguments[2])||arguments[2]){n.push(t);for(let r=t+1;r<e;++r)r<=2*t?(n.push(r),n.push(r-(t+1))):n.push(r)}else{const r=[],a=[];for(let n=1;n<e;++n)n>=2*t+1||n%2===1?a.push(n):r.push(n);n.push(...r),n.push(0),n.push(...a)}return n}function wm(e,t,n){let r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let s=1;s<e.length;++s)s<=t.length?r?a.push(t[s-1]*e[s]):a.push(e[s]/t[s-1]):a.push(e[s]);return a}function vm(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function xm(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}const Nm=1.7580993408473768,Sm=1.0507009873554805,km=.3275911,Tm=.254829592,Em=-.284496736,_m=1.421413741,Im=-1.453152027,Am=1.061405429;function Mm(e,t){if(e.length!==t.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+"".concat(e.length,", imag: ").concat(t.length,"."));const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Dm(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Om(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let a=0;a<e.length;a+=4)n[Math.floor(a/4)]=e[a],r[Math.floor(a/4)]=e[a+1];return{real:n,imag:r}}function Rm(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let a=2;a<e.length;a+=4)n[Math.floor(a/4)]=e[a],r[Math.floor(a/4)]=e[a+1];return{real:n,imag:r}}function Fm(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Cm(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Bm(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function Lm(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Pm="->",zm=/->/g,Vm=",",Wm="...";function Um(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(zm,"").length)/Pm.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("'.concat(Pm,'").'));const[r,a]=e.split(Pm);Z(-1===r.indexOf(Wm),()=>'The ellipsis notation ("'.concat(Wm,'") is not supported yet.'));const s=r.split(Vm),o=s.length;if(t!==o)throw new Error("Expected ".concat(o," input tensors, received ").concat(t));if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let p=0;p<a.length;++p){const e=a[p];if(!s.some(t=>-1!==t.indexOf(e)))throw new Error("Output subscripts contain the label ".concat(e," ")+"not present in the input subscripts.");-1===i.indexOf(e)&&i.push(e)}for(let p=0;p<r.length;++p){const e=r[p];-1===i.indexOf(e)&&e!==Vm&&i.push(e)}const c=new Array(s.length);for(let p=0;p<o;++p){if(new Set(s[p].split("")).size!==s[p].length)throw new Error("Found duplicate axes in input component ".concat(s[p],". ")+"Support for duplicate axes in input is not implemented yet.");c[p]=[];for(let e=0;e<s[p].length;++e)c[p].push(i.indexOf(s[p][e]))}const l=i.length,u=[];for(let p=a.length;p<l;++p)u.push(p);return{allDims:i,summedDims:u,idDims:c}}function Gm(e,t){let n=new Array(e);n.fill(-1);for(let a=0;a<t.length;++a)n[t[a]]=a;const r=[];for(let a=0;a<e;++a)-1===n[a]&&r.push(a);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:r}}function qm(e,t,n){const r=new Array(e);for(let a=0;a<n.length;++a){const e=n[a].shape;for(let n=0;n<t[a].length;++n)void 0===r[t[a][n]]?r[t[a][n]]=e[n]:Z(r[t[a][n]]===e[n],()=>"Expected dimension ".concat(r[t[a][n]]," at axis ").concat(n," ")+"of input shaped ".concat(JSON.stringify(e),", ")+"but got dimension ".concat(e[n]))}}function Km(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let o=0;o<a;++o)r.push([]);const s=[];for(let o=0;o<n.length;++o){const e=jm(t,n[o]);for(const t of e)-1===s.indexOf(t)&&(r[o].push(t),s.push(t))}return{path:n,steps:r}}function Hm(e){return e.every((e,t)=>e===t)}function jm(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function Jm(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=[];if("number"===typeof t)Z(e.shape[n]%t===0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{Z(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const a=t.indexOf(-1);if(-1!==a){const r=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[n]-r}Z(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function Qm(e){return"Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ".concat(e)}function Ym(e,t){return"indices(".concat(e,", 0) is invalid: ").concat(t," < 0")}function Zm(e,t,n){return"indices(".concat(e,", 0) is invalid: ").concat(t," >= ").concat(n)}function Xm(e,t){return"only one output dimension may be -1, not both ".concat(e," and ").concat(t)}function $m(e,t){return"size ".concat(e," must be non-negative, not ").concat(t)}function ef(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function tf(e,t){const n=te(e),r=te(t);return"Input to reshape is a SparseTensor with ".concat(n,"\n  dense values, but the requested shape requires a multiple of ").concat(r,". inputShape=").concat(e," outputShape= ").concat(t)}function nf(e,t){const n=te(e),r=te(t);return"Input to reshape is a tensor with ".concat(n," dense values, but the requested shape has ").concat(r,". inputShape=").concat(e," outputShape=").concat(t)}function rf(){return"segment ids must be >= 0"}function af(){return"segment ids are not increasing"}function sf(e,t){return"Segment id ".concat(e," out of range [0, ").concat(t,"), possibly because segmentIds input is not sorted.")}function of(e,t,n){return"Bad: indices[".concat(e,"] == ").concat(t," out of range [0, ").concat(n,")")}function cf(e,t){let n,r=!1;for(e<=mm?(n=e,r=!0):n=Ee(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Ee(e,n+1);return n}function lf(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function uf(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error("Expect batchDims in the range of [-".concat(a,", ").concat(a,"], but got ").concat(r));if(r<0&&(r+=a),r>s)throw new Error("batchDims (".concat(r,") must be less than rank(x) (\n    ").concat(s,")."));if(n<r)throw new Error("batchDims (".concat(r,") must be less than or equal to axis (").concat(n,")."));for(let p=0;p<r;++p)if(e.shape[p]!==t.shape[p])throw new Error("x.shape[".concat(p,"]: ").concat(e.shape[p]," should be equal to indices.shape[").concat(p,"]: ").concat(t.shape[p],"."));const o=e.shape[n],i=[];let c=1,l=1,u=1;for(let p=0;p<r;++p)i.push(e.shape[p]),c*=e.shape[p];for(let p=r;p<n;p++)i.push(e.shape[p]),l*=e.shape[p];for(let p=r;p<a;p++)i.push(t.shape[p]);for(let p=n+1;p<s;p++)i.push(e.shape[p]),u*=e.shape[p];return{batchSize:c,sliceSize:u,outerSize:l,dimSize:o,outputShape:i}}function pf(e){try{return e.map(e=>Ba(e))}catch(My){throw new Error("Failed to decode encoded string bytes into utf-8, error: ".concat(My))}}function df(e){return e.map(e=>Ca(e))}var hf,mf;Ve().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(hf||(hf={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(mf||(mf={}));const ff={};function gf(e){return ff[e]}function yf(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return bf(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){return t.inputNames.slice(e,o).map(e=>bf(e,n,r,a))}const i=bf(t.inputNames.slice(e)[0],n,r,a),c=i.dataSync();return"number"===s.type?c[0]:Ae(i.shape,c)}const o=t.attrParams[e];return o&&o.value}function bf(e,t,n,r){const[a,s]=xf(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find(e=>!!t[vf(a,e)]);return void 0!==o?t[vf(a,o)][s]:void 0}function wf(e,t){const[n,r,a]=xf(e);return[vf(n,t&&t.currentContextId),r,a]}function vf(e,t){return t?"".concat(e,"-").concat(t):e}function xf(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function Nf(e,t,n){let r=yf("pad",e,t,n);if("explicit"===r){r=yf("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function Sf(e){return e.kept?e:Ro(e)}const kf=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Tf=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Ef=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],_f=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],If=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Af=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Mf=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Df=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Of=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],Rf=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],Ff=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Cf=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],Bf=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Lf=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Pf=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],zf=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Vf=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Wf=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Uf=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Gf{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[v,x,N,S,k,T,E,_,I,A,M,D,O,R,F,C,B,L,P].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e.node,r=[],a=[],s=[],o=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e),{});let i=[];const c=[];let l={},u={};null!=t&&(l=this.mapSignatureEntries(t.inputs),u=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach(e=>{const t=o[e];t.inputNames.forEach((e,n)=>{const[r,,a]=wf(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a="".concat(r,":").concat(e);t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)})}),0===Object.keys(u).length?p.forEach(e=>{const t=o[e];0===t.children.length&&c.push(t)}):Object.keys(u).forEach(e=>{const[t]=wf(e),n=o[t];null!=n&&(n.signatureKey=u[e],c.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(e=>{const[t]=wf(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))}):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const h={nodes:o,inputs:i,outputs:c,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=gf(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=Kf(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Kf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=tg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=tg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=jf(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=jf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=eg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=eg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=Hf(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Hf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=rg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=rg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=$f(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=$f(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=ng(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ng(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=Yf(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Yf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=Zf(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Zf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=Qf(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Qf(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: ".concat(n.type," for op: ").concat(e.op))}return t[n.name]={value:a,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const a=[],s=[];e.signature.inputArg.forEach(e=>{const[t]=wf(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Jf(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n});Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach((e,n)=>{const[a,,s]=wf(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r="".concat(a,":").concat(e);t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=wf(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))});const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function qf(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Ve().global;if("undefined"!==typeof t.atob)return t.atob(e);if("undefined"!==typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Kf(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=e[t];return null!=a?qf(a.s,r):n}function Hf(e,t,n){const r=e[t];return r?r.b:n}function jf(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"===typeof a?a:parseInt(a,10)}function Jf(e){switch("string"===typeof e&&(e=hf[e]),e){case hf.DT_FLOAT:case hf.DT_HALF:return"float32";case hf.DT_INT32:case hf.DT_INT64:case hf.DT_INT8:case hf.DT_UINT8:return"int32";case hf.DT_BOOL:return"bool";case hf.DT_DOUBLE:return"float32";case hf.DT_STRING:return"string";default:return null}}function Qf(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Yf(e,t,n){const r=e[t];return r&&r.type?Jf(r.type):n}function Zf(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>Jf(e)):n}function Xf(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"===typeof e.size?e.size:parseInt(e.size,10)):[]}function $f(e,t,n){const r=e[t];return r&&r.shape?Xf(r.shape):n}function eg(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"===typeof e?e:parseInt(e,10)):n}function tg(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>qf(e,r)):n}function ng(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>Xf(e)):n}function rg(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class ag{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return bf(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return bf(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return jf(this.node.rawAttrs,e,t);if(null!=n.s)return Kf(this.node.rawAttrs,e,t);if(null!=n.b)return Hf(this.node.rawAttrs,e,t);if(null!=n.shape)return $f(this.node.rawAttrs,e,t);if(null!=n.type)return Yf(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return eg(this.node.rawAttrs,e,t);if(null!=n.list.s)return tg(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ng(this.node.rawAttrs,e,t);if(null!=n.list.b)return rg(this.node.rawAttrs,e,t);if(null!=n.list.type)return Zf(this.node.rawAttrs,e,t)}return t}}function sg(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if("number"!==typeof e&&"number"!==typeof t){Z(e.length===t.length,()=>n+" Shapes ".concat(e," and ").concat(t," must match"));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];Z(a<0||s<0||a===s,()=>n+" Shapes ".concat(e," and ").concat(t," must match"))}}}function og(e){return"number"!==typeof e&&!e.some(e=>e<0)}function ig(e,t,n){let r=cg(e,n);const a=!og(r);if(a&&0===t.length)throw new Error("Tried to calculate elements of an empty list"+" with non-fully-defined elementShape: ".concat(r));if(a&&t.forEach(e=>{r=cg(e.shape,r)}),!og(r))throw new Error("Non-fully-defined elementShape: ".concat(r));return r}function cg(e,t){if("number"===typeof e)return t;if("number"===typeof t)return e;if(e.length!==t.length)throw new Error("Incompatible ranks during merge: ".concat(e," vs. ").concat(t));const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error("Incompatible shape during merge: ".concat(e," vs. ").concat(t));n[r]=a>=0?a:s}return n}class lg{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=Vc(0),hi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(e<0||e>=this.size())throw new Error("Tried to read from index ".concat(e,", but array size is: ").concat(this.size()));const t=this.tensors[e];if(t.cleared)throw new Error("TensorArray ".concat(this.name,": Could not read index ").concat(e," twice because it was cleared after a previous read ")+"(perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error("Tried to write to index ".concat(e,", but array is not resizeable and size is: ").concat(this.maxSize));const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,",\n          because the value dtype is ").concat(t.dtype,", but TensorArray dtype is ").concat(this.dtype,"."));if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),sg(this.elementShape,t.shape,"TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,".")),n.read)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,", because it has already been read."));if(n.written)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,", because it has already been written."));n.tensor=t,hi(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error("TensorArray ".concat(this.name,": could not write multiple tensors,")+"because the index size: ".concat(e.length," is not the same as tensors size: ").concat(t.length,"."));e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but gather requested dtype ").concat(t));if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ms([],[0].concat(this.elementShape));const n=this.readMany(e);return sg(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),wd(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but concat requested dtype ").concat(e));if(0===this.size())return Ms([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return sg(this.elementShape,n[0].shape,"TensorArray shape mismatch: tensor array shape (".concat(this.elementShape,") vs first tensor shape (").concat(n[0].shape,")")),Ml(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(t.dtype));if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(e.length," vs. ").concat(t.shape[0]));const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size (".concat(n,"  vs. ").concat(this.maxSize,")"));this.writeMany(e,Od(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(t.dtype));let n=0;const r=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(n,", and tensor's shape is: ").concat(t.shape));if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths (".concat(this.maxSize," vs. ").concat(e.length,"), ")+"and the TensorArray is not marked as dynamically resizeable");const a=0===n?0:t.size/n,s=[];pi(()=>{t=_l(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=_l(Ol(t,o,i),this.elementShape)}return s});const o=[];for(let i=0;i<e.length;i++)o[i]=i;this.writeMany(o,s)}}class ug{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error("Invalid data types; op elements ".concat(n,", but list elements ").concat(e.dtype));sg(t,e.shape,"TensorList shape mismatch: "),hi(e)}),this.idTensor=Vc(0),this.maxNumElements=r,hi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ug([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));if(-1!==n&&this.tensors.length!==n)throw new Error("Operation expected a list with ".concat(n," elements but got a list with ").concat(this.tensors.length," elements."));sg(e,this.elementShape,"TensorList shape mismatch: ");const r=ig(this.elementShape,this.tensors,e);return pi(()=>{const e=this.tensors.map(e=>_l(e,r));return wd(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ig(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,sg(r.shape,e,"TensorList shape mismatch: "),_l(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e.dtype,", but list elements ").concat(this.elementDtype));if(sg(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");hi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: ".concat(e));if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error("TensorListResize input size ".concat(e," is greater maxNumElement ").concat(this.maxNumElements,"."));const t=new ug([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(n,", but list elements ").concat(this.elementDtype));if(e<0||e>this.tensors.length)throw new Error("Trying to access element ".concat(e," in a list with ").concat(this.tensors.length," elements."));if(null==this.tensors[e])throw new Error("element at index ".concat(e," is null."));sg(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=ig(this.elementShape,this.tensors,t);return _l(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t.dtype,", but list elements ").concat(this.elementDtype));if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error("Trying to set element ".concat(e," in a list with max ").concat(this.maxNumElements," elements."));sg(this.elementShape,t.shape,"TensorList shape mismatch: "),hi(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));sg(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=ig(this.elementShape,this.tensors,n);return 0===e.length?Ms([],[0].concat(r)):pi(()=>{const t=e.map(e=>_l(this.tensors[e],r));return wd(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error("TensorList dtype is ".concat(this.elementDtype," but concat requested dtype ").concat(e));sg(this.elementShape,t,"TensorList shape mismatch: ");const n=ig(this.elementShape,this.tensors,t);return 0===this.size()?Ms([],[0].concat(n)):pi(()=>{const e=this.tensors.map(e=>_l(e,n));return Ml(e,0)})}}const pg=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=yf("thenBranch",e,t,n),a=yf("elseBranch",e,t,n),s=yf("cond",e,t,n),o=yf("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=yf("body",e,t,n),a=yf("cond",e,t,n),s=yf("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map(e=>e.id);let c=await o[0].data();o.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()});let l=s;for(;c[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map(e=>e.id);e.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);c=await s[0].data(),s.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return l}case"LoopCond":return[Sf(yf("pred",e,t,n))];case"Switch":{const r=yf("pred",e,t,n);let a=yf("data",e,t,n);return a.kept||(a=Sf(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==bf(e,t,n));if(r){return[Sf(bf(r,t,n))]}return}case"Enter":{const r=yf("frameName",e,t,n),a=yf("tensor",e,t,n);return n.enterFrame(r),[Sf(a)]}case"Exit":{const r=yf("tensor",e,t,n);return n.exitFrame(),[Sf(r)]}case"NextIteration":{const r=yf("tensor",e,t,n);return n.nextIteration(),[Sf(r)]}case"TensorArrayV3":{const r=yf("size",e,t,n),a=yf("dtype",e,t,n),s=yf("elementShape",e,t,n),o=yf("dynamicSize",e,t,n),i=yf("clearAfterRead",e,t,n),c=yf("identicalElementShapes",e,t,n),l=yf("name",e,t,n),u=new lg(l,a,r,s,c,o,i);return n.addTensorArray(u),[u.idTensor,Vc(1)]}case"TensorArrayWriteV3":{const r=yf("tensorArrayId",e,t,n),a=yf("index",e,t,n),s=yf("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=yf("tensorArrayId",e,t,n),a=yf("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=yf("tensorArrayId",e,t,n),a=yf("indices",e,t,n),s=yf("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=yf("tensorArrayId",e,t,n),a=yf("indices",e,t,n),s=yf("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=yf("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=yf("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=yf("tensorArrayId",e,t,n),a=yf("tensor",e,t,n),s=yf("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=yf("tensorArrayId",e,t,n);return[Vc(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=yf("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=yf("tensorListId",e,t,n),a=yf("index",e,t,n),s=yf("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=yf("tensorListId",e,t,n),a=yf("index",e,t,n),s=yf("elementShape",e,t,n),o=yf("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=yf("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(t.length," vs. ").concat(e.shape[0]));const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error("Max index must be < array size (".concat(a,"  vs. ").concat(r,")"));const s=new ug([],n,e.dtype,r),o=Od(e,0);return t.forEach((e,t)=>{s.setItem(e,o[t])}),s}(yf("tensor",e,t,n),r,yf("elementShape",e,t,n),yf("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=yf("elementShape",e,t,n),a=yf("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=yf(s,e,t,n),i=function(e,t,n,r){return new ug([],e,t,r)}(r,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=yf("tensorListId",e,t,n),a=yf("indices",e,t,n),s=yf("elementShape",e,t,n),o=yf("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=yf("tensorListId",e,t,n),a=yf("elementShape",e,t,n),s=yf("elementDType",e,t,n),o=yf("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: ".concat(e.shape));if(e.dtype!==n)throw new Error("Invalid data types; op elements ".concat(e.dtype,", but list elements ").concat(n));sg(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=Od(e);return new ug(a,t,r)}(yf("tensor",e,t,n),yf("elementShape",e,t,n),yf("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=yf("tensorListId",e,t,n),a=n.getTensorList(r.id),s=yf("dtype",e,t,n),o=yf("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=yf("tensorListId",e,t,n),a=yf("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=yf("tensorListId",e,t,n),a=yf("elementShape",e,t,n),s=yf("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=yf("tensor",e,t,n),a=yf("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map(e=>(r+=e,r));if(r!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(r,", and tensor's shape is: ").concat(e.shape));const s=cg(e.shape.slice(1),n),o=0===r?0:e.size/r,i=pi(()=>{const n=[];e=_l(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],c=[1,t[r],o];n[r]=_l(Ol(e,i,c),s)}return e.dispose(),n}),c=new ug([],n,e.dtype,t.length);for(let l=0;l<i.length;l++)c.setItem(l,i[l]);return c}(r,yf("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=yf("tensorListId",e,t,n);return[Vc(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=yf("tensorListId",e,t,n),a=yf("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}};function dg(e,t,n){const[r,a]=yf("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,c="fusedbatchnorm"===r,l=yf("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(c)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=yf("strides",e,t,n),p=Nf(e,t,n),d=yf("dataFormat",e,t,n).toUpperCase(),h=yf("dilations",e,t,n);let[m,f]=yf("args",e,t,n);o&&(f=m,m=void 0);return{stride:u,pad:p,dataFormat:d,dilations:h,biasArg:m,preluArg:f,activationFunc:a,leakyreluAlpha:yf("leakyreluAlpha",e,t,n)}}function hg(e,t,n){return{boxes:yf("boxes",e,t,n),scores:yf("scores",e,t,n),maxOutputSize:yf("maxOutputSize",e,t,n),iouThreshold:yf("iouThreshold",e,t,n),scoreThreshold:yf("scoreThreshold",e,t,n),softNmsSigma:yf("softNmsSigma",e,t,n)}}class mg{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Vc(0),this.tensorMap=new Map,hi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Vc(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),pi(()=>{const e=Od(t),r=n.length,a=e.length;Z(r===a,()=>"The number of elements doesn't match, keys has "+"".concat(r," elements, the values has ").concat(a," ")+"elements.");for(let t=0;t<r;t++){const r=n[t],a=e[t];hi(a),this.tensorMap.set(r,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return pi(()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return wd(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error("Expect key dtype ".concat(this.keyDType,", but got ")+"".concat(e.dtype));if(t.dtype!==this.valueDType)throw new Error("Expect value dtype ".concat(this.valueDType,", but got ")+"".concat(t.dtype))}}function fg(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:pi;const s=((e,t,n)=>{switch(e.category){case"arithmetic":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(yf("a",e,t,n),yf("b",e,t,n))];case"AddN":return[r.addN(yf("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(yf("a",e,t,n),yf("b",e,t,n))];case"Mul":return[r.mul(yf("a",e,t,n),yf("b",e,t,n))];case"RealDiv":case"Div":return[r.div(yf("a",e,t,n),yf("b",e,t,n))];case"DivNoNan":return[r.divNoNan(yf("a",e,t,n),yf("b",e,t,n))];case"FloorDiv":return[r.floorDiv(yf("a",e,t,n),yf("b",e,t,n))];case"Sub":return[r.sub(yf("a",e,t,n),yf("b",e,t,n))];case"Minimum":return[r.minimum(yf("a",e,t,n),yf("b",e,t,n))];case"Maximum":return[r.maximum(yf("a",e,t,n),yf("b",e,t,n))];case"Pow":return[r.pow(yf("a",e,t,n),yf("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(yf("a",e,t,n),yf("b",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"basic_math":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(yf("x",e,t,n))];case"Acos":return[r.acos(yf("x",e,t,n))];case"Acosh":return[r.acosh(yf("x",e,t,n))];case"Asin":return[r.asin(yf("x",e,t,n))];case"Asinh":return[r.asinh(yf("x",e,t,n))];case"Atan":return[r.atan(yf("x",e,t,n))];case"Atan2":return[r.atan2(yf("x",e,t,n),yf("y",e,t,n))];case"Atanh":return[r.atanh(yf("x",e,t,n))];case"Ceil":return[r.ceil(yf("x",e,t,n))];case"Complex":return[r.complex(yf("real",e,t,n),yf("imag",e,t,n))];case"Cos":return[r.cos(yf("x",e,t,n))];case"Cosh":return[r.cosh(yf("x",e,t,n))];case"Elu":return[r.elu(yf("x",e,t,n))];case"Erf":return[r.erf(yf("x",e,t,n))];case"Exp":return[r.exp(yf("x",e,t,n))];case"Expm1":return[r.expm1(yf("x",e,t,n))];case"Floor":return[r.floor(yf("x",e,t,n))];case"Log":return[r.log(yf("x",e,t,n))];case"Log1p":return[r.log1p(yf("x",e,t,n))];case"Imag":return[r.imag(yf("x",e,t,n))];case"Neg":return[r.neg(yf("x",e,t,n))];case"Reciprocal":return[r.reciprocal(yf("x",e,t,n))];case"Real":return[r.real(yf("x",e,t,n))];case"Relu":return[r.relu(yf("x",e,t,n))];case"Round":return[r.round(yf("x",e,t,n))];case"Selu":return[r.selu(yf("x",e,t,n))];case"Sigmoid":return[r.sigmoid(yf("x",e,t,n))];case"Sin":return[r.sin(yf("x",e,t,n))];case"Sign":return[r.sign(yf("x",e,t,n))];case"Sinh":return[r.sinh(yf("x",e,t,n))];case"Softplus":return[r.softplus(yf("x",e,t,n))];case"Sqrt":return[r.sqrt(yf("x",e,t,n))];case"Square":return[r.square(yf("x",e,t,n))];case"Tanh":return[r.tanh(yf("x",e,t,n))];case"Tan":return[r.tan(yf("x",e,t,n))];case"ClipByValue":return[r.clipByValue(yf("x",e,t,n),yf("clipValueMin",e,t,n),yf("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(yf("x",e,t,n))];case"Rsqrt":return[r.rsqrt(bf(e.inputNames[0],t,n))];case"Prod":return[r.prod(yf("x",e,t,n),yf("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(yf("x",e,t,n),yf("alpha",e,t,n))];case"Prelu":return[r.prelu(yf("x",e,t,n),yf("alpha",e,t,n))];case"IsNan":return[r.isNaN(bf(e.inputNames[0],t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"control":return pg(e,t,n);case"convolution":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Conv1D":{const a=yf("stride",e,t,n),s=yf("pad",e,t,n),o=yf("dataFormat",e,t,n).toUpperCase(),i=yf("dilation",e,t,n);return[r.conv1d(yf("x",e,t,n),yf("filter",e,t,n),a,s,o,i)]}case"Conv2D":{const a=yf("strides",e,t,n),s=Nf(e,t,n),o=yf("dataFormat",e,t,n).toUpperCase(),i=yf("dilations",e,t,n);return[r.conv2d(yf("x",e,t,n),yf("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:c,preluArg:l,activationFunc:u,leakyreluAlpha:p}=dg(e,t,n);return[r.fused.conv2d({x:yf("x",e,t,n),filter:yf("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:c,activation:u,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:c,preluArg:l,activationFunc:u,leakyreluAlpha:p}=dg(e,t,n);return[r.fused.depthwiseConv2d({x:yf("x",e,t,n),filter:yf("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:c,activation:u,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=yf("outputShape",e,t,n),s=yf("strides",e,t,n),o=Nf(e,t,n);return[r.conv2dTranspose(yf("x",e,t,n),yf("filter",e,t,n),a,[s[1],s[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=yf("strides",e,t,n),s=Nf(e,t,n),o=yf("dilations",e,t,n),i=yf("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(yf("input",e,t,n),yf("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"Conv3D":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("dataFormat",e,t,n).toUpperCase(),i=yf("dilations",e,t,n);return[r.conv3d(yf("x",e,t,n),yf("filter",e,t,n),[a[1],a[2],a[3]],s,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("kernelSize",e,t,n);return[r.avgPool(yf("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("kernelSize",e,t,n);return[r.maxPool(yf("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("kernelSize",e,t,n),i=yf("includeBatchInIndex",e,t,n),{result:c,indexes:l}=r.maxPoolWithArgmax(yf("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s,i);return[c,l]}case"AvgPool3D":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("kernelSize",e,t,n);return[r.avgPool3d(yf("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("kernelSize",e,t,n);return[r.maxPool3d(yf("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=yf("strides",e,t,n),s=yf("pad",e,t,n),o=yf("dilations",e,t,n),i=a[1],c=a[2],l=o[1],u=o[2];return[r.dilation2d(yf("x",e,t,n),yf("filter",e,t,n),[i,c],s,[l,u],"NHWC")]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"creation":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Fill":{const a=yf("shape",e,t,n),s=yf("dtype",e,t,n),o=yf("value",e,t,n);return[r.fill(a,o,s)]}case"LinSpace":{const a=yf("start",e,t,n),s=yf("stop",e,t,n),o=yf("num",e,t,n);return[r.linspace(a,s,o)]}case"Multinomial":{const a=yf("logits",e,t,n),s=yf("numSamples",e,t,n),o=yf("seed",e,t,n);return[r.multinomial(a,s,o)]}case"OneHot":{const a=yf("indices",e,t,n),s=yf("depth",e,t,n),o=yf("onValue",e,t,n),i=yf("offValue",e,t,n),c=yf("dtype",e,t,n);return[r.oneHot(a,s,o,i,c)]}case"Ones":return[r.ones(yf("shape",e,t,n),yf("dtype",e,t,n))];case"OnesLike":return[r.onesLike(yf("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(yf("shape",e,t,n),yf("dtype",e,t,n),yf("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(yf("shape",e,t,n),yf("minval",e,t,n),yf("maxval",e,t,n),yf("dtype",e,t,n))];case"Range":{const a=yf("start",e,t,n),s=yf("stop",e,t,n),o=yf("step",e,t,n);return[r.range(a,s,o,yf("dtype",e,t,n))]}case"TruncatedNormal":{const a=yf("shape",e,t,n),s=yf("mean",e,t,n),o=yf("stdDev",e,t,n),i=yf("seed",e,t,n);return[r.truncatedNormal(a,s,o,yf("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(yf("shape",e,t,n),yf("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(yf("x",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"dynamic":return async function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:z;switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:c,softNmsSigma:l}=hg(e,t,n),u=await a.image.nonMaxSuppressionWithScoreAsync(r,s,o,i,c,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=hg(e,t,n),l=yf("padToMaxOutputSize",e,t,n),u=await a.image.nonMaxSuppressionPaddedAsync(r,s,o,i,c,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=hg(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,o,i,c)]}case"Where":{const r=a.cast(yf("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(yf("x",e,t,n),yf("y",e,t,n));default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n);case"evaluation":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"LowerBound":{const a=yf("sortedSequence",e,t,n),s=yf("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=yf("x",e,t,n),s=yf("k",e,t,n),o=yf("sorted",e,t,n),i=r.topk(a,s,o);return[i.values,i.indices]}case"UpperBound":{const a=yf("sortedSequence",e,t,n),s=yf("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{const a=yf("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=yf("x",e,t,n),s=yf("axis",e,t,n),o=r.unique(a,s);return[o.values,o.indices]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"image":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"ResizeBilinear":{const a=yf("images",e,t,n),s=yf("size",e,t,n),o=yf("alignCorners",e,t,n),i=yf("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],o,i)]}case"ResizeNearestNeighbor":{const a=yf("images",e,t,n),s=yf("size",e,t,n),o=yf("alignCorners",e,t,n),i=yf("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],o,i)]}case"CropAndResize":{const a=yf("image",e,t,n),s=yf("boxes",e,t,n),o=yf("boxInd",e,t,n),i=yf("cropSize",e,t,n),c=yf("method",e,t,n),l=yf("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,o,i,c,l)]}case"ImageProjectiveTransformV3":{const a=yf("images",e,t,n),s=yf("transforms",e,t,n),o=yf("outputShape",e,t,n),i=yf("fillValue",e,t,n),c=yf("interpolation",e,t,n),l=yf("fillMode",e,t,n);return[r.image.transform(a,s,c.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"graph":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=yf("default",e,t,n);return[bf(e.name,t,n)||a];case"Placeholder":return[bf(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Sf(yf("x",e,t,n))];case"IdentityN":return yf("x",e,t,n).map(e=>Sf(e));case"Shape":return[r.tensor1d(yf("x",e,t,n).shape,"int32")];case"ShapeN":return yf("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(yf("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(yf("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=yf("x",e,t,n),o=yf("data",e,t,n),i=yf("message",e,t,n),c=yf("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,c));return[s];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"logical":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Equal":return[r.equal(yf("a",e,t,n),yf("b",e,t,n))];case"NotEqual":return[r.notEqual(yf("a",e,t,n),yf("b",e,t,n))];case"Greater":return[r.greater(yf("a",e,t,n),yf("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(yf("a",e,t,n),yf("b",e,t,n))];case"Less":return[r.less(yf("a",e,t,n),yf("b",e,t,n))];case"LessEqual":return[r.lessEqual(yf("a",e,t,n),yf("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(yf("a",e,t,n),yf("b",e,t,n))];case"LogicalNot":return[r.logicalNot(yf("a",e,t,n))];case"LogicalOr":return[r.logicalOr(yf("a",e,t,n),yf("b",e,t,n))];case"Select":case"SelectV2":return[r.where(yf("condition",e,t,n),yf("a",e,t,n),yf("b",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"matrices":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(yf("a",e,t,n),yf("b",e,t,n),yf("transposeA",e,t,n),yf("transposeB",e,t,n))];case"Einsum":return[r.einsum(yf("equation",e,t,n),...yf("tensors",e,t,n))];case"Transpose":return[r.transpose(yf("x",e,t,n),yf("perm",e,t,n))];case"_FusedMatMul":const[a,s]=yf("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===s,c=yf("numArgs",e,t,n),l=yf("leakyreluAlpha",e,t,n);if(o){if(i&&2!==c)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==c)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,p]=yf("args",e,t,n);return[r.fused.matMul({a:yf("a",e,t,n),b:yf("b",e,t,n),transposeA:yf("transposeA",e,t,n),transposeB:yf("transposeB",e,t,n),bias:u,activation:s,preluActivationWeights:p,leakyreluAlpha:l})];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"normalization":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(yf("x",e,t,n),yf("axis",e,t,n),yf("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(yf("x",e,t,n),yf("mean",e,t,n),yf("variance",e,t,n),yf("offset",e,t,n),yf("scale",e,t,n),yf("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(yf("x",e,t,n),yf("radius",e,t,n),yf("bias",e,t,n),yf("alpha",e,t,n),yf("beta",e,t,n))];case"Softmax":return[r.softmax(yf("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(yf("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(yf("sparseIndices",e,t,n),yf("outputShape",e,t,n),yf("sparseValues",e,t,n),yf("defaultValue",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"reduction":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Max":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.max(yf("x",e,t,n),a,s)]}case"Mean":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.mean(yf("x",e,t,n),a,s)]}case"Min":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.min(yf("x",e,t,n),a,s)]}case"Sum":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.sum(yf("x",e,t,n),a,s)]}case"All":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.all(yf("x",e,t,n),a,s)]}case"Any":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.any(yf("x",e,t,n),a,s)]}case"ArgMax":{const a=yf("axis",e,t,n);return[r.argMax(yf("x",e,t,n),a)]}case"ArgMin":{const a=yf("axis",e,t,n);return[r.argMin(yf("x",e,t,n),a)]}case"Prod":{const a=yf("axis",e,t,n),s=yf("keepDims",e,t,n);return[r.prod(yf("x",e,t,n),a,s)]}case"Cumprod":{const a=yf("axis",e,t,n),s=yf("exclusive",e,t,n),o=yf("reverse",e,t,n);return[r.cumprod(yf("x",e,t,n),a,s,o)]}case"Cumsum":{const a=yf("axis",e,t,n),s=yf("exclusive",e,t,n),o=yf("reverse",e,t,n);return[r.cumsum(yf("x",e,t,n),a,s,o)]}case"Bincount":const a=yf("x",e,t,n),s=yf("weights",e,t,n),o=yf("size",e,t,n);return[r.bincount(a,s,o)];case"DenseBincount":{const a=yf("x",e,t,n),s=yf("weights",e,t,n),o=yf("size",e,t,n),i=yf("binaryOutput",e,t,n);return[r.denseBincount(a,s,o,i)]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"slice_join":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"ConcatV2":case"Concat":{const a=yf("n",e,t,n),s=yf("axis",e,t,n);let o=yf("tensors",e,t,n);return o=o.slice(0,a),[r.concat(o,s)]}case"Gather":{const a=yf("x",e,t,n),s=yf("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=yf("axis",e,t,n),s=yf("batchDims",e,t,n),o=yf("x",e,t,n),i=yf("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),a,s)]}case"Reverse":{const a=yf("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);const o=yf("x",e,t,n);return[r.reverse(o,s)]}case"ReverseV2":{const a=yf("axis",e,t,n),s=yf("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{const a=yf("begin",e,t,n),s=yf("size",e,t,n);return[r.slice(yf("x",e,t,n),a,s)]}case"StridedSlice":{const a=yf("begin",e,t,n),s=yf("end",e,t,n),o=yf("strides",e,t,n),i=yf("beginMask",e,t,n),c=yf("endMask",e,t,n),l=yf("ellipsisMask",e,t,n),u=yf("newAxisMask",e,t,n),p=yf("shrinkAxisMask",e,t,n),d=yf("x",e,t,n);return[r.stridedSlice(d,a,s,o,i,c,l,u,p)]}case"Pack":return pi(()=>{const a=yf("axis",e,t,n),s=yf("tensors",e,t,n),o=s[0].shape,i=r.squeeze(s[0]).shape,c=s.map(e=>{const t=re(e.shape,o);if(!t&&!re(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)});return[r.stack(c,a)]});case"Unpack":{const a=yf("axis",e,t,n),s=yf("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{const a=yf("reps",e,t,n);return[r.tile(yf("x",e,t,n),a)]}case"Split":case"SplitV":{const a=yf("axis",e,t,n),s=yf("numOrSizeSplits",e,t,n),o=yf("x",e,t,n);return r.split(o,s,a)}case"ScatterNd":{const a=yf("indices",e,t,n),s=yf("values",e,t,n),o=yf("shape",e,t,n);return[r.scatterND(a,s,o)]}case"GatherNd":{const a=yf("x",e,t,n),s=yf("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=yf("sparseIndices",e,t,n),s=yf("outputShape",e,t,n),o=yf("sparseValues",e,t,n),i=yf("defaultValue",e,t,n);return[r.sparseToDense(a,o,s,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"sparse":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(yf("indices",e,t,n),yf("values",e,t,n),yf("denseShape",e,t,n),yf("defaultValue",e,t,n));return[a,s,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(yf("inputIndices",e,t,n),yf("inputShape",e,t,n),yf("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(yf("data",e,t,n),yf("indices",e,t,n),yf("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(yf("data",e,t,n),yf("indices",e,t,n),yf("segmentIds",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"spectral":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"FFT":return[r.fft(yf("x",e,t,n))];case"IFFT":return[r.ifft(yf("x",e,t,n))];case"RFFT":return[r.rfft(yf("x",e,t,n))];case"IRFFT":return[r.irfft(yf("x",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"string":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(yf("data",e,t,n),yf("dataSplits",e,t,n),yf("separator",e,t,n),yf("nGramWidths",e,t,n),yf("leftPad",e,t,n),yf("rightPad",e,t,n),yf("padWidth",e,t,n),yf("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:o}=r.string.stringSplit(yf("input",e,t,n),yf("delimiter",e,t,n),yf("skipEmpty",e,t,n));return[a,s,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(yf("input",e,t,n),yf("numBuckets",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"transformation":return a(()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:z;switch(e.op){case"Cast":return[r.cast(yf("x",e,t,n),yf("dtype",e,t,n))];case"ExpandDims":{const a=yf("axis",e,t,n);return[r.expandDims(yf("x",e,t,n),a)]}case"Squeeze":{const a=yf("axis",e,t,n);return[r.squeeze(yf("x",e,t,n),a)]}case"Reshape":return[r.reshape(yf("x",e,t,n),yf("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(yf("x",e,t,n),yf("padding",e,t,n),yf("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(yf("x",e,t,n),yf("padding",e,t,n),yf("constantValue",e,t,n))];case"SpaceToBatchND":{const a=yf("blockShape",e,t,n),s=yf("paddings",e,t,n);return[r.spaceToBatchND(yf("x",e,t,n),a,s)]}case"BatchToSpaceND":{const a=yf("blockShape",e,t,n),s=yf("crops",e,t,n);return[r.batchToSpaceND(yf("x",e,t,n),a,s)]}case"DepthToSpace":{const a=yf("blockSize",e,t,n),s=yf("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(yf("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(yf("x",e,t,n),yf("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(yf("s0",e,t,n),yf("s1",e,t,n))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,n));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=yf("keyDType",e,t,n),s=yf("valueDType",e,t,n),o=new mg(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=yf("tableHandle",e,t,n,r),s=yf("keys",e,t,n),o=yf("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=yf("tableHandle",e,t,n,r),s=yf("keys",e,t,n),o=yf("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=yf("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError("Node type ".concat(e.op," is not implemented"))}})(e,t,n,r);case"custom":const s=gf(e.op);if(s&&s.customExecutor)return s.customExecutor(new ag(e,t,n));throw TypeError("Custom op ".concat(e.op," is not registered."));default:throw TypeError("Unknown op '".concat(e.op,"'. File an issue at ")+"https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}})(e,t,n);return Be(s)?s.then(e=>[].concat(e)):[].concat(s)}class gg{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":"".concat(e.frameName,"-").concat(e.iterationId)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function yg(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const c=new Set,l=Object.keys(e).map(e=>xf(e)[0]);let u=[];null!=r&&(u=r.map(e=>xf(e.name)[0]));const p=[...t];for(;p.length>0;){const e=p.pop();(xg(e)||Ng(e)||Sg(e))&&null==o&&(o=e,i=o.children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===u.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{c.has(e.name)||(c.add(e.name),p.push(e))}):s.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const bg=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],wg=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],vg=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function xg(e){return bg.indexOf(e.op)>=0}function Ng(e){return wg.indexOf(e.op)>=0}function Sg(e){return vg.indexOf(e.op)>=0}class kg{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new kg(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?"".concat(t,":").concat(e.defaultOutput):t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=yg(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error("This execution contains the node '".concat(a.name,"', which has ")+"the dynamic op '".concat(a.op,"'. Please use ")+"model.executeAsync() instead. Alternatively, to avoid the "+"dynamic ops, specify the inputs [".concat(s,"]"));if(r.length>0){const n=t.map(e=>e.name),a=Object.keys(e);throw new Error("Cannot compute the outputs [".concat(n,"] from the provided inputs ")+"[".concat(a,"]. Missing the following inputs: [").concat(r,"]"))}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map(e=>xf(e)[0]).map(t=>e.nodes[t]),i=e.initNodes;o.forEach(e=>{r.has(e.name)&&s.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&s.push(e)}),null!=i&&i.forEach(e=>{r.has(e.name)&&s.push(e)});const c=new Set,l=[];for(;s.length>0;){const e=s.pop();c.add(e.name),t[e.name]||l.push(e),e.children.forEach(e=>{!c.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>c.has(e.name))&&s.push(e)})}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map(e=>this.graph.nodes[xf(e)[0]]),a=t.map(e=>xf(e)[0]);let s=a.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const c={},l={};return pi(()=>{const n=new gg(this.weightMap,c,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,a]=xf(t),s=[];s[a]=e[t],r[n]=s});const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=fg(t,r,n,this._resourceManager);if(Be(e))throw new Error("The execution of the op '".concat(t.op,"' returned a promise. ")+"Please use model.executeAsync() instead.");r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map(e=>bf(e,r,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const s=function(e,t,n){return t[vf(e,n.currentContextId)]}(e.name,n,r);null!=s&&s.forEach(e=>{if(e&&!e.kept&&!a.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=wf(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=Ve().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(l){console.warn(l.message)}this.resetIntermediateTensors();const s=new gg(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);const o=t.map(e=>bf(e,this.tensorsMap,s)),i=o.map(e=>e.id),c=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...i,...c,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map(e=>this.graph.nodes[xf(e)[0]]),o=n.map(e=>xf(e)[0]);let i=o.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const{usedNodes:c,missingInputs:l,dynamicNode:u,syncInputs:p}=yg(e,i,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),h=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=xf(t),a=[];a[r]=e[t],h[n]=a});const m={},f=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(s,d,t,h,g,f,o,m,c);await Promise.all(e)}null!=u||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter(e=>!xg(e)&&!bf(e.name,h,t)).map(e=>e.name);if(y.length>0){let e="";throw null!=u&&(e="Alternatively, to avoid the dynamic ops, use model.execute() "+"and specify the inputs [".concat(p,"]")),new Error("Cannot compute the outputs [".concat(y,"] from the provided ")+"inputs [".concat(a,"]. Consider providing the following inputs: ")+"[".concat(l,"]. ").concat(e))}return h}processStack(e,t,n,r,a,s,o,i,c){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let u="";if("Enter"===e.node.op&&yf("isConstant",e.node,r,n)&&([u]=wf(e.node.name,n)),null==r[e.node.name]){const p=fg(e.node,r,n,this._resourceManager);u||([u]=wf(e.node.name,n));const d=n.currentContext;Be(p)?l.push(p.then(l=>(r[u]=l,n.currentContext=d,this.checkTensorForDisposal(u,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,c),l))):(r[u]=p,this.checkTensorForDisposal(u,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,c))}else this.processChildNodes(e.node,t,n,r,a,c)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach(e=>{const[o]=wf(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!bf(e,r,n))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!bf(e,r,n))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[r]=xf(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;Z(e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t),()=>"The shape of dict['".concat(a.name,"'] provided in ")+"model.execute(dict) must be [".concat(e,"], but was ")+"[".concat(n.shape,"]"))}a.attrParams.dtype&&a.attrParams.dtype.value&&Z(n.dtype===a.attrParams.dtype.value,()=>"The dtype of dict['".concat(a.name,"'] provided in ")+"model.execute(dict) must be "+"".concat(a.attrParams.dtype.value,", but was ").concat(n.dtype))})}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=xf(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error("The dict provided in model.execute(dict) has "+"keys: [".concat(t,"] that are not part of graph"))}mapOutputs(e){return e.map(e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e},{})}checkOutputs(e){e.forEach(e=>{const[t]=xf(e);if(!this.graph.nodes[t])throw new Error("The output '".concat(e,"' is not found in the graph"))})}}class Tg{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const Eg="?tfjs-format=file",_g="model.json";class Ig{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Tg}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error("Found more than one (".concat(t.length,") load handlers for ")+"URL '".concat([e],"'"));this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Be(e)?e.then(e=>this.loadSync(e)):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version="".concat(t.versions.producer,".").concat(t.versions.minConsumer);const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new kg(Gf.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Gf.Instance.transformGraph(e.modelInitializer);this.initializer=new kg(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"===typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error("Cannot find any save handlers for URL '".concat(e,"'"));if(t.length>1)throw new Error("Found more than one (".concat(t.length,") save handlers for ")+"URL '".concat(e,"'"));e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Qa?[n]:n).forEach((t,n)=>e[this.structuredOutputKeys[n]]=t),e}return n}normalizeInputs(e){if(!(e instanceof Qa)&&!Array.isArray(e))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,"+"the graph model has ".concat(this.inputNodes.length," placeholders, ")+"while there are ".concat(e.length," input tensors."));return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Ag(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"===typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return"".concat(e).concat(_g).concat(Eg)}(e));const r=new Ig(e,t,n);return await r.load(),r}var Mg=function(e,t){return(Mg=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function Dg(e,t){function n(){this.constructor=e}Mg(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Og=function(){return(Og=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function Rg(e,t,n,r){return new(n||(n=Promise))(function(a,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function i(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){e.done?a(e.value):new n(function(t){t(e.value)}).then(o,i)}c((r=r.apply(e,t||[])).next())})}function Fg(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}var Cg=function(){function e(e,t){this.model=e,this.outputStride=t;var n=this.model.inputs[0].shape;Z(-1===n[1]&&-1===n[2],function(){return"Input shape ["+n[1]+", "+n[2]+"] must both be equal to or -1"})}return e.prototype.predict=function(e){var t=this;return pi(function(){var n=t.preprocessInput(Oo(e,"float32")),r=Ru(n,0),a=t.model.predict(r).map(function(e){return bd(e,[0])}),s=t.nameOutputResults(a);return{heatmapScores:Dl(s.heatmap),offsets:s.offsets,displacementFwd:s.displacementFwd,displacementBwd:s.displacementBwd}})},e.prototype.dispose=function(){this.model.dispose()},e}(),Bg=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Dg(t,e),t.prototype.preprocessInput=function(e){return pi(function(){return Hc(Ic(e,127.5),1)})},t.prototype.nameOutputResults=function(e){return{offsets:e[0],heatmap:e[1],displacementFwd:e[2],displacementBwd:e[3]}},t}(Cg);function Lg(e){return Math.floor(e/2)}var Pg=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(Lg(e),e);)this.exchange(e,Lg(e)),e=Lg(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function zg(e,t,n,r,a,s){for(var o=s.shape,i=o[0],c=o[1],l=!0,u=Math.max(n-a,0),p=Math.min(n+a+1,i),d=u;d<p;++d){for(var h=Math.max(r-a,0),m=Math.min(r+a+1,c),f=h;f<m;++f)if(s.get(d,f,e)>t){l=!1;break}if(!l)break}return l}var Vg=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],Wg=Vg.length,Ug=Vg.reduce(function(e,t,n){return e[t]=n,e},{});[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map(function(e){var t=e[0],n=e[1];return[Ug[t],Ug[n]]});function Gg(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+Wg)}}function qg(e,t,n){var r=Gg(e.heatmapY,e.heatmapX,e.id,n),a=r.y,s=r.x;return{x:e.heatmapX*t+s,y:e.heatmapY*t+a}}function Kg(e,t,n){return e<t?t:e>n?n:e}function Hg(e,t){return{x:e.x+t.x,y:e.y+t.y}}var jg=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map(function(e){var t=e[0],n=e[1];return[Ug[t],Ug[n]]}),Jg=jg.map(function(e){return e[1]}),Qg=jg.map(function(e){return e[0]});function Yg(e,t,n,r){return{y:Kg(Math.round(e.y/t),0,n-1),x:Kg(Math.round(e.x/t),0,r-1)}}function Zg(e,t,n,r,a,s,o,i){void 0===i&&(i=2);for(var c=r.shape,l=c[0],u=c[1],p=function(e,t,n){var r=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,r+e)}}(e,Yg(t.position,s,l,u),o),d=Hg(t.position,p),h=0;h<i;h++){var m=Yg(d,s,l,u),f=Gg(m.y,m.x,n,a);d=Hg({x:m.x*s,y:m.y*s},{x:f.x,y:f.y})}var g=Yg(d,s,l,u),y=r.get(g.y,g.x,n);return{position:d,part:Vg[n],score:y}}function Xg(e,t,n,r,a,s){var o=t.shape[2],i=Jg.length,c=new Array(o),l=e.part,u=e.score,p=qg(l,r,n);c[l.id]={score:u,part:Vg[l.id],position:p};for(var d=i-1;d>=0;--d){var h=Jg[d],m=Qg[d];c[h]&&!c[m]&&(c[m]=Zg(d,c[h],m,t,n,r,s))}for(d=0;d<i;++d)h=Qg[d],m=Jg[d],c[h]&&!c[m]&&(c[m]=Zg(d,c[h],m,t,n,r,a));return c}function $g(e,t,n,r){var a=n.x,s=n.y;return e.some(function(e){var n=e.keypoints[r].position;return function(e,t,n,r){var a=n-e,s=r-t;return a*a+s*s}(s,a,n.y,n.x)<=t})}function ey(e,t,n){return n.reduce(function(n,r,a){var s=r.position,o=r.score;return $g(e,t,s,a)||(n+=o),n},0)/n.length}function ty(e,t,n,r,a,s,o,i){void 0===o&&(o=.5),void 0===i&&(i=20);for(var c=[],l=function(e,t,n){for(var r=n.shape,a=r[0],s=r[1],o=r[2],i=new Pg(a*s*o,function(e){return e.score}),c=0;c<a;++c)for(var l=0;l<s;++l)for(var u=0;u<o;++u){var p=n.get(c,l,u);p<e||zg(u,p,c,l,t,n)&&i.enqueue({score:p,part:{heatmapY:c,heatmapX:l,id:u}})}return i}(o,1,e),u=i*i;c.length<s&&!l.empty();){var p=l.dequeue();if(!$g(c,u,qg(p.part,a,t),p.part.id)){var d=Xg(p,e,t,a,n,r),h=ey(c,u,d);c.push({keypoints:d,score:h})}}return c}function ny(e){var t=e.shape,n=t[0],r=t[1],a=t[2];return pi(function(){var t=_l(e,[n*r,a]),s=ol(t,0),o=Ru(Ic(s,Vc(r,"int32")),1),i=Ru(function(e,t){return pi(function(){var n=Ic(e,Vc(t,"int32"));return Hc(e,Ac(n,Vc(t,"int32")))})}(s,r),1);return Ml([o,i],1)})}function ry(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+Wg)}}function ay(e,t,n){return pi(function(){var r=function(e,t){for(var n=[],r=0;r<Wg;r++){var a=ry(e.get(r,0).valueOf(),e.get(r,1).valueOf(),r,t),s=a.x,o=a.y;n.push(o),n.push(s)}return kd(n,[Wg,2])}(e,n);return Ec(Oo(Ac(e.toTensor(),Vc(t,"int32")),"float32"),r)})}function sy(e,t,n){return Rg(this,void 0,void 0,function(){var r,a,s,o,i,c,l,u,p,d;return Fg(this,function(h){switch(h.label){case 0:return r=0,a=ny(e),[4,Promise.all([e.buffer(),t.buffer(),a.buffer()])];case 1:return s=h.sent(),o=s[0],i=s[1],c=s[2],[4,(l=ay(c,n,i)).buffer()];case 2:return u=h.sent(),p=Array.from(function(e,t){for(var n=t.shape[0],r=new Float32Array(n),a=0;a<n;a++){var s=t.get(a,0),o=t.get(a,1);r[a]=e.get(s,o,a)}return r}(o,c)),d=p.map(function(e,t){return r+=e,{position:{y:u.get(t,0),x:u.get(t,1)},part:Vg[t],score:e}}),a.dispose(),l.dispose(),[2,{keypoints:d,score:r/d.length}]}})})}var oy="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",iy="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";var cy=[-123.15,-115.9,-103.06],ly=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Dg(t,e),t.prototype.preprocessInput=function(e){return Ec(e,cy)},t.prototype.nameOutputResults=function(e){var t=e[0],n=e[1];return{offsets:e[2],heatmap:e[3],displacementFwd:t,displacementBwd:n}},t}(Cg);Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY;function uy(e){return Rg(this,void 0,void 0,function(){return Fg(this,function(t){return[2,Promise.all(e.map(function(e){return e.buffer()}))]})})}function py(e,t){return fy(e,t)?e:Math.floor(e/t)*t+1}function dy(e){Z("number"==typeof e||"object"==typeof e,function(){return"Invalid inputResolution "+e+". Should be a number or an object with width and height"}),"object"==typeof e&&(Z("number"==typeof e.width,function(){return"inputResolution.width has a value of "+e.width+" which is invalid; it must be a number"}),Z("number"==typeof e.height,function(){return"inputResolution.height has a value of "+e.height+" which is invalid; it must be a number"}))}function hy(e,t){return dy(e),"object"==typeof e?[py(e.height,t),py(e.width,t)]:[py(e,t),py(e,t)]}var my=[8,16,32];function fy(e,t){return(e-1)%t==0}function gy(e){return e instanceof Qa?[e.shape[0],e.shape[1]]:[e.height,e.width]}function yy(e,t){var n=t[0],r=t[1],a=gy(e),s=a[0],o=a[1],i=r/n,c=[0,0,0,0],l=c[0],u=c[1],p=c[2],d=c[3];return o/s<i?(l=0,u=0,p=Math.round(.5*(i*s-o)),d=Math.round(.5*(i*s-o))):(l=Math.round(.5*(1/i*o-s)),u=Math.round(.5*(1/i*o-s)),p=0,d=0),{resized:pi(function(){var t=function(e){return e instanceof Qa?e:Pi(e)}(e);return t=_p(t,[[l,u],[p,d],[0,0]]),$h.resizeBilinear(t,[n,r])}),padding:{top:l,left:p,right:d,bottom:u}}}function by(e,t,n,r,a){var s=t[0],o=t[1],i=n[0],c=n[1],l=function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),1===n&&1===t&&0===r&&0===a?e:e.map(function(e){return function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),{score:e.score,keypoints:e.keypoints.map(function(e){var s=e.score,o=e.part,i=e.position;return{score:s,part:o,position:{x:i.x*n+a,y:i.y*t+r}}})}}(e,t,n,r,a)})}(e,(s+r.top+r.bottom)/i,(o+r.left+r.right)/c,-r.top,-r.left);return a?function(e,t){return t<=0?e:e.map(function(e){return function(e,t){return{score:e.score,keypoints:e.keypoints.map(function(e){var n=e.score,r=e.part,a=e.position;return{score:n,part:r,position:{x:t-1-a.x,y:a.y}}})}}(e,t)})}(l,o):l}var wy={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:257},vy=["MobileNetV1","ResNet50"],xy={MobileNetV1:[8,16,32],ResNet50:[32,16]},Ny={MobileNetV1:[.5,.75,1],ResNet50:[1]},Sy=[1,2,4];var ky={flipHorizontal:!1},Ty={flipHorizontal:!1,maxDetections:5,scoreThreshold:.5,nmsRadius:20};var Ey=function(){function e(e,t){(function(e){Z("number"==typeof e,function(){return"outputStride is not a number"}),Z(my.indexOf(e)>=0,function(){return"outputStride of "+e+" is invalid. It must be either 8, 16, or 32"})})(e.outputStride),function(e,t){Z("number"==typeof e[0]&&"number"==typeof e[1],function(){return"both resolution values must be a number but had values "+e}),Z(fy(e[0],t),function(){return"height of "+e[0]+" is invalid for output stride "+t+"."}),Z(fy(e[1],t),function(){return"width of "+e[1]+" is invalid for output stride "+t+"."})}(t,e.outputStride),this.baseModel=e,this.inputResolution=t}return e.prototype.estimateMultiplePoses=function(e,t){return void 0===t&&(t=Ty),Rg(this,void 0,void 0,function(){var n,r,a,s,o,i,c,l,u,p,d,h,m,f,g,y,b,w,v,x,N;return Fg(this,function(S){switch(S.label){case 0:return n=Og({},Ty,t),function(e){var t=e.maxDetections,n=e.scoreThreshold,r=e.nmsRadius;if(t<=0)throw new Error("Invalid maxDetections "+t+". Should be > 0");if(n<0||n>1)throw new Error("Invalid scoreThreshold "+n+". Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius "+r+".")}(t),r=this.baseModel.outputStride,a=this.inputResolution,s=gy(e),o=s[0],i=s[1],c=yy(e,a),l=c.resized,u=c.padding,p=this.baseModel.predict(l),d=p.heatmapScores,h=p.offsets,m=p.displacementFwd,f=p.displacementBwd,[4,uy([d,h,m,f])];case 1:return g=S.sent(),y=g[0],b=g[1],w=g[2],v=g[3],[4,ty(y,b,w,v,r,n.maxDetections,n.scoreThreshold,n.nmsRadius)];case 2:return x=S.sent(),N=by(x,[o,i],a,u,n.flipHorizontal),d.dispose(),h.dispose(),m.dispose(),f.dispose(),l.dispose(),[2,N]}})})},e.prototype.estimateSinglePose=function(e,t){return void 0===t&&(t=ky),Rg(this,void 0,void 0,function(){var n,r,a,s,o,i,c,l,u,p,d,h,m,f,g,y;return Fg(this,function(b){switch(b.label){case 0:return n=Og({},ky,t),r=this.baseModel.outputStride,a=this.inputResolution,s=gy(e),o=s[0],i=s[1],c=yy(e,a),l=c.resized,u=c.padding,p=this.baseModel.predict(l),d=p.heatmapScores,h=p.offsets,m=p.displacementFwd,f=p.displacementBwd,[4,sy(d,h,r)];case 1:return g=b.sent(),y=by([g],[o,i],a,u,n.flipHorizontal),d.dispose(),h.dispose(),m.dispose(),f.dispose(),l.dispose(),[2,y[0]]}})})},e.prototype.estimatePoses=function(e,t){return Rg(this,void 0,void 0,function(){return Fg(this,function(n){switch(n.label){case 0:return"single-person"!==t.decodingMethod?[3,2]:[4,this.estimateSinglePose(e,t)];case 1:return[2,[n.sent()]];case 2:return[2,this.estimateMultiplePoses(e,t)]}})})},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function _y(e){return Rg(this,void 0,void 0,function(){var t,n,r,a,s,o,i;return Fg(this,function(c){switch(c.label){case 0:if(t=e.outputStride,n=e.quantBytes,r=e.multiplier,null==w)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return a=function(e,t,n){var r={1:"100",.75:"075",.5:"050"},a="model-stride"+e+".json";return 4===n?oy+"float/"+r[t]+"/"+a:oy+"quant"+n+"/"+r[t]+"/"+a}(t,r,n),[4,Ag(e.modelUrl||a)];case 1:return s=c.sent(),o=new Bg(s,t),i=hy(e.inputResolution,o.outputStride),[2,new Ey(o,i)]}})})}function Iy(e){return Rg(this,void 0,void 0,function(){var t,n,r,a,s,o;return Fg(this,function(i){switch(i.label){case 0:if(t=e.outputStride,n=e.quantBytes,null==w)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return r=function(e,t){var n="model-stride"+e+".json";return 4===t?iy+"float/"+n:iy+"quant"+t+"/"+n}(t,n),[4,Ag(e.modelUrl||r)];case 1:return a=i.sent(),s=new ly(a,t),o=hy(e.inputResolution,s.outputStride),[2,new Ey(s,o)]}})})}function Ay(e){return void 0===e&&(e=wy),Rg(this,void 0,void 0,function(){return Fg(this,function(t){return"ResNet50"===(e=function(e){if(null==(e=e||wy).architecture&&(e.architecture="MobileNetV1"),vy.indexOf(e.architecture)<0)throw new Error("Invalid architecture "+e.architecture+". Should be one of "+vy);if(null==e.inputResolution&&(e.inputResolution=257),dy(e.inputResolution),null==e.outputStride&&(e.outputStride=16),xy[e.architecture].indexOf(e.outputStride)<0)throw new Error("Invalid outputStride "+e.outputStride+". Should be one of "+xy[e.architecture]+" for architecture "+e.architecture+".");if(null==e.multiplier&&(e.multiplier=1),Ny[e.architecture].indexOf(e.multiplier)<0)throw new Error("Invalid multiplier "+e.multiplier+". Should be one of "+Ny[e.architecture]+" for architecture "+e.architecture+".");if(null==e.quantBytes&&(e.quantBytes=4),Sy.indexOf(e.quantBytes)<0)throw new Error("Invalid quantBytes "+e.quantBytes+". Should be one of "+Sy+" for architecture "+e.architecture+".");if("MobileNetV1"===e.architecture&&32===e.outputStride&&1!==e.multiplier)throw new Error("When using an output stride of 32, you must select 1 as the multiplier.");return e}(e)).architecture?[2,Iy(e)]:"MobileNetV1"===e.architecture?[2,_y(e)]:[2,null]})})}}}]);
//# sourceMappingURL=60.865fd63a.chunk.js.map